{"version":3,"file":"drawers.min.js","sources":["../src/drawers.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Toggling the visibility of the secondary navigation on mobile.\n *\n * @module     theme_boost/drawers\n * @copyright  2021 Bas Brands\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport ModalBackdrop from 'core/modal_backdrop';\nimport Templates from 'core/templates';\nimport * as Aria from 'core/aria';\nimport {dispatchEvent} from 'core/event_dispatcher';\nimport {debounce} from 'core/utils';\nimport {isSmall, isLarge} from 'core/pagehelpers';\nimport Pending from 'core/pending';\nimport {setUserPreference} from 'core_user/repository';\n// The jQuery module is only used for interacting with Boostrap 4. It can we removed when MDL-71979 is integrated.\nimport jQuery from 'jquery';\n\nlet backdropPromise = null;\n\nconst drawerMap = new Map();\n\nconst SELECTORS = {\n    BUTTONS: '[data-toggler=\"drawers\"]',\n    CLOSEBTN: '[data-toggler=\"drawers\"][data-action=\"closedrawer\"]',\n    OPENBTN: '[data-toggler=\"drawers\"][data-action=\"opendrawer\"]',\n    TOGGLEBTN: '[data-toggler=\"drawers\"][data-action=\"toggle\"]',\n    DRAWERS: '[data-region=\"fixed-drawer\"]',\n    DRAWERCONTENT: '.drawercontent',\n    PAGECONTENT: '#page-content',\n    HEADERCONTENT: '.drawerheadercontent',\n};\n\nconst CLASSES = {\n    SCROLLED: 'scrolled',\n    SHOW: 'show',\n    NOTINITIALISED: 'not-initialized',\n};\n\n/**\n * Pixel thresshold to auto-hide drawers.\n *\n * @type {Number}\n */\nconst THRESHOLD = 20;\n\n/**\n * Try to get the drawer z-index from the page content.\n *\n * @returns {Number|null} the z-index of the drawer.\n * @private\n */\nconst getDrawerZIndex = () => {\n    const drawer = document.querySelector(SELECTORS.DRAWERS);\n    if (!drawer) {\n        return null;\n    }\n    return parseInt(window.getComputedStyle(drawer).zIndex, 10);\n};\n\n/**\n * Add a backdrop to the page.\n *\n * @returns {Promise} rendering of modal backdrop.\n * @private\n */\nconst getBackdrop = () => {\n    if (!backdropPromise) {\n        backdropPromise = Templates.render('core/modal_backdrop', {})\n        .then(html => new ModalBackdrop(html))\n        .then(modalBackdrop => {\n            const drawerZindex = getDrawerZIndex();\n            if (drawerZindex) {\n                modalBackdrop.setZIndex(getDrawerZIndex() - 1);\n            }\n            modalBackdrop.getAttachmentPoint().get(0).addEventListener('click', e => {\n                e.preventDefault();\n                Drawers.closeAllDrawers();\n            });\n            return modalBackdrop;\n        })\n        .catch();\n    }\n    return backdropPromise;\n};\n\n/**\n * Get the button element to open a specific drawer.\n *\n * @param {String} drawerId the drawer element Id\n * @return {HTMLElement|undefined} the open button element\n * @private\n */\nconst getDrawerOpenButton = (drawerId) => {\n    let openButton = document.querySelector(`${SELECTORS.OPENBTN}[data-target=\"${drawerId}\"]`);\n    if (!openButton) {\n        openButton = document.querySelector(`${SELECTORS.TOGGLEBTN}[data-target=\"${drawerId}\"]`);\n    }\n    return openButton;\n};\n\n/**\n * Disable drawer tooltips.\n *\n * @param {HTMLElement} drawerNode the drawer main node\n * @private\n */\nconst disableDrawerTooltips = (drawerNode) => {\n    const buttons = [\n        drawerNode.querySelector(SELECTORS.CLOSEBTN),\n        getDrawerOpenButton(drawerNode.id),\n    ];\n    buttons.forEach(button => {\n        if (!button) {\n            return;\n        }\n        disableButtonTooltip(button);\n    });\n};\n\n/**\n * Disable the button tooltips.\n *\n * @param {HTMLElement} button the button element\n * @param {boolean} enableOnBlur if the tooltip must be re-enabled on blur.\n * @private\n */\nconst disableButtonTooltip = (button, enableOnBlur) => {\n    if (button.hasAttribute('data-original-title')) {\n        // The jQuery is still used in Boostrap 4. It can we removed when MDL-71979 is integrated.\n        jQuery(button).tooltip('disable');\n        button.setAttribute('title', button.dataset.originalTitle);\n    } else {\n        button.dataset.disabledToggle = button.dataset.toggle;\n        button.removeAttribute('data-toggle');\n    }\n    if (enableOnBlur) {\n        button.dataset.restoreTooltipOnBlur = true;\n    }\n};\n\n/**\n * Enable drawer tooltips.\n *\n * @param {HTMLElement} drawerNode the drawer main node\n * @private\n */\nconst enableDrawerTooltips = (drawerNode) => {\n    const buttons = [\n        drawerNode.querySelector(SELECTORS.CLOSEBTN),\n        getDrawerOpenButton(drawerNode.id),\n    ];\n    buttons.forEach(button => {\n        if (!button) {\n            return;\n        }\n        enableButtonTooltip(button);\n    });\n};\n\n/**\n * Enable the button tooltips.\n *\n * @param {HTMLElement} button the button element\n * @private\n */\nconst enableButtonTooltip = (button) => {\n    // The jQuery is still used in Boostrap 4. It can we removed when MDL-71979 is integrated.\n    if (button.hasAttribute('data-original-title')) {\n        jQuery(button).tooltip('enable');\n        button.removeAttribute('title');\n    } else if (button.dataset.disabledToggle) {\n        button.dataset.toggle = button.dataset.disabledToggle;\n        jQuery(button).tooltip();\n    }\n    delete button.dataset.restoreTooltipOnBlur;\n};\n\n/**\n * Add scroll listeners to a drawer element.\n *\n * @param {HTMLElement} drawerNode the drawer main node\n * @private\n */\nconst addInnerScrollListener = (drawerNode) => {\n    const content = drawerNode.querySelector(SELECTORS.DRAWERCONTENT);\n    if (!content) {\n        return;\n    }\n    content.addEventListener(\"scroll\", () => {\n        drawerNode.classList.toggle(\n            CLASSES.SCROLLED,\n            content.scrollTop != 0\n        );\n    });\n};\n\n/**\n * The Drawers class is used to control on-screen drawer elements.\n *\n * It handles opening, and closing of drawer elements, as well as more detailed behaviours such as closing a drawer when\n * another drawer is opened, and supports closing a drawer when the screen is resized.\n *\n * Drawers are instantiated on page load, and can also be toggled lazily when toggling any drawer toggle, open button,\n * or close button.\n *\n * A range of show and hide events are also dispatched as detailed in the class\n * {@link module:theme_boost/drawers#eventTypes eventTypes} object.\n *\n * @example <caption>Standard usage</caption>\n *\n * // The module just needs to be included to add drawer support.\n * import 'theme_boost/drawers';\n *\n * @example <caption>Manually open or close any drawer</caption>\n *\n * import Drawers from 'theme_boost/drawers';\n *\n * const myDrawer = Drawers.getDrawerInstanceForNode(document.querySelector('.myDrawerNode');\n * myDrawer.closeDrawer();\n *\n * @example <caption>Listen to the before show event and cancel it</caption>\n *\n * import Drawers from 'theme_boost/drawers';\n *\n * document.addEventListener(Drawers.eventTypes.drawerShow, e => {\n *     // The drawer which will be shown.\n *     window.console.log(e.target);\n *\n *     // The instance of the Drawers class for this drawer.\n *     window.console.log(e.detail.drawerInstance);\n *\n *     // Prevent this drawer from being shown.\n *     e.preventDefault();\n * });\n *\n * @example <caption>Listen to the shown event</caption>\n *\n * document.addEventListener(Drawers.eventTypes.drawerShown, e => {\n *     // The drawer which was shown.\n *     window.console.log(e.target);\n *\n *     // The instance of the Drawers class for this drawer.\n *     window.console.log(e.detail.drawerInstance);\n * });\n */\nexport default class Drawers {\n    /**\n     * The underlying HTMLElement which is controlled.\n     */\n    drawerNode = null;\n\n    /**\n     * The drawer page bounding box dimensions.\n     * @var {DOMRect} boundingRect\n     */\n    boundingRect = null;\n\n    constructor(drawerNode) {\n        // Some behat tests may use fake drawer divs to test components in drawers.\n        if (drawerNode.dataset.behatFakeDrawer !== undefined) {\n            return;\n        }\n\n        this.drawerNode = drawerNode;\n\n        if (isSmall()) {\n            this.closeDrawer({focusOnOpenButton: false, updatePreferences: false});\n        }\n\n        if (this.drawerNode.classList.contains(CLASSES.SHOW)) {\n            this.openDrawer({focusOnCloseButton: false});\n        } else if (this.drawerNode.dataset.forceopen == 1) {\n            if (!isSmall()) {\n                this.openDrawer({focusOnCloseButton: false});\n            }\n        } else {\n            Aria.hide(this.drawerNode);\n        }\n\n        // Disable tooltips in small screens.\n        if (isSmall()) {\n            disableDrawerTooltips(this.drawerNode);\n        }\n\n        addInnerScrollListener(this.drawerNode);\n\n        drawerMap.set(drawerNode, this);\n\n        drawerNode.classList.remove(CLASSES.NOTINITIALISED);\n    }\n\n    /**\n     * Whether the drawer is open.\n     *\n     * @returns {boolean}\n     */\n    get isOpen() {\n        return this.drawerNode.classList.contains(CLASSES.SHOW);\n    }\n\n    /**\n     * Whether the drawer should close when the window is resized\n     *\n     * @returns {boolean}\n     */\n    get closeOnResize() {\n        return !!parseInt(this.drawerNode.dataset.closeOnResize);\n    }\n\n    /**\n     * The list of event types.\n     *\n     * @static\n     * @property {String} drawerShow See {@link event:theme_boost/drawers:show}\n     * @property {String} drawerShown See {@link event:theme_boost/drawers:shown}\n     * @property {String} drawerHide See {@link event:theme_boost/drawers:hide}\n     * @property {String} drawerHidden See {@link event:theme_boost/drawers:hidden}\n     */\n    static eventTypes = {\n        /**\n         * An event triggered before a drawer is shown.\n         *\n         * @event theme_boost/drawers:show\n         * @type {CustomEvent}\n         * @property {HTMLElement} target The drawer that will be opened.\n         */\n        drawerShow: 'theme_boost/drawers:show',\n\n        /**\n         * An event triggered after a drawer is shown.\n         *\n         * @event theme_boost/drawers:shown\n         * @type {CustomEvent}\n         * @property {HTMLElement} target The drawer that was be opened.\n         */\n        drawerShown: 'theme_boost/drawers:shown',\n\n        /**\n         * An event triggered before a drawer is hidden.\n         *\n         * @event theme_boost/drawers:hide\n         * @type {CustomEvent}\n         * @property {HTMLElement} target The drawer that will be hidden.\n         */\n        drawerHide: 'theme_boost/drawers:hide',\n\n        /**\n         * An event triggered after a drawer is hidden.\n         *\n         * @event theme_boost/drawers:hidden\n         * @type {CustomEvent}\n         * @property {HTMLElement} target The drawer that was be hidden.\n         */\n        drawerHidden: 'theme_boost/drawers:hidden',\n    };\n\n\n    /**\n     * Get the drawer instance for the specified node\n     *\n     * @param {HTMLElement} drawerNode\n     * @returns {module:theme_boost/drawers}\n     */\n    static getDrawerInstanceForNode(drawerNode) {\n        if (!drawerMap.has(drawerNode)) {\n            new Drawers(drawerNode);\n        }\n\n        return drawerMap.get(drawerNode);\n    }\n\n    /**\n     * Dispatch a drawer event.\n     *\n     * @param {string} eventname the event name\n     * @param {boolean} cancelable if the event is cancelable\n     * @returns {CustomEvent} the resulting custom event\n     */\n    dispatchEvent(eventname, cancelable = false) {\n        return dispatchEvent(\n            eventname,\n            {\n                drawerInstance: this,\n            },\n            this.drawerNode,\n            {\n                cancelable,\n            }\n        );\n    }\n\n    /**\n     * Open the drawer.\n     *\n     * By default, openDrawer sets the page focus to the close drawer button. However, when a drawer is open at page\n     * load, this represents an accessibility problem as the initial focus changes without any user interaction. The\n     * focusOnCloseButton parameter can be set to false to prevent this behaviour.\n     *\n     * @param {object} args\n     * @param {boolean} [args.focusOnCloseButton=true] Whether to alter page focus when opening the drawer\n     */\n    openDrawer({focusOnCloseButton = true} = {}) {\n\n        const pendingPromise = new Pending('theme_boost/drawers:open');\n        const showEvent = this.dispatchEvent(Drawers.eventTypes.drawerShow, true);\n        if (showEvent.defaultPrevented) {\n            return;\n        }\n\n        // Hide close button and header content while the drawer is showing to prevent glitchy effects.\n        this.drawerNode.querySelector(SELECTORS.CLOSEBTN)?.classList.toggle('hidden', true);\n        this.drawerNode.querySelector(SELECTORS.HEADERCONTENT)?.classList.toggle('hidden', true);\n\n\n        // Remove open tooltip if still visible.\n        let openButton = getDrawerOpenButton(this.drawerNode.id);\n        if (openButton && openButton.hasAttribute('data-original-title')) {\n            // The jQuery is still used in Boostrap 4. It can we removed when MDL-71979 is integrated.\n            jQuery(openButton)?.tooltip('hide');\n        }\n\n        Aria.unhide(this.drawerNode);\n        this.drawerNode.classList.add(CLASSES.SHOW);\n\n        const preference = this.drawerNode.dataset.preference;\n        if (preference && !isSmall() && (this.drawerNode.dataset.forceopen != 1)) {\n            setUserPreference(preference, true);\n        }\n\n        const state = this.drawerNode.dataset.state;\n        if (state) {\n            const page = document.getElementById('page');\n            page.classList.add(state);\n        }\n\n        this.boundingRect = this.drawerNode.getBoundingClientRect();\n\n        if (isSmall()) {\n            getBackdrop().then(backdrop => {\n                backdrop.show();\n\n                const pageWrapper = document.getElementById('page');\n                pageWrapper.style.overflow = 'hidden';\n                return backdrop;\n            })\n            .catch();\n        }\n\n        // Show close button and header content once the drawer is fully opened.\n        const closeButton = this.drawerNode.querySelector(SELECTORS.CLOSEBTN);\n        const headerContent = this.drawerNode.querySelector(SELECTORS.HEADERCONTENT);\n        if (focusOnCloseButton && closeButton) {\n            disableButtonTooltip(closeButton, true);\n        }\n        setTimeout(() => {\n            closeButton.classList.toggle('hidden', false);\n            headerContent.classList.toggle('hidden', false);\n            if (focusOnCloseButton) {\n                closeButton.focus();\n            }\n            pendingPromise.resolve();\n        }, 300);\n\n        this.dispatchEvent(Drawers.eventTypes.drawerShown);\n    }\n\n    /**\n     * Close the drawer.\n     *\n     * @param {object} args\n     * @param {boolean} [args.focusOnOpenButton=true] Whether to alter page focus when opening the drawer\n     * @param {boolean} [args.updatePreferences=true] Whether to update the user prewference\n     */\n    closeDrawer({focusOnOpenButton = true, updatePreferences = true} = {}) {\n\n        const pendingPromise = new Pending('theme_boost/drawers:close');\n\n        const hideEvent = this.dispatchEvent(Drawers.eventTypes.drawerHide, true);\n        if (hideEvent.defaultPrevented) {\n            return;\n        }\n\n        // Hide close button and header content while the drawer is hiding to prevent glitchy effects.\n        const closeButton = this.drawerNode.querySelector(SELECTORS.CLOSEBTN);\n        closeButton?.classList.toggle('hidden', true);\n        const headerContent = this.drawerNode.querySelector(SELECTORS.HEADERCONTENT);\n        headerContent?.classList.toggle('hidden', true);\n        // Remove the close button tooltip if visible.\n        if (closeButton.hasAttribute('data-original-title')) {\n            // The jQuery is still used in Boostrap 4. It can we removed when MDL-71979 is integrated.\n            jQuery(closeButton)?.tooltip('hide');\n        }\n\n        const preference = this.drawerNode.dataset.preference;\n        if (preference && updatePreferences && !isSmall()) {\n            setUserPreference(preference, false);\n        }\n\n        const state = this.drawerNode.dataset.state;\n        if (state) {\n            const page = document.getElementById('page');\n            page.classList.remove(state);\n        }\n\n        Aria.hide(this.drawerNode);\n        this.drawerNode.classList.remove(CLASSES.SHOW);\n\n        getBackdrop().then(backdrop => {\n            backdrop.hide();\n\n            if (isSmall()) {\n                const pageWrapper = document.getElementById('page');\n                pageWrapper.style.overflow = 'visible';\n            }\n            return backdrop;\n        })\n        .catch();\n\n        // Move focus to the open drawer (or toggler) button once the drawer is hidden.\n        let openButton = getDrawerOpenButton(this.drawerNode.id);\n        if (openButton) {\n            disableButtonTooltip(openButton, true);\n        }\n        setTimeout(() => {\n            if (openButton && focusOnOpenButton) {\n                openButton.focus();\n            }\n            pendingPromise.resolve();\n        }, 300);\n\n        this.dispatchEvent(Drawers.eventTypes.drawerHidden);\n    }\n\n    /**\n     * Toggle visibility of the drawer.\n     */\n    toggleVisibility() {\n        if (this.drawerNode.classList.contains(CLASSES.SHOW)) {\n            this.closeDrawer();\n        } else {\n            this.openDrawer();\n        }\n    }\n\n    /**\n     * Displaces the drawer outsite the page.\n     *\n     * @param {Number} scrollPosition the page current scroll position\n     */\n    displace(scrollPosition) {\n        let displace = scrollPosition;\n        let openButton = getDrawerOpenButton(this.drawerNode.id);\n        if (scrollPosition === 0) {\n            this.drawerNode.style.transform = '';\n            if (openButton) {\n                openButton.style.transform = '';\n            }\n            return;\n        }\n        const state = this.drawerNode.dataset?.state;\n        const drawrWidth = this.drawerNode.offsetWidth;\n        let scrollThreshold = drawrWidth;\n        let direction = -1;\n        if (state === 'show-drawer-right') {\n            direction = 1;\n            scrollThreshold = THRESHOLD;\n        }\n        // LTR scroll is positive while RTL scroll is negative.\n        if (Math.abs(scrollPosition) > scrollThreshold) {\n            displace = Math.sign(scrollPosition) * (drawrWidth + THRESHOLD);\n        }\n        displace *= direction;\n        const transform = `translateX(${displace}px)`;\n        if (openButton) {\n            openButton.style.transform = transform;\n        }\n        this.drawerNode.style.transform = transform;\n    }\n\n    /**\n     * Prevent drawer from overlapping an element.\n     *\n     * @param {HTMLElement} currentFocus\n     */\n    preventOverlap(currentFocus) {\n        // Start position drawer (aka. left drawer) will never overlap with the page content.\n        if (!this.isOpen || this.drawerNode.dataset?.state === 'show-drawer-left') {\n            return;\n        }\n        const drawrWidth = this.drawerNode.offsetWidth;\n        const element = currentFocus.getBoundingClientRect();\n\n        // The this.boundingRect is calculated only once and it is reliable\n        // for horizontal overlapping (which is the most common). However,\n        // it is not reliable for vertical overlapping because the drawer\n        // height can be changed by other elements like sticky footer.\n        // To prevent recalculating the boundingRect on every\n        // focusin event, we use horizontal overlapping as first fast check.\n        let overlapping = (\n            (element.right + THRESHOLD) > this.boundingRect.left &&\n            (element.left - THRESHOLD) < this.boundingRect.right\n        );\n        if (overlapping) {\n            const currentBoundingRect = this.drawerNode.getBoundingClientRect();\n            overlapping = (\n                (element.bottom) > currentBoundingRect.top &&\n                (element.top) < currentBoundingRect.bottom\n            );\n        }\n\n        if (overlapping) {\n            // Force drawer to displace out of the page.\n            let displaceOut = drawrWidth + 1;\n            if (window.right_to_left()) {\n                displaceOut *= -1;\n            }\n            this.displace(displaceOut);\n        } else {\n            // Reset drawer displacement.\n            this.displace(window.scrollX);\n        }\n    }\n\n    /**\n     * Close all drawers.\n     */\n    static closeAllDrawers() {\n        drawerMap.forEach(drawerInstance => {\n            drawerInstance.closeDrawer();\n        });\n    }\n\n    /**\n     * Close all drawers except for the specified drawer.\n     *\n     * @param {module:theme_boost/drawers} comparisonInstance\n     */\n    static closeOtherDrawers(comparisonInstance) {\n        drawerMap.forEach(drawerInstance => {\n            if (drawerInstance === comparisonInstance) {\n                return;\n            }\n\n            drawerInstance.closeDrawer();\n        });\n    }\n\n    /**\n     * Prevent drawers from covering the focused element.\n     */\n    static preventCoveringFocusedElement() {\n        const currentFocus = document.activeElement;\n        // Focus on page layout elements should be ignored.\n        const pagecontent = document.querySelector(SELECTORS.PAGECONTENT);\n        if (!currentFocus || !pagecontent?.contains(currentFocus)) {\n            Drawers.displaceDrawers(window.scrollX);\n            return;\n        }\n        drawerMap.forEach(drawerInstance => {\n            drawerInstance.preventOverlap(currentFocus);\n        });\n    }\n\n    /**\n     * Prevent drawer from covering the content when the page content covers the full page.\n     *\n     * @param {Number} displace\n     */\n    static displaceDrawers(displace) {\n        drawerMap.forEach(drawerInstance => {\n            drawerInstance.displace(displace);\n        });\n    }\n}\n\n/**\n * Set the last used attribute for the last used toggle button for a drawer.\n *\n * @param {object} toggleButton The clicked button.\n */\nconst setLastUsedToggle = (toggleButton) => {\n    if (toggleButton.dataset.target) {\n        document.querySelectorAll(`${SELECTORS.BUTTONS}[data-target=\"${toggleButton.dataset.target}\"]`)\n        .forEach(btn => {\n            btn.dataset.lastused = false;\n        });\n        toggleButton.dataset.lastused = true;\n    }\n};\n\n/**\n * Set the focus to the last used button to open this drawer.\n * @param {string} target The drawer target.\n */\nconst focusLastUsedToggle = (target) => {\n    const lastUsedButton = document.querySelector(`${SELECTORS.BUTTONS}[data-target=\"${target}\"][data-lastused=\"true\"`);\n    if (lastUsedButton) {\n        lastUsedButton.focus();\n    }\n};\n\n/**\n * Register the event listeners for the drawer.\n *\n * @private\n */\nconst registerListeners = () => {\n    // Listen for show/hide events.\n    document.addEventListener('click', e => {\n        const toggleButton = e.target.closest(SELECTORS.TOGGLEBTN);\n        if (toggleButton && toggleButton.dataset.target) {\n            e.preventDefault();\n            const targetDrawer = document.getElementById(toggleButton.dataset.target);\n            const drawerInstance = Drawers.getDrawerInstanceForNode(targetDrawer);\n            setLastUsedToggle(toggleButton);\n\n            drawerInstance.toggleVisibility();\n        }\n\n        const openDrawerButton = e.target.closest(SELECTORS.OPENBTN);\n        if (openDrawerButton && openDrawerButton.dataset.target) {\n            e.preventDefault();\n            const targetDrawer = document.getElementById(openDrawerButton.dataset.target);\n            const drawerInstance = Drawers.getDrawerInstanceForNode(targetDrawer);\n            setLastUsedToggle(toggleButton);\n\n            drawerInstance.openDrawer();\n        }\n\n        const closeDrawerButton = e.target.closest(SELECTORS.CLOSEBTN);\n        if (closeDrawerButton && closeDrawerButton.dataset.target) {\n            e.preventDefault();\n            const targetDrawer = document.getElementById(closeDrawerButton.dataset.target);\n            const drawerInstance = Drawers.getDrawerInstanceForNode(targetDrawer);\n\n            drawerInstance.closeDrawer();\n            focusLastUsedToggle(closeDrawerButton.dataset.target);\n        }\n    });\n\n    // Close drawer when another drawer opens.\n    document.addEventListener(Drawers.eventTypes.drawerShow, e => {\n        if (isLarge()) {\n            return;\n        }\n        Drawers.closeOtherDrawers(e.detail.drawerInstance);\n    });\n\n    // Tooglers and openers blur listeners.\n    const btnSelector = `${SELECTORS.TOGGLEBTN}, ${SELECTORS.OPENBTN}, ${SELECTORS.CLOSEBTN}`;\n    document.addEventListener('focusout', (e) => {\n        const button = e.target.closest(btnSelector);\n        if (button?.dataset.restoreTooltipOnBlur !== undefined) {\n            enableButtonTooltip(button);\n        }\n    });\n\n    const closeOnResizeListener = () => {\n        if (isSmall()) {\n            let anyOpen = false;\n            drawerMap.forEach(drawerInstance => {\n                disableDrawerTooltips(drawerInstance.drawerNode);\n                if (drawerInstance.isOpen) {\n                    if (drawerInstance.closeOnResize) {\n                        drawerInstance.closeDrawer();\n                    } else {\n                        anyOpen = true;\n                    }\n                }\n            });\n\n            if (anyOpen) {\n                getBackdrop().then(backdrop => backdrop.show()).catch();\n            }\n        } else {\n            drawerMap.forEach(drawerInstance => {\n                enableDrawerTooltips(drawerInstance.drawerNode);\n            });\n            getBackdrop().then(backdrop => backdrop.hide()).catch();\n        }\n    };\n\n    document.addEventListener('scroll', () => {\n        const body = document.querySelector('body');\n        if (window.scrollY >= window.innerHeight) {\n            body.classList.add(CLASSES.SCROLLED);\n        } else {\n            body.classList.remove(CLASSES.SCROLLED);\n        }\n        // Horizontal scroll listener to displace the drawers to prevent covering\n        // any possible sticky content.\n        Drawers.displaceDrawers(window.scrollX);\n    });\n\n    const preventOverlap = debounce(Drawers.preventCoveringFocusedElement, 100);\n    document.addEventListener('focusin', preventOverlap);\n    document.addEventListener('focusout', preventOverlap);\n\n    window.addEventListener('resize', debounce(closeOnResizeListener, 400));\n};\n\nregisterListeners();\n\nconst drawers = document.querySelectorAll(SELECTORS.DRAWERS);\ndrawers.forEach(drawerNode => Drawers.getDrawerInstanceForNode(drawerNode));\n"],"names":["_getRequireWildcardCache","e","WeakMap","r","t","_interopRequireDefault","obj","__esModule","default","_modal_backdrop","_templates","Aria","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","_interopRequireWildcard","_pending","_jquery","backdropPromise","drawerMap","Map","SELECTORS","CLASSES","getDrawerZIndex","drawer","document","querySelector","parseInt","window","getComputedStyle","zIndex","getBackdrop","Templates","render","then","html","ModalBackdrop","modalBackdrop","setZIndex","getAttachmentPoint","addEventListener","preventDefault","Drawers","closeAllDrawers","catch","getDrawerOpenButton","drawerId","openButton","disableDrawerTooltips","drawerNode","id","forEach","button","disableButtonTooltip","enableOnBlur","hasAttribute","jQuery","tooltip","setAttribute","dataset","originalTitle","disabledToggle","toggle","removeAttribute","restoreTooltipOnBlur","enableButtonTooltip","boundingRect","constructor","undefined","behatFakeDrawer","this","isSmall","closeDrawer","focusOnOpenButton","updatePreferences","classList","contains","openDrawer","focusOnCloseButton","forceopen","hide","content","scrollTop","addInnerScrollListener","remove","isOpen","closeOnResize","static","drawerShow","drawerShown","drawerHide","drawerHidden","getDrawerInstanceForNode","dispatchEvent","eventname","cancelable","arguments","length","drawerInstance","_this$drawerNode$quer","_this$drawerNode$quer2","pendingPromise","Pending","eventTypes","defaultPrevented","_jQuery","unhide","add","preference","setUserPreference","state","getElementById","getBoundingClientRect","backdrop","show","style","overflow","closeButton","headerContent","setTimeout","focus","resolve","_jQuery2","toggleVisibility","displace","scrollPosition","_this$drawerNode$data","transform","drawrWidth","offsetWidth","scrollThreshold","direction","Math","abs","sign","preventOverlap","currentFocus","_this$drawerNode$data2","element","overlapping","right","left","currentBoundingRect","bottom","top","displaceOut","right_to_left","scrollX","closeOtherDrawers","comparisonInstance","preventCoveringFocusedElement","activeElement","pagecontent","displaceDrawers","_exports","setLastUsedToggle","toggleButton","target","querySelectorAll","btn","lastused","registerListeners","closest","targetDrawer","openDrawerButton","closeDrawerButton","lastUsedButton","focusLastUsedToggle","isLarge","detail","btnSelector","body","scrollY","innerHeight","debounce","closeOnResizeListener","anyOpen"],"mappings":"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"}