{"version":3,"file":"courseeditor.min.js","sources":["../../../src/local/courseeditor/courseeditor.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport {getString} from 'core/str';\nimport {Reactive} from 'core/reactive';\nimport notification from 'core/notification';\nimport Exporter from 'core_courseformat/local/courseeditor/exporter';\nimport log from 'core/log';\nimport ajax from 'core/ajax';\nimport * as Storage from 'core/sessionstorage';\nimport {uploadFilesToCourse} from 'core_courseformat/local/courseeditor/fileuploader';\n\n/**\n * Main course editor module.\n *\n * All formats can register new components on this object to create new reactive\n * UI components that watch the current course state.\n *\n * @module     core_courseformat/local/courseeditor/courseeditor\n * @class     core_courseformat/local/courseeditor/courseeditor\n * @copyright  2021 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nexport default class extends Reactive {\n\n    /**\n     * The current state cache key\n     *\n     * The state cache is considered dirty if the state changes from the last page or\n     * if the page has editing mode on.\n     *\n     * @attribute stateKey\n     * @type number|null\n     * @default 1\n     * @package\n     */\n    stateKey = 1;\n\n    /**\n     * The current page section return\n     * @attribute sectionReturn\n     * @type number\n     * @default 0\n     */\n    sectionReturn = 0;\n\n    /**\n     * Set up the course editor when the page is ready.\n     *\n     * The course can only be loaded once per instance. Otherwise an error is thrown.\n     *\n     * The backend can inform the module of the current state key. This key changes every time some\n     * update in the course affect the current user state. Some examples are:\n     *  - The course content has been edited\n     *  - The user marks some activity as completed\n     *  - The user collapses or uncollapses a section (it is stored as a user preference)\n     *\n     * @param {number} courseId course id\n     * @param {string} serverStateKey the current backend course cache reference\n     */\n    async loadCourse(courseId, serverStateKey) {\n\n        if (this.courseId) {\n            throw new Error(`Cannot load ${courseId}, course already loaded with id ${this.courseId}`);\n        }\n\n        if (!serverStateKey) {\n            // The server state key is not provided, we use a invalid statekey to force reloading.\n            serverStateKey = `invalidStateKey_${Date.now()}`;\n        }\n\n        // Default view format setup.\n        this._editing = false;\n        this._supportscomponents = false;\n        this._fileHandlers = null;\n\n        this.courseId = courseId;\n\n        let stateData;\n\n        const storeStateKey = Storage.get(`course/${courseId}/stateKey`);\n        try {\n            // Check if the backend state key is the same we have in our session storage.\n            if (!this.isEditing && serverStateKey == storeStateKey) {\n                stateData = JSON.parse(Storage.get(`course/${courseId}/staticState`));\n            }\n            if (!stateData) {\n                stateData = await this.getServerCourseState();\n            }\n\n        } catch (error) {\n            log.error(\"EXCEPTION RAISED WHILE INIT COURSE EDITOR\");\n            log.error(error);\n            return;\n        }\n\n        // The bulk editing only applies to the frontend and the state data is not created in the backend.\n        stateData.bulk = {\n            enabled: false,\n            selectedType: '',\n            selection: [],\n        };\n\n        this.setInitialState(stateData);\n\n        // In editing mode, the session cache is considered dirty always.\n        if (this.isEditing) {\n            this.stateKey = null;\n        } else {\n            // Check if the last state is the same as the cached one.\n            const newState = JSON.stringify(stateData);\n            const previousState = Storage.get(`course/${courseId}/staticState`);\n            if (previousState !== newState || storeStateKey !== serverStateKey) {\n                Storage.set(`course/${courseId}/staticState`, newState);\n                Storage.set(`course/${courseId}/stateKey`, stateData?.course?.statekey ?? serverStateKey);\n            }\n            this.stateKey = Storage.get(`course/${courseId}/stateKey`);\n        }\n\n        this._loadFileHandlers();\n    }\n\n    /**\n     * Load the file hanlders promise.\n     */\n    _loadFileHandlers() {\n        // Load the course file extensions.\n        this._fileHandlersPromise = new Promise((resolve) => {\n            if (!this.isEditing) {\n                resolve([]);\n                return;\n            }\n            // Check the cache.\n            const handlersCacheKey = `course/${this.courseId}/fileHandlers`;\n\n            const cacheValue = Storage.get(handlersCacheKey);\n            if (cacheValue) {\n                try {\n                    const cachedHandlers = JSON.parse(cacheValue);\n                    resolve(cachedHandlers);\n                    return;\n                } catch (error) {\n                    log.error(\"ERROR PARSING CACHED FILE HANDLERS\");\n                }\n            }\n            // Call file handlers webservice.\n            ajax.call([{\n                methodname: 'core_courseformat_file_handlers',\n                args: {\n                    courseid: this.courseId,\n                }\n            }])[0].then((handlers) => {\n                Storage.set(handlersCacheKey, JSON.stringify(handlers));\n                resolve(handlers);\n                return;\n            }).catch(error => {\n                log.error(error);\n                resolve([]);\n                return;\n            });\n        });\n    }\n\n    /**\n     * Setup the current view settings\n     *\n     * @param {Object} setup format, page and course settings\n     * @param {boolean} setup.editing if the page is in edit mode\n     * @param {boolean} setup.supportscomponents if the format supports components for content\n     * @param {string} setup.cacherev the backend cached state revision\n     * @param {Array} setup.overriddenStrings optional overridden strings\n     */\n    setViewFormat(setup) {\n        this._editing = setup.editing ?? false;\n        this._supportscomponents = setup.supportscomponents ?? false;\n        const overriddenStrings = setup.overriddenStrings ?? [];\n        this._overriddenStrings = overriddenStrings.reduce(\n            (indexed, currentValue) => indexed.set(currentValue.key, currentValue),\n            new Map()\n        );\n    }\n\n    /**\n     * Execute a get string for a possible format overriden editor string.\n     *\n     * Return the proper getString promise for an editor string using the core_courseformat\n     * of the format_PLUGINNAME compoment depending on the current view format setup.\n     * @param {String} key the string key\n     * @param {string|undefined} param The param for variable expansion in the string.\n     * @returns {Promise<String>} a getString promise\n     */\n    getFormatString(key, param) {\n        if (this._overriddenStrings.has(key)) {\n            const override = this._overriddenStrings.get(key);\n            return getString(key, override.component ?? 'core_courseformat', param);\n        }\n        // All format overridable strings are from core_courseformat lang file.\n        return getString(key, 'core_courseformat', param);\n    }\n\n    /**\n     * Load the current course state from the server.\n     *\n     * @returns {Object} the current course state\n     */\n    async getServerCourseState() {\n        const courseState = await ajax.call([{\n            methodname: 'core_courseformat_get_state',\n            args: {\n                courseid: this.courseId,\n            }\n        }])[0];\n\n        const stateData = JSON.parse(courseState);\n\n        return {\n            course: {},\n            section: [],\n            cm: [],\n            ...stateData,\n        };\n    }\n\n    /**\n     * Return the current edit mode.\n     *\n     * Components should use this method to check if edit mode is active.\n     *\n     * @return {boolean} if edit is enabled\n     */\n    get isEditing() {\n        return this._editing ?? false;\n    }\n\n    /**\n     * Return a data exporter to transform state part into mustache contexts.\n     *\n     * @return {Exporter} the exporter class\n     */\n    getExporter() {\n        return new Exporter(this);\n    }\n\n    /**\n     * Return if the current course support components to refresh the content.\n     *\n     * @returns {boolean} if the current content support components\n     */\n    get supportComponents() {\n        return this._supportscomponents ?? false;\n    }\n\n    /**\n     * Return the course file handlers promise.\n     * @returns {Promise} the promise for file handlers.\n     */\n    async getFileHandlersPromise() {\n        return this._fileHandlersPromise ?? [];\n    }\n\n    /**\n     * Upload a file list to the course.\n     *\n     * This method is a wrapper to the course file uploader.\n     *\n     * @param {number} sectionId the section id\n     * @param {number} sectionNum the section number\n     * @param {Array} files and array of files\n     * @return {Promise} the file queue promise\n     */\n    uploadFiles(sectionId, sectionNum, files) {\n        return uploadFilesToCourse(this.courseId, sectionId, sectionNum, files);\n    }\n\n    /**\n     * Get a value from the course editor static storage if any.\n     *\n     * The course editor static storage uses the sessionStorage to store values from the\n     * components. This is used to prevent unnecesary template loadings on every page. However,\n     * the storage does not work if no sessionStorage can be used (in debug mode for example),\n     * if the page is in editing mode or if the initial state change from the last page.\n     *\n     * @param {string} key the key to get\n     * @return {boolean|string} the storage value or false if cannot be loaded\n     */\n    getStorageValue(key) {\n        if (this.isEditing || !this.stateKey) {\n            return false;\n        }\n        const dataJson = Storage.get(`course/${this.courseId}/${key}`);\n        if (!dataJson) {\n            return false;\n        }\n        // Check the stateKey.\n        try {\n            const data = JSON.parse(dataJson);\n            if (data?.stateKey !== this.stateKey) {\n                return false;\n            }\n            return data.value;\n        } catch (error) {\n            return false;\n        }\n    }\n\n    /**\n     * Stores a value into the course editor static storage if available\n     *\n     * @param {String} key the key to store\n     * @param {*} value the value to store (must be compatible with JSON,stringify)\n     * @returns {boolean} true if the value is stored\n     */\n    setStorageValue(key, value) {\n        // Values cannot be stored on edit mode.\n        if (this.isEditing) {\n            return false;\n        }\n        const data = {\n            stateKey: this.stateKey,\n            value,\n        };\n        return Storage.set(`course/${this.courseId}/${key}`, JSON.stringify(data));\n    }\n\n    /**\n     * Convert a file dragging event into a proper dragging file list.\n     * @param {DataTransfer} dataTransfer the event to convert\n     * @return {Array} of file list info.\n     */\n    getFilesDraggableData(dataTransfer) {\n        const exporter = this.getExporter();\n        return exporter.fileDraggableData(this.state, dataTransfer);\n    }\n\n    /**\n     * Dispatch a change in the state.\n     *\n     * Usually reactive modules throw an error directly to the components when something\n     * goes wrong. However, course editor can directly display a notification.\n     *\n     * @method dispatch\n     * @param {mixed} args any number of params the mutation needs.\n     */\n    async dispatch(...args) {\n        try {\n            await super.dispatch(...args);\n        } catch (error) {\n            // Display error modal.\n            notification.exception(error);\n            // Force unlock all elements.\n            super.dispatch('unlockAll');\n        }\n    }\n}\n"],"names":["_getRequireWildcardCache","e","WeakMap","r","t","_interopRequireDefault","obj","__esModule","default","_notification","_exporter","_log","_ajax","Storage","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","_interopRequireWildcard","_default","Reactive","stateKey","sectionReturn","loadCourse","courseId","serverStateKey","this","Error","stateData","Date","now","_editing","_supportscomponents","_fileHandlers","storeStateKey","isEditing","JSON","parse","getServerCourseState","error","log","bulk","enabled","selectedType","selection","setInitialState","newState","stringify","_stateData","_stateData$course","course","statekey","_loadFileHandlers","_fileHandlersPromise","Promise","resolve","handlersCacheKey","cacheValue","cachedHandlers","ajax","methodname","args","courseid","then","handlers","catch","setViewFormat","setup","editing","supportscomponents","overriddenStrings","_overriddenStrings","reduce","indexed","currentValue","key","Map","getFormatString","param","override","getString","component","courseState","section","cm","getExporter","Exporter","supportComponents","getFileHandlersPromise","uploadFiles","sectionId","sectionNum","files","uploadFilesToCourse","getStorageValue","dataJson","data","value","setStorageValue","getFilesDraggableData","dataTransfer","fileDraggableData","state","dispatch","super","arguments","notification","exception","_exports"],"mappings":"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"}