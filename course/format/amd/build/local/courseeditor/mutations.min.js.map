{"version":3,"file":"mutations.min.js","sources":["../../../src/local/courseeditor/mutations.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport ajax from 'core/ajax';\nimport {getString} from \"core/str\";\nimport SRLogger from \"core/local/reactive/srlogger\";\n\n/**\n * Flag to determine whether the screen reader-only logger has already been set, so we only need to set it once.\n *\n * @type {boolean}\n */\nlet isLoggerSet = false;\n\n/**\n * Default mutation manager\n *\n * @module     core_courseformat/local/courseeditor/mutations\n * @class     core_courseformat/local/courseeditor/mutations\n * @copyright  2021 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nexport default class {\n\n    // All course editor mutations for Moodle 4.0 will be located in this file.\n\n    /**\n     * Private method to call core_courseformat_update_course webservice.\n     *\n     * @method _callEditWebservice\n     * @param {string} action\n     * @param {number} courseId\n     * @param {array} ids\n     * @param {number} targetSectionId optional target section id (for moving actions)\n     * @param {number} targetCmId optional target cm id (for moving actions)\n     */\n    async _callEditWebservice(action, courseId, ids, targetSectionId, targetCmId) {\n        const args = {\n            action,\n            courseid: courseId,\n            ids,\n        };\n        if (targetSectionId) {\n            args.targetsectionid = targetSectionId;\n        }\n        if (targetCmId) {\n            args.targetcmid = targetCmId;\n        }\n        let ajaxresult = await ajax.call([{\n            methodname: 'core_courseformat_update_course',\n            args,\n        }])[0];\n        return JSON.parse(ajaxresult);\n    }\n\n    /**\n     * Execute a basic section state action.\n     * @param {StateManager} stateManager the current state manager\n     * @param {string} action the action name\n     * @param {array} sectionIds the section ids\n     * @param {number} targetSectionId optional target section id (for moving actions)\n     * @param {number} targetCmId optional target cm id (for moving actions)\n     */\n    async _sectionBasicAction(stateManager, action, sectionIds, targetSectionId, targetCmId) {\n        const logEntry = this._getLoggerEntry(stateManager, action, sectionIds, {\n            targetSectionId,\n            targetCmId,\n            itemType: 'section',\n        });\n        const course = stateManager.get('course');\n        this.sectionLock(stateManager, sectionIds, true);\n        const updates = await this._callEditWebservice(\n            action,\n            course.id,\n            sectionIds,\n            targetSectionId,\n            targetCmId\n        );\n        this.bulkReset(stateManager);\n        stateManager.processUpdates(updates);\n        this.sectionLock(stateManager, sectionIds, false);\n        stateManager.addLoggerEntry(await logEntry);\n    }\n\n    /**\n     * Execute a basic course module state action.\n     * @param {StateManager} stateManager the current state manager\n     * @param {string} action the action name\n     * @param {array} cmIds the cm ids\n     * @param {number} targetSectionId optional target section id (for moving actions)\n     * @param {number} targetCmId optional target cm id (for moving actions)\n     */\n    async _cmBasicAction(stateManager, action, cmIds, targetSectionId, targetCmId) {\n        const logEntry = this._getLoggerEntry(stateManager, action, cmIds, {\n            targetSectionId,\n            targetCmId,\n            itemType: 'cm',\n        });\n        const course = stateManager.get('course');\n        this.cmLock(stateManager, cmIds, true);\n        const updates = await this._callEditWebservice(\n            action,\n            course.id,\n            cmIds,\n            targetSectionId,\n            targetCmId\n        );\n        this.bulkReset(stateManager);\n        stateManager.processUpdates(updates);\n        this.cmLock(stateManager, cmIds, false);\n        stateManager.addLoggerEntry(await logEntry);\n    }\n\n    /**\n     * Get log entry for the current action.\n     * @param {StateManager} stateManager the current state manager\n     * @param {string} action the action name\n     * @param {int[]|null} itemIds the element ids\n     * @param {Object|undefined} data extra params for the log entry\n     * @param {string|undefined} data.itemType the element type (will be taken from action if none)\n     * @param {int|null|undefined} data.targetSectionId the target section id\n     * @param {int|null|undefined} data.targetCmId the target cm id\n     * @param {String|null|undefined} data.component optional component (for format plugins)\n     * @return {Object} the log entry\n     */\n    async _getLoggerEntry(stateManager, action, itemIds, data = {}) {\n        if (!isLoggerSet) {\n            // In case the logger has not been set from init(), ensure we set the logger.\n            stateManager.setLogger(new SRLogger());\n            isLoggerSet = true;\n        }\n        const feedbackParams = {\n            action,\n            itemType: data.itemType ?? action.split('_')[0],\n        };\n        let batch = '';\n        if (itemIds.length > 1) {\n            feedbackParams.count = itemIds.length;\n            batch = '_batch';\n        } else if (itemIds.length === 1) {\n            const itemInfo = stateManager.get(feedbackParams.itemType, itemIds[0]);\n            feedbackParams.name = itemInfo.title ?? itemInfo.name;\n            // Apply shortener for modules like label.\n        }\n        if (data.targetSectionId) {\n            feedbackParams.targetSectionName = stateManager.get('section', data.targetSectionId).title;\n        }\n        if (data.targetCmId) {\n            feedbackParams.targetCmName = stateManager.get('cm', data.targetCmId).name;\n        }\n\n        const message = await getString(\n            `${action.toLowerCase()}_feedback${batch}`,\n            data.component ?? 'core_courseformat',\n            feedbackParams\n        );\n\n        return {\n            feedbackMessage: message,\n        };\n    }\n\n    /**\n     * Mutation module initialize.\n     *\n     * The reactive instance will execute this method when addMutations or setMutation is invoked.\n     *\n     * @param {StateManager} stateManager the state manager\n     */\n    init(stateManager) {\n        // Add a method to prepare the fields when some update is coming from the server.\n        stateManager.addUpdateTypes({\n            prepareFields: this._prepareFields,\n        });\n        // Use the screen reader-only logger (SRLogger) to handle the feedback messages from the mutations.\n        stateManager.setLogger(new SRLogger());\n        isLoggerSet = true;\n    }\n\n    /**\n     * Add default values to state elements.\n     *\n     * This method is called every time a webservice returns a update state message.\n     *\n     * @param {Object} stateManager the state manager\n     * @param {String} updateName the state element to update\n     * @param {Object} fields the new data\n     * @returns {Object} final fields data\n     */\n    _prepareFields(stateManager, updateName, fields) {\n        // Any update should unlock the element.\n        fields.locked = false;\n        return fields;\n    }\n\n    /**\n     * Hides sections.\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} sectionIds the list of section ids\n     */\n    async sectionHide(stateManager, sectionIds) {\n        await this._sectionBasicAction(stateManager, 'section_hide', sectionIds);\n    }\n\n    /**\n     * Show sections.\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} sectionIds the list of section ids\n     */\n    async sectionShow(stateManager, sectionIds) {\n        await this._sectionBasicAction(stateManager, 'section_show', sectionIds);\n    }\n\n    /**\n     * Show cms.\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} cmIds the list of cm ids\n     */\n    async cmShow(stateManager, cmIds) {\n        await this._cmBasicAction(stateManager, 'cm_show', cmIds);\n    }\n\n    /**\n     * Hide cms.\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} cmIds the list of cm ids\n     */\n    async cmHide(stateManager, cmIds) {\n        await this._cmBasicAction(stateManager, 'cm_hide', cmIds);\n    }\n\n    /**\n     * Stealth cms.\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} cmIds the list of cm ids\n     */\n    async cmStealth(stateManager, cmIds) {\n        await this._cmBasicAction(stateManager, 'cm_stealth', cmIds);\n    }\n\n    /**\n     * Duplicate course modules\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} cmIds the list of course modules ids\n     * @param {number|undefined} targetSectionId the optional target sectionId\n     * @param {number|undefined} targetCmId the target course module id\n     */\n    async cmDuplicate(stateManager, cmIds, targetSectionId, targetCmId) {\n        const logEntry = this._getLoggerEntry(stateManager, 'cm_duplicate', cmIds);\n        const course = stateManager.get('course');\n        // Lock all target sections.\n        const sectionIds = new Set();\n        if (targetSectionId) {\n            sectionIds.add(targetSectionId);\n        } else {\n            cmIds.forEach((cmId) => {\n                const cm = stateManager.get('cm', cmId);\n                sectionIds.add(cm.sectionid);\n            });\n        }\n        this.sectionLock(stateManager, Array.from(sectionIds), true);\n\n        const updates = await this._callEditWebservice('cm_duplicate', course.id, cmIds, targetSectionId, targetCmId);\n        this.bulkReset(stateManager);\n        stateManager.processUpdates(updates);\n\n        this.sectionLock(stateManager, Array.from(sectionIds), false);\n        stateManager.addLoggerEntry(await logEntry);\n    }\n\n    /**\n     * Move course modules to specific course location.\n     *\n     * Note that one of targetSectionId or targetCmId should be provided in order to identify the\n     * new location:\n     *  - targetCmId: the activities will be located avobe the target cm. The targetSectionId\n     *                value will be ignored in this case.\n     *  - targetSectionId: the activities will be appended to the section. In this case\n     *                     targetSectionId should not be present.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} cmids the list of cm ids to move\n     * @param {number} targetSectionId the target section id\n     * @param {number} targetCmId the target course module id\n     */\n    async cmMove(stateManager, cmids, targetSectionId, targetCmId) {\n        if (!targetSectionId && !targetCmId) {\n            throw new Error(`Mutation cmMove requires targetSectionId or targetCmId`);\n        }\n        const course = stateManager.get('course');\n        this.cmLock(stateManager, cmids, true);\n        const updates = await this._callEditWebservice('cm_move', course.id, cmids, targetSectionId, targetCmId);\n        this.bulkReset(stateManager);\n        stateManager.processUpdates(updates);\n        this.cmLock(stateManager, cmids, false);\n    }\n\n    /**\n     * Move course modules to specific course location.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} sectionIds the list of section ids to move\n     * @param {number} targetSectionId the target section id\n     */\n    async sectionMove(stateManager, sectionIds, targetSectionId) {\n        if (!targetSectionId) {\n            throw new Error(`Mutation sectionMove requires targetSectionId`);\n        }\n        const course = stateManager.get('course');\n        this.sectionLock(stateManager, sectionIds, true);\n        const updates = await this._callEditWebservice('section_move', course.id, sectionIds, targetSectionId);\n        this.bulkReset(stateManager);\n        stateManager.processUpdates(updates);\n        this.sectionLock(stateManager, sectionIds, false);\n    }\n\n    /**\n     * Move course modules after a specific course location.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} sectionIds the list of section ids to move\n     * @param {number} targetSectionId the target section id\n     */\n    async sectionMoveAfter(stateManager, sectionIds, targetSectionId) {\n        if (!targetSectionId) {\n            throw new Error(`Mutation sectionMoveAfter requires targetSectionId`);\n        }\n        const course = stateManager.get('course');\n        this.sectionLock(stateManager, sectionIds, true);\n        const updates = await this._callEditWebservice('section_move_after', course.id, sectionIds, targetSectionId);\n        this.bulkReset(stateManager);\n        stateManager.processUpdates(updates);\n        this.sectionLock(stateManager, sectionIds, false);\n    }\n\n    /**\n     * Add a new section to a specific course location.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {number} targetSectionId optional the target section id\n     */\n    async addSection(stateManager, targetSectionId) {\n        if (!targetSectionId) {\n            targetSectionId = 0;\n        }\n        const course = stateManager.get('course');\n        const updates = await this._callEditWebservice('section_add', course.id, [], targetSectionId);\n        stateManager.processUpdates(updates);\n    }\n\n    /**\n     * Delete sections.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} sectionIds the list of course modules ids\n     */\n    async sectionDelete(stateManager, sectionIds) {\n        const course = stateManager.get('course');\n        const updates = await this._callEditWebservice('section_delete', course.id, sectionIds);\n        this.bulkReset(stateManager);\n        stateManager.processUpdates(updates);\n    }\n\n    /**\n     * Delete cms.\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} cmIds the list of section ids\n     */\n    async cmDelete(stateManager, cmIds) {\n        const course = stateManager.get('course');\n        this.cmLock(stateManager, cmIds, true);\n        const updates = await this._callEditWebservice('cm_delete', course.id, cmIds);\n        this.bulkReset(stateManager);\n        this.cmLock(stateManager, cmIds, false);\n        stateManager.processUpdates(updates);\n    }\n\n    /**\n     * Mark or unmark course modules as dragging.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} cmIds the list of course modules ids\n     * @param {bool} dragValue the new dragging value\n     */\n    cmDrag(stateManager, cmIds, dragValue) {\n        this.setPageItem(stateManager);\n        this._setElementsValue(stateManager, 'cm', cmIds, 'dragging', dragValue);\n    }\n\n    /**\n     * Mark or unmark course sections as dragging.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} sectionIds the list of section ids\n     * @param {bool} dragValue the new dragging value\n     */\n    sectionDrag(stateManager, sectionIds, dragValue) {\n        this.setPageItem(stateManager);\n        this._setElementsValue(stateManager, 'section', sectionIds, 'dragging', dragValue);\n    }\n\n    /**\n     * Mark or unmark course modules as complete.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} cmIds the list of course modules ids\n     * @param {bool} complete the new completion value\n     */\n    cmCompletion(stateManager, cmIds, complete) {\n        const newValue = (complete) ? 1 : 0;\n        this._setElementsValue(stateManager, 'cm', cmIds, 'completionstate', newValue);\n    }\n\n    /**\n     * Move cms to the right: indent = 1.\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} cmIds the list of cm ids\n     */\n    async cmMoveRight(stateManager, cmIds) {\n        await this._cmBasicAction(stateManager, 'cm_moveright', cmIds);\n    }\n\n    /**\n     * Move cms to the left: indent = 0.\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} cmIds the list of cm ids\n     */\n    async cmMoveLeft(stateManager, cmIds) {\n        await this._cmBasicAction(stateManager, 'cm_moveleft', cmIds);\n    }\n\n    /**\n     * Set cms group mode to NOGROUPS.\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} cmIds the list of cm ids\n     */\n    async cmNoGroups(stateManager, cmIds) {\n        await this._cmBasicAction(stateManager, 'cm_nogroups', cmIds);\n    }\n\n    /**\n     * Set cms group mode to VISIBLEGROUPS.\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} cmIds the list of cm ids\n     */\n    async cmVisibleGroups(stateManager, cmIds) {\n        await this._cmBasicAction(stateManager, 'cm_visiblegroups', cmIds);\n    }\n\n    /**\n     * Set cms group mode to SEPARATEGROUPS.\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} cmIds the list of cm ids\n     */\n    async cmSeparateGroups(stateManager, cmIds) {\n        await this._cmBasicAction(stateManager, 'cm_separategroups', cmIds);\n    }\n\n    /**\n     * Lock or unlock course modules.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} cmIds the list of course modules ids\n     * @param {bool} lockValue the new locked value\n     */\n    cmLock(stateManager, cmIds, lockValue) {\n        this._setElementsValue(stateManager, 'cm', cmIds, 'locked', lockValue);\n    }\n\n    /**\n     * Lock or unlock course sections.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} sectionIds the list of section ids\n     * @param {bool} lockValue the new locked value\n     */\n    sectionLock(stateManager, sectionIds, lockValue) {\n        this._setElementsValue(stateManager, 'section', sectionIds, 'locked', lockValue);\n    }\n\n    _setElementsValue(stateManager, name, ids, fieldName, newValue) {\n        stateManager.setReadOnly(false);\n        ids.forEach((id) => {\n            const element = stateManager.get(name, id);\n            if (element) {\n                element[fieldName] = newValue;\n            }\n        });\n        stateManager.setReadOnly(true);\n    }\n\n    /**\n     * Set the page current item.\n     *\n     * Only one element of the course state can be the page item at a time.\n     *\n     * There are several actions that can alter the page current item. For example, when the user is in an activity\n     * page, the page item is always the activity one. However, in a course page, when the user scrolls to an element,\n     * this element get the page item.\n     *\n     * If the page item is static means that it is not meant to change. This is important because\n     * static page items has some special logic. For example, if a cm is the static page item\n     * and it is inside a collapsed section, the course index will expand the section to make it visible.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {String|undefined} type the element type (section or cm). Undefined will remove the current page item.\n     * @param {Number|undefined} id the element id\n     * @param {boolean|undefined} isStatic if the page item is static\n     */\n    setPageItem(stateManager, type, id, isStatic) {\n        let newPageItem;\n        if (type !== undefined) {\n            newPageItem = stateManager.get(type, id);\n            if (!newPageItem) {\n                return;\n            }\n        }\n        stateManager.setReadOnly(false);\n        // Remove the current page item.\n        const course = stateManager.get('course');\n        course.pageItem = null;\n        // Save the new page item.\n        if (newPageItem) {\n            course.pageItem = {\n                id,\n                type,\n                sectionId: (type == 'section') ? newPageItem.id : newPageItem.sectionid,\n                isStatic,\n            };\n        }\n        stateManager.setReadOnly(true);\n    }\n\n    /**\n     * Unlock all course elements.\n     *\n     * @param {StateManager} stateManager the current state manager\n     */\n    unlockAll(stateManager) {\n        const state = stateManager.state;\n        stateManager.setReadOnly(false);\n        state.section.forEach((section) => {\n            section.locked = false;\n        });\n        state.cm.forEach((cm) => {\n            cm.locked = false;\n        });\n        stateManager.setReadOnly(true);\n    }\n\n    /**\n     * Update the course index collapsed attribute of some sections.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} sectionIds the affected section ids\n     * @param {boolean} collapsed the new collapsed value\n     */\n    async sectionIndexCollapsed(stateManager, sectionIds, collapsed) {\n        const collapsedIds = this._updateStateSectionPreference(stateManager, 'indexcollapsed', sectionIds, collapsed);\n        if (!collapsedIds) {\n            return;\n        }\n        const course = stateManager.get('course');\n        await this._callEditWebservice('section_index_collapsed', course.id, collapsedIds);\n    }\n\n    /**\n     * Update the course index collapsed attribute of all sections.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {boolean} collapsed the new collapsed value\n     */\n    async allSectionsIndexCollapsed(stateManager, collapsed) {\n        const sectionIds = stateManager.getIds('section');\n        this.sectionIndexCollapsed(stateManager, sectionIds, collapsed);\n    }\n\n    /**\n     * Update the course content collapsed attribute of some sections.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} sectionIds the affected section ids\n     * @param {boolean} collapsed the new collapsed value\n     */\n    async sectionContentCollapsed(stateManager, sectionIds, collapsed) {\n        const collapsedIds = this._updateStateSectionPreference(stateManager, 'contentcollapsed', sectionIds, collapsed);\n        if (!collapsedIds) {\n            return;\n        }\n        const course = stateManager.get('course');\n        await this._callEditWebservice('section_content_collapsed', course.id, collapsedIds);\n    }\n\n    /**\n     * Private batch update for a section preference attribute.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {string} preferenceName the preference name\n     * @param {array} sectionIds the affected section ids\n     * @param {boolean} preferenceValue the new preferenceValue value\n     * @return {Number[]|null} sections ids with the preference value true or null if no update is required\n     */\n    _updateStateSectionPreference(stateManager, preferenceName, sectionIds, preferenceValue) {\n        stateManager.setReadOnly(false);\n        const affectedSections = new Set();\n        // Check if we need to update preferences.\n        sectionIds.forEach(sectionId => {\n            const section = stateManager.get('section', sectionId);\n            if (section === undefined) {\n                return null;\n            }\n            const newValue = preferenceValue ?? section[preferenceName];\n            if (section[preferenceName] != newValue) {\n                section[preferenceName] = newValue;\n                affectedSections.add(section.id);\n            }\n        });\n        stateManager.setReadOnly(true);\n        if (affectedSections.size == 0) {\n            return null;\n        }\n        // Get all collapsed section ids.\n        const collapsedSectionIds = [];\n        const state = stateManager.state;\n        state.section.forEach(section => {\n            if (section[preferenceName]) {\n                collapsedSectionIds.push(section.id);\n            }\n        });\n        return collapsedSectionIds;\n    }\n\n    /**\n     * Enable/disable bulk editing.\n     *\n     * Note: reenabling the bulk will clean the current selection.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {Boolean} enabled the new bulk state.\n     */\n    bulkEnable(stateManager, enabled) {\n        const state = stateManager.state;\n        stateManager.setReadOnly(false);\n        state.bulk.enabled = enabled;\n        state.bulk.selectedType = '';\n        state.bulk.selection = [];\n        stateManager.setReadOnly(true);\n    }\n\n    /**\n     * Reset the current selection.\n     * @param {StateManager} stateManager the current state manager\n     */\n    bulkReset(stateManager) {\n        const state = stateManager.state;\n        stateManager.setReadOnly(false);\n        state.bulk.selectedType = '';\n        state.bulk.selection = [];\n        stateManager.setReadOnly(true);\n    }\n\n    /**\n     * Select a list of cms.\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} cmIds the list of cm ids\n     */\n    cmSelect(stateManager, cmIds) {\n        this._addIdsToSelection(stateManager, 'cm', cmIds);\n    }\n\n    /**\n     * Unselect a list of cms.\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} cmIds the list of cm ids\n     */\n    cmUnselect(stateManager, cmIds) {\n        this._removeIdsFromSelection(stateManager, 'cm', cmIds);\n    }\n\n    /**\n     * Select a list of sections.\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} sectionIds the list of cm ids\n     */\n    sectionSelect(stateManager, sectionIds) {\n        this._addIdsToSelection(stateManager, 'section', sectionIds);\n    }\n\n    /**\n     * Unselect a list of sections.\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} sectionIds the list of cm ids\n     */\n    sectionUnselect(stateManager, sectionIds) {\n        this._removeIdsFromSelection(stateManager, 'section', sectionIds);\n    }\n\n    /**\n     * Add some ids to the current bulk selection.\n     * @param {StateManager} stateManager the current state manager\n     * @param {String} typeName the type name (section/cm)\n     * @param {array} ids the list of ids\n     */\n    _addIdsToSelection(stateManager, typeName, ids) {\n        const bulk = stateManager.state.bulk;\n        if (!bulk?.enabled) {\n            throw new Error(`Bulk is not enabled`);\n        }\n        if (bulk?.selectedType !== \"\" && bulk?.selectedType !== typeName) {\n            throw new Error(`Cannot add ${typeName} to the current selection`);\n        }\n\n        // Stored ids are strings for compatability with HTML data attributes.\n        ids = ids.map(value => value.toString());\n\n        stateManager.setReadOnly(false);\n        bulk.selectedType = typeName;\n        const newSelection = new Set([...bulk.selection, ...ids]);\n        bulk.selection = [...newSelection];\n        stateManager.setReadOnly(true);\n    }\n\n    /**\n     * Remove some ids to the current bulk selection.\n     *\n     * The method resets the selection type if the current selection is empty.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {String} typeName the type name (section/cm)\n     * @param {array} ids the list of ids\n     */\n    _removeIdsFromSelection(stateManager, typeName, ids) {\n        const bulk = stateManager.state.bulk;\n        if (!bulk?.enabled) {\n            throw new Error(`Bulk is not enabled`);\n        }\n        if (bulk?.selectedType !== \"\" && bulk?.selectedType !== typeName) {\n            throw new Error(`Cannot remove ${typeName} from the current selection`);\n        }\n\n        // Stored ids are strings for compatability with HTML data attributes.\n        ids = ids.map(value => value.toString());\n\n        stateManager.setReadOnly(false);\n        const IdsToFilter = new Set(ids);\n        bulk.selection = bulk.selection.filter(current => !IdsToFilter.has(current));\n        if (bulk.selection.length === 0) {\n            bulk.selectedType = '';\n        }\n        stateManager.setReadOnly(true);\n    }\n\n    /**\n     * Get updated state data related to some cm ids.\n     *\n     * @method cmState\n     * @param {StateManager} stateManager the current state\n     * @param {array} cmids the list of cm ids to update\n     */\n    async cmState(stateManager, cmids) {\n        this.cmLock(stateManager, cmids, true);\n        const course = stateManager.get('course');\n        const updates = await this._callEditWebservice('cm_state', course.id, cmids);\n        stateManager.processUpdates(updates);\n        this.cmLock(stateManager, cmids, false);\n    }\n\n    /**\n     * Get updated state data related to some section ids.\n     *\n     * @method sectionState\n     * @param {StateManager} stateManager the current state\n     * @param {array} sectionIds the list of section ids to update\n     */\n    async sectionState(stateManager, sectionIds) {\n        this.sectionLock(stateManager, sectionIds, true);\n        const course = stateManager.get('course');\n        const updates = await this._callEditWebservice('section_state', course.id, sectionIds);\n        stateManager.processUpdates(updates);\n        this.sectionLock(stateManager, sectionIds, false);\n    }\n\n    /**\n     * Get the full updated state data of the course.\n     *\n     * @param {StateManager} stateManager the current state\n     */\n    async courseState(stateManager) {\n        const course = stateManager.get('course');\n        const updates = await this._callEditWebservice('course_state', course.id);\n        stateManager.processUpdates(updates);\n    }\n\n}\n"],"names":["_interopRequireDefault","obj","__esModule","default","_ajax","_srlogger","isLoggerSet","_exports","_callEditWebservice","action","courseId","ids","targetSectionId","targetCmId","args","courseid","targetsectionid","targetcmid","ajaxresult","ajax","call","methodname","JSON","parse","_sectionBasicAction","stateManager","sectionIds","logEntry","this","_getLoggerEntry","itemType","course","get","sectionLock","updates","id","bulkReset","processUpdates","addLoggerEntry","_cmBasicAction","cmIds","cmLock","itemIds","data","arguments","length","undefined","setLogger","SRLogger","feedbackParams","split","batch","count","itemInfo","name","title","targetSectionName","targetCmName","feedbackMessage","getString","toLowerCase","component","init","addUpdateTypes","prepareFields","_prepareFields","updateName","fields","locked","sectionHide","sectionShow","cmShow","cmHide","cmStealth","cmDuplicate","Set","add","forEach","cmId","cm","sectionid","Array","from","cmMove","cmids","Error","sectionMove","sectionMoveAfter","addSection","sectionDelete","cmDelete","cmDrag","dragValue","setPageItem","_setElementsValue","sectionDrag","cmCompletion","complete","newValue","cmMoveRight","cmMoveLeft","cmNoGroups","cmVisibleGroups","cmSeparateGroups","lockValue","fieldName","setReadOnly","element","type","isStatic","newPageItem","pageItem","sectionId","unlockAll","state","section","sectionIndexCollapsed","collapsed","collapsedIds","_updateStateSectionPreference","allSectionsIndexCollapsed","getIds","sectionContentCollapsed","preferenceName","preferenceValue","affectedSections","size","collapsedSectionIds","push","bulkEnable","enabled","bulk","selectedType","selection","cmSelect","_addIdsToSelection","cmUnselect","_removeIdsFromSelection","sectionSelect","sectionUnselect","typeName","map","value","toString","newSelection","IdsToFilter","filter","current","has","cmState","sectionState","courseState"],"mappings":"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"}