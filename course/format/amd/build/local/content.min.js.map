{"version":3,"file":"content.min.js","sources":["../../src/local/content.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Course index main component.\n *\n * @module     core_courseformat/local/content\n * @class      core_courseformat/local/content\n * @copyright  2020 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {BaseComponent} from 'core/reactive';\nimport {debounce} from 'core/utils';\nimport {getCurrentCourseEditor} from 'core_courseformat/courseeditor';\nimport Config from 'core/config';\nimport inplaceeditable from 'core/inplace_editable';\nimport Section from 'core_courseformat/local/content/section';\nimport CmItem from 'core_courseformat/local/content/section/cmitem';\nimport Fragment from 'core/fragment';\nimport Templates from 'core/templates';\nimport DispatchActions from 'core_courseformat/local/content/actions';\nimport * as CourseEvents from 'core_course/events';\n// The jQuery module is only used for interacting with Boostrap 4. It can we removed when MDL-71979 is integrated.\nimport jQuery from 'jquery';\nimport Pending from 'core/pending';\n\nexport default class Component extends BaseComponent {\n\n    /**\n     * Constructor hook.\n     *\n     * @param {Object} descriptor the component descriptor\n     */\n    create(descriptor) {\n        // Optional component name for debugging.\n        this.name = 'course_format';\n        // Default query selectors.\n        this.selectors = {\n            SECTION: `[data-for='section']`,\n            SECTION_ITEM: `[data-for='section_title']`,\n            SECTION_CMLIST: `[data-for='cmlist']`,\n            COURSE_SECTIONLIST: `[data-for='course_sectionlist']`,\n            CM: `[data-for='cmitem']`,\n            TOGGLER: `[data-action=\"togglecoursecontentsection\"]`,\n            COLLAPSE: `[data-toggle=\"collapse\"]`,\n            TOGGLEALL: `[data-toggle=\"toggleall\"]`,\n            // Formats can override the activity tag but a default one is needed to create new elements.\n            ACTIVITYTAG: 'li',\n            SECTIONTAG: 'li',\n        };\n        // Default classes to toggle on refresh.\n        this.classes = {\n            COLLAPSED: `collapsed`,\n            // Course content classes.\n            ACTIVITY: `activity`,\n            STATEDREADY: `stateready`,\n            SECTION: `section`,\n        };\n        // Array to save dettached elements during element resorting.\n        this.dettachedCms = {};\n        this.dettachedSections = {};\n        // Index of sections and cms components.\n        this.sections = {};\n        this.cms = {};\n        // The page section return.\n        this.sectionReturn = descriptor.sectionReturn ?? 0;\n        this.debouncedReloads = new Map();\n    }\n\n    /**\n     * Static method to create a component instance form the mustahce template.\n     *\n     * @param {string} target the DOM main element or its ID\n     * @param {object} selectors optional css selector overrides\n     * @param {number} sectionReturn the content section return\n     * @return {Component}\n     */\n    static init(target, selectors, sectionReturn) {\n        return new Component({\n            element: document.getElementById(target),\n            reactive: getCurrentCourseEditor(),\n            selectors,\n            sectionReturn,\n        });\n    }\n\n    /**\n     * Initial state ready method.\n     *\n     * @param {Object} state the state data\n     */\n    stateReady(state) {\n        this._indexContents();\n        // Activate section togglers.\n        this.addEventListener(this.element, 'click', this._sectionTogglers);\n\n        // Collapse/Expand all sections button.\n        const toogleAll = this.getElement(this.selectors.TOGGLEALL);\n        if (toogleAll) {\n\n            // Ensure collapse menu button adds aria-controls attribute referring to each collapsible element.\n            const collapseElements = this.getElements(this.selectors.COLLAPSE);\n            const collapseElementIds = [...collapseElements].map(element => element.id);\n            toogleAll.setAttribute('aria-controls', collapseElementIds.join(' '));\n\n            this.addEventListener(toogleAll, 'click', this._allSectionToggler);\n            this.addEventListener(toogleAll, 'keydown', e => {\n                // Collapse/expand all sections when Space key is pressed on the toggle button.\n                if (e.key === ' ') {\n                    this._allSectionToggler(e);\n                }\n            });\n            this._refreshAllSectionsToggler(state);\n        }\n\n        if (this.reactive.supportComponents) {\n            // Actions are only available in edit mode.\n            if (this.reactive.isEditing) {\n                new DispatchActions(this);\n            }\n\n            // Mark content as state ready.\n            this.element.classList.add(this.classes.STATEDREADY);\n        }\n\n        // Capture completion events.\n        this.addEventListener(\n            this.element,\n            CourseEvents.manualCompletionToggled,\n            this._completionHandler\n        );\n\n        // Capture page scroll to update page item.\n        this.addEventListener(\n            document,\n            \"scroll\",\n            this._scrollHandler\n        );\n        setTimeout(() => {\n            this._scrollHandler();\n        }, 500);\n    }\n\n    /**\n     * Setup sections toggler.\n     *\n     * Toggler click is delegated to the main course content element because new sections can\n     * appear at any moment and this way we prevent accidental double bindings.\n     *\n     * @param {Event} event the triggered event\n     */\n    _sectionTogglers(event) {\n        const sectionlink = event.target.closest(this.selectors.TOGGLER);\n        const closestCollapse = event.target.closest(this.selectors.COLLAPSE);\n        // Assume that chevron is the only collapse toggler in a section heading;\n        // I think this is the most efficient way to verify at the moment.\n        const isChevron = closestCollapse?.closest(this.selectors.SECTION_ITEM);\n\n        if (sectionlink || isChevron) {\n\n            const section = event.target.closest(this.selectors.SECTION);\n            const toggler = section.querySelector(this.selectors.COLLAPSE);\n            const isCollapsed = toggler?.classList.contains(this.classes.COLLAPSED) ?? false;\n\n            if (isChevron || isCollapsed) {\n                // Update the state.\n                const sectionId = section.getAttribute('data-id');\n                this.reactive.dispatch(\n                    'sectionContentCollapsed',\n                    [sectionId],\n                    !isCollapsed\n                );\n            }\n        }\n    }\n\n    /**\n     * Handle the collapse/expand all sections button.\n     *\n     * Toggler click is delegated to the main course content element because new sections can\n     * appear at any moment and this way we prevent accidental double bindings.\n     *\n     * @param {Event} event the triggered event\n     */\n    _allSectionToggler(event) {\n        event.preventDefault();\n\n        const target = event.target.closest(this.selectors.TOGGLEALL);\n        const isAllCollapsed = target.classList.contains(this.classes.COLLAPSED);\n\n        const course = this.reactive.get('course');\n        this.reactive.dispatch(\n            'sectionContentCollapsed',\n            course.sectionlist ?? [],\n            !isAllCollapsed\n        );\n    }\n\n    /**\n     * Return the component watchers.\n     *\n     * @returns {Array} of watchers\n     */\n    getWatchers() {\n        // Section return is a global page variable but most formats define it just before start printing\n        // the course content. This is the reason why we define this page setting here.\n        this.reactive.sectionReturn = this.sectionReturn;\n\n        // Check if the course format is compatible with reactive components.\n        if (!this.reactive.supportComponents) {\n            return [];\n        }\n        return [\n            // State changes that require to reload some course modules.\n            {watch: `cm.visible:updated`, handler: this._reloadCm},\n            {watch: `cm.stealth:updated`, handler: this._reloadCm},\n            {watch: `cm.sectionid:updated`, handler: this._reloadCm},\n            {watch: `cm.indent:updated`, handler: this._reloadCm},\n            {watch: `cm.groupmode:updated`, handler: this._reloadCm},\n            // Update section number and title.\n            {watch: `section.number:updated`, handler: this._refreshSectionNumber},\n            // Collapse and expand sections.\n            {watch: `section.contentcollapsed:updated`, handler: this._refreshSectionCollapsed},\n            // Sections and cm sorting.\n            {watch: `transaction:start`, handler: this._startProcessing},\n            {watch: `course.sectionlist:updated`, handler: this._refreshCourseSectionlist},\n            {watch: `section.cmlist:updated`, handler: this._refreshSectionCmlist},\n            // Section visibility.\n            {watch: `section.visible:updated`, handler: this._reloadSection},\n            // Reindex sections and cms.\n            {watch: `state:updated`, handler: this._indexContents},\n        ];\n    }\n\n    /**\n     * Update section collapsed state via bootstrap 4 if necessary.\n     *\n     * Formats that do not use bootstrap 4 must override this method in order to keep the section\n     * toggling working.\n     *\n     * @param {object} args\n     * @param {Object} args.state The state data\n     * @param {Object} args.element The element to update\n     */\n    _refreshSectionCollapsed({state, element}) {\n        const target = this.getElement(this.selectors.SECTION, element.id);\n        if (!target) {\n            throw new Error(`Unknown section with ID ${element.id}`);\n        }\n        // Check if it is already done.\n        const toggler = target.querySelector(this.selectors.COLLAPSE);\n        const isCollapsed = toggler?.classList.contains(this.classes.COLLAPSED) ?? false;\n\n        if (element.contentcollapsed !== isCollapsed) {\n            let collapsibleId = toggler.dataset.target ?? toggler.getAttribute(\"href\");\n            if (!collapsibleId) {\n                return;\n            }\n            collapsibleId = collapsibleId.replace('#', '');\n            const collapsible = document.getElementById(collapsibleId);\n            if (!collapsible) {\n                return;\n            }\n\n            // Course index is based on Bootstrap 4 collapsibles. To collapse them we need jQuery to\n            // interact with collapsibles methods. Hopefully, this will change in Bootstrap 5 because\n            // it does not require jQuery anymore (when MDL-71979 is integrated).\n            jQuery(collapsible).collapse(element.contentcollapsed ? 'hide' : 'show');\n        }\n\n        this._refreshAllSectionsToggler(state);\n    }\n\n    /**\n     * Refresh the collapse/expand all sections element.\n     *\n     * @param {Object} state The state data\n     */\n    _refreshAllSectionsToggler(state) {\n        const target = this.getElement(this.selectors.TOGGLEALL);\n        if (!target) {\n            return;\n        }\n        // Check if we have all sections collapsed/expanded.\n        let allcollapsed = true;\n        let allexpanded = true;\n        state.section.forEach(\n            section => {\n                allcollapsed = allcollapsed && section.contentcollapsed;\n                allexpanded = allexpanded && !section.contentcollapsed;\n            }\n        );\n        if (allcollapsed) {\n            target.classList.add(this.classes.COLLAPSED);\n            target.setAttribute('aria-expanded', false);\n        }\n        if (allexpanded) {\n            target.classList.remove(this.classes.COLLAPSED);\n            target.setAttribute('aria-expanded', true);\n        }\n    }\n\n    /**\n     * Setup the component to start a transaction.\n     *\n     * Some of the course actions replaces the current DOM element with a new one before updating the\n     * course state. This means the component cannot preload any index properly until the transaction starts.\n     *\n     */\n    _startProcessing() {\n        // During a section or cm sorting, some elements could be dettached from the DOM and we\n        // need to store somewhare in case they are needed later.\n        this.dettachedCms = {};\n        this.dettachedSections = {};\n    }\n\n    /**\n     * Activity manual completion listener.\n     *\n     * @param {Event} event the custom ecent\n     */\n    _completionHandler({detail}) {\n        if (detail === undefined) {\n            return;\n        }\n        this.reactive.dispatch('cmCompletion', [detail.cmid], detail.completed);\n    }\n\n    /**\n     * Check the current page scroll and update the active element if necessary.\n     */\n    _scrollHandler() {\n        const pageOffset = window.scrollY;\n        const items = this.reactive.getExporter().allItemsArray(this.reactive.state);\n        // Check what is the active element now.\n        let pageItem = null;\n        items.every(item => {\n            const index = (item.type === 'section') ? this.sections : this.cms;\n            if (index[item.id] === undefined) {\n                return true;\n            }\n\n            const element = index[item.id].element;\n            pageItem = item;\n            return pageOffset >= element.offsetTop;\n        });\n        if (pageItem) {\n            this.reactive.dispatch('setPageItem', pageItem.type, pageItem.id);\n        }\n    }\n\n    /**\n     * Update a course section when the section number changes.\n     *\n     * The courseActions module used for most course section tools still depends on css classes and\n     * section numbers (not id). To prevent inconsistencies when a section is moved, we need to refresh\n     * the\n     *\n     * Course formats can override the section title rendering so the frontend depends heavily on backend\n     * rendering. Luckily in edit mode we can trigger a title update using the inplace_editable module.\n     *\n     * @param {Object} param\n     * @param {Object} param.element details the update details.\n     */\n    _refreshSectionNumber({element}) {\n        // Find the element.\n        const target = this.getElement(this.selectors.SECTION, element.id);\n        if (!target) {\n            // Job done. Nothing to refresh.\n            return;\n        }\n        // Update section numbers in all data, css and YUI attributes.\n        target.id = `section-${element.number}`;\n        // YUI uses section number as section id in data-sectionid, in principle if a format use components\n        // don't need this sectionid attribute anymore, but we keep the compatibility in case some plugin\n        // use it for legacy purposes.\n        target.dataset.sectionid = element.number;\n        // The data-number is the attribute used by components to store the section number.\n        target.dataset.number = element.number;\n\n        // Update title and title inplace editable, if any.\n        const inplace = inplaceeditable.getInplaceEditable(target.querySelector(this.selectors.SECTION_ITEM));\n        if (inplace) {\n            // The course content HTML can be modified at any moment, so the function need to do some checkings\n            // to make sure the inplace editable still represents the same itemid.\n            const currentvalue = inplace.getValue();\n            const currentitemid = inplace.getItemId();\n            // Unnamed sections must be recalculated.\n            if (inplace.getValue() === '') {\n                // The value to send can be an empty value if it is a default name.\n                if (currentitemid == element.id && (currentvalue != element.rawtitle || element.rawtitle == '')) {\n                    inplace.setValue(element.rawtitle);\n                }\n            }\n        }\n    }\n\n    /**\n     * Refresh a section cm list.\n     *\n     * @param {Object} param\n     * @param {Object} param.element details the update details.\n     */\n    _refreshSectionCmlist({element}) {\n        const cmlist = element.cmlist ?? [];\n        const section = this.getElement(this.selectors.SECTION, element.id);\n        const listparent = section?.querySelector(this.selectors.SECTION_CMLIST);\n        // A method to create a fake element to be replaced when the item is ready.\n        const createCm = this._createCmItem.bind(this);\n        if (listparent) {\n            this._fixOrder(listparent, cmlist, this.selectors.CM, this.dettachedCms, createCm);\n        }\n    }\n\n    /**\n     * Refresh the section list.\n     *\n     * @param {Object} param\n     * @param {Object} param.element details the update details.\n     */\n    _refreshCourseSectionlist({element}) {\n        // If we have a section return means we only show a single section so no need to fix order.\n        if (this.reactive.sectionReturn != 0) {\n            return;\n        }\n        const sectionlist = element.sectionlist ?? [];\n        const listparent = this.getElement(this.selectors.COURSE_SECTIONLIST);\n        // For now section cannot be created at a frontend level.\n        const createSection = this._createSectionItem.bind(this);\n        if (listparent) {\n            this._fixOrder(listparent, sectionlist, this.selectors.SECTION, this.dettachedSections, createSection);\n        }\n    }\n\n    /**\n     * Regenerate content indexes.\n     *\n     * This method is used when a legacy action refresh some content element.\n     */\n    _indexContents() {\n        // Find unindexed sections.\n        this._scanIndex(\n            this.selectors.SECTION,\n            this.sections,\n            (item) => {\n                return new Section(item);\n            }\n        );\n\n        // Find unindexed cms.\n        this._scanIndex(\n            this.selectors.CM,\n            this.cms,\n            (item) => {\n                return new CmItem(item);\n            }\n        );\n    }\n\n    /**\n     * Reindex a content (section or cm) of the course content.\n     *\n     * This method is used internally by _indexContents.\n     *\n     * @param {string} selector the DOM selector to scan\n     * @param {*} index the index attribute to update\n     * @param {*} creationhandler method to create a new indexed element\n     */\n    _scanIndex(selector, index, creationhandler) {\n        const items = this.getElements(`${selector}:not([data-indexed])`);\n        items.forEach((item) => {\n            if (!item?.dataset?.id) {\n                return;\n            }\n            // Delete previous item component.\n            if (index[item.dataset.id] !== undefined) {\n                index[item.dataset.id].unregister();\n            }\n            // Create the new component.\n            index[item.dataset.id] = creationhandler({\n                ...this,\n                element: item,\n            });\n            // Mark as indexed.\n            item.dataset.indexed = true;\n        });\n    }\n\n    /**\n     * Reload a course module contents.\n     *\n     * Most course module HTML is still strongly backend dependant.\n     * Some changes require to get a new version of the module.\n     *\n     * @param {object} param0 the watcher details\n     * @param {object} param0.element the state object\n     */\n    _reloadCm({element}) {\n        if (!this.getElement(this.selectors.CM, element.id)) {\n            return;\n        }\n        const debouncedReload = this._getDebouncedReloadCm(element.id);\n        debouncedReload();\n    }\n\n    /**\n     * Generate or get a reload CM debounced function.\n     * @param {Number} cmId\n     * @returns {Function} the debounced reload function\n     */\n    _getDebouncedReloadCm(cmId) {\n        const pendingKey = `courseformat/content:reloadCm_${cmId}`;\n        let debouncedReload = this.debouncedReloads.get(pendingKey);\n        if (debouncedReload) {\n            return debouncedReload;\n        }\n        const reload = () => {\n            const pendingReload = new Pending(pendingKey);\n            this.debouncedReloads.delete(pendingKey);\n            const cmitem = this.getElement(this.selectors.CM, cmId);\n            if (!cmitem) {\n                return pendingReload.resolve();\n            }\n            const promise = Fragment.loadFragment(\n                'core_courseformat',\n                'cmitem',\n                Config.courseContextId,\n                {\n                    id: cmId,\n                    courseid: Config.courseId,\n                    sr: this.reactive.sectionReturn ?? 0,\n                }\n            );\n            promise.then((html, js) => {\n                // Other state change can reload the CM or the section before this one.\n                if (!document.contains(cmitem)) {\n                    pendingReload.resolve();\n                    return false;\n                }\n                Templates.replaceNode(cmitem, html, js);\n                this._indexContents();\n                pendingReload.resolve();\n                return true;\n            }).catch(() => {\n                pendingReload.resolve();\n            });\n            return pendingReload;\n        };\n        debouncedReload = debounce(\n            reload,\n            200,\n            {\n                cancel: true, pending: true\n            }\n        );\n        this.debouncedReloads.set(pendingKey, debouncedReload);\n        return debouncedReload;\n    }\n\n    /**\n     * Cancel the active reload CM debounced function, if any.\n     * @param {Number} cmId\n     */\n    _cancelDebouncedReloadCm(cmId) {\n        const pendingKey = `courseformat/content:reloadCm_${cmId}`;\n        const debouncedReload = this.debouncedReloads.get(pendingKey);\n        if (!debouncedReload) {\n            return;\n        }\n        debouncedReload.cancel();\n        this.debouncedReloads.delete(pendingKey);\n    }\n\n    /**\n     * Reload a course section contents.\n     *\n     * Section HTML is still strongly backend dependant.\n     * Some changes require to get a new version of the section.\n     *\n     * @param {details} param0 the watcher details\n     * @param {object} param0.element the state object\n     */\n    _reloadSection({element}) {\n        const pendingReload = new Pending(`courseformat/content:reloadSection_${element.id}`);\n        const sectionitem = this.getElement(this.selectors.SECTION, element.id);\n        if (sectionitem) {\n            // Cancel any pending reload because the section will reload cms too.\n            for (const cmId of element.cmlist) {\n                this._cancelDebouncedReloadCm(cmId);\n            }\n            const promise = Fragment.loadFragment(\n                'core_courseformat',\n                'section',\n                Config.courseContextId,\n                {\n                    id: element.id,\n                    courseid: Config.courseId,\n                    sr: this.reactive.sectionReturn ?? 0,\n                }\n            );\n            promise.then((html, js) => {\n                Templates.replaceNode(sectionitem, html, js);\n                this._indexContents();\n                pendingReload.resolve();\n            }).catch(() => {\n                pendingReload.resolve();\n            });\n        }\n    }\n\n    /**\n     * Create a new course module item in a section.\n     *\n     * Thos method will append a fake item in the container and trigger an ajax request to\n     * replace the fake element by the real content.\n     *\n     * @param {Element} container the container element (section)\n     * @param {Number} cmid the course-module ID\n     * @returns {Element} the created element\n     */\n    _createCmItem(container, cmid) {\n        const newItem = document.createElement(this.selectors.ACTIVITYTAG);\n        newItem.dataset.for = 'cmitem';\n        newItem.dataset.id = cmid;\n        // The legacy actions.js requires a specific ID and class to refresh the CM.\n        newItem.id = `module-${cmid}`;\n        newItem.classList.add(this.classes.ACTIVITY);\n        container.append(newItem);\n        this._reloadCm({\n            element: this.reactive.get('cm', cmid),\n        });\n        return newItem;\n    }\n\n    /**\n     * Create a new section item.\n     *\n     * This method will append a fake item in the container and trigger an ajax request to\n     * replace the fake element by the real content.\n     *\n     * @param {Element} container the container element (section)\n     * @param {Number} sectionid the course-module ID\n     * @returns {Element} the created element\n     */\n    _createSectionItem(container, sectionid) {\n        const section = this.reactive.get('section', sectionid);\n        const newItem = document.createElement(this.selectors.SECTIONTAG);\n        newItem.dataset.for = 'section';\n        newItem.dataset.id = sectionid;\n        newItem.dataset.number = section.number;\n        // The legacy actions.js requires a specific ID and class to refresh the section.\n        newItem.id = `section-${sectionid}`;\n        newItem.classList.add(this.classes.SECTION);\n        container.append(newItem);\n        this._reloadSection({\n            element: section,\n        });\n        return newItem;\n    }\n\n    /**\n     * Fix/reorder the section or cms order.\n     *\n     * @param {Element} container the HTML element to reorder.\n     * @param {Array} neworder an array with the ids order\n     * @param {string} selector the element selector\n     * @param {Object} dettachedelements a list of dettached elements\n     * @param {function} createMethod method to create missing elements\n     */\n    async _fixOrder(container, neworder, selector, dettachedelements, createMethod) {\n        if (container === undefined) {\n            return;\n        }\n\n        // Empty lists should not be visible.\n        if (!neworder.length) {\n            container.classList.add('hidden');\n            container.innerHTML = '';\n            return;\n        }\n\n        // Grant the list is visible (in case it was empty).\n        container.classList.remove('hidden');\n\n        // Move the elements in order at the beginning of the list.\n        neworder.forEach((itemid, index) => {\n            let item = this.getElement(selector, itemid) ?? dettachedelements[itemid] ?? createMethod(container, itemid);\n            if (item === undefined) {\n                // Missing elements cannot be sorted.\n                return;\n            }\n            // Get the current elemnt at that position.\n            const currentitem = container.children[index];\n            if (currentitem === undefined) {\n                container.append(item);\n                return;\n            }\n            if (currentitem !== item) {\n                container.insertBefore(item, currentitem);\n            }\n        });\n\n        // Dndupload add a fake element we need to keep.\n        let dndFakeActivity;\n\n        // Remove the remaining elements.\n        while (container.children.length > neworder.length) {\n            const lastchild = container.lastChild;\n            if (lastchild?.classList?.contains('dndupload-preview')) {\n                dndFakeActivity = lastchild;\n            } else {\n                dettachedelements[lastchild?.dataset?.id ?? 0] = lastchild;\n            }\n            container.removeChild(lastchild);\n        }\n        // Restore dndupload fake element.\n        if (dndFakeActivity) {\n            container.append(dndFakeActivity);\n        }\n    }\n}\n"],"names":["_getRequireWildcardCache","e","WeakMap","r","t","_interopRequireDefault","obj","__esModule","default","_config","_inplace_editable","_section","_cmitem","_fragment","_templates","_actions","CourseEvents","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","_interopRequireWildcard","_jquery","_pending","Component","BaseComponent","create","descriptor","this","name","selectors","SECTION","SECTION_ITEM","SECTION_CMLIST","COURSE_SECTIONLIST","CM","TOGGLER","COLLAPSE","TOGGLEALL","ACTIVITYTAG","SECTIONTAG","classes","COLLAPSED","ACTIVITY","STATEDREADY","dettachedCms","dettachedSections","sections","cms","sectionReturn","debouncedReloads","Map","init","target","element","document","getElementById","reactive","getCurrentCourseEditor","stateReady","state","_indexContents","addEventListener","_sectionTogglers","toogleAll","getElement","collapseElementIds","getElements","map","id","setAttribute","join","_allSectionToggler","key","_refreshAllSectionsToggler","supportComponents","isEditing","DispatchActions","classList","add","manualCompletionToggled","_completionHandler","_scrollHandler","setTimeout","event","sectionlink","closest","closestCollapse","isChevron","section","toggler","querySelector","isCollapsed","contains","sectionId","getAttribute","dispatch","preventDefault","isAllCollapsed","course","sectionlist","getWatchers","watch","handler","_reloadCm","_refreshSectionNumber","_refreshSectionCollapsed","_startProcessing","_refreshCourseSectionlist","_refreshSectionCmlist","_reloadSection","_ref","Error","contentcollapsed","collapsibleId","dataset","replace","collapsible","jQuery","collapse","allcollapsed","allexpanded","forEach","remove","_ref2","detail","undefined","cmid","completed","pageOffset","window","scrollY","items","getExporter","allItemsArray","pageItem","every","item","index","type","offsetTop","_ref3","number","sectionid","inplace","inplaceeditable","getInplaceEditable","currentvalue","getValue","currentitemid","getItemId","rawtitle","setValue","_ref4","cmlist","listparent","createCm","_createCmItem","bind","_fixOrder","_ref5","createSection","_createSectionItem","_scanIndex","Section","CmItem","selector","creationhandler","_item$dataset","unregister","indexed","_ref6","_getDebouncedReloadCm","debouncedReload","cmId","pendingKey","debounce","reload","pendingReload","Pending","delete","cmitem","resolve","Fragment","loadFragment","Config","courseContextId","courseid","courseId","sr","then","html","js","Templates","replaceNode","catch","cancel","pending","_cancelDebouncedReloadCm","_ref7","sectionitem","container","newItem","createElement","for","append","neworder","dettachedelements","createMethod","length","innerHTML","dndFakeActivity","itemid","currentitem","children","insertBefore","_lastchild$classList","lastchild","lastChild","_lastchild$dataset","removeChild","_exports"],"mappings":"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"}