{"version":3,"file":"bulkselection.min.js","sources":["../../../../src/local/content/actions/bulkselection.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Bulk selection auxiliar methods.\n *\n * @module     core_courseformat/local/content/actions/bulkselection\n * @class      core_courseformat/local/content/actions/bulkselection\n * @copyright  2023 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nclass BulkSelector {\n\n    /**\n     * The class constructor.\n     * @param {CourseEditor} courseEditor the original actions component.\n     */\n    constructor(courseEditor) {\n        this.courseEditor = courseEditor;\n        this.selectors = {\n            BULKCMCHECKBOX: `[data-bulkcheckbox][data-action='toggleSelectionCm']`,\n            BULKSECTIONCHECKBOX: `[data-bulkcheckbox][data-action='toggleSelectionSection']`,\n            CONTENT: `#region-main`,\n        };\n    }\n\n    /**\n     * Process a new selection.\n     * @param {Number} id\n     * @param {String} elementType cm or section\n     * @param {Object} settings special selection settings\n     * @param {Boolean} settings.all if the action is over all elements of the same type\n     * @param {Boolean} settings.range if the action is over a range of elements\n     */\n    processNewSelection(id, elementType, settings) {\n        const value = !this._isBulkSelected(id, elementType);\n        if (settings.all && settings.range) {\n            this.switchCurrentSelection();\n            return;\n        }\n        if (!this._isSelectable(id, elementType)) {\n            return;\n        }\n        if (settings.all) {\n            if (elementType == 'cm') {\n                this._updateBulkCmSiblings(id, value);\n            } else {\n                this._updateBulkSelectionAll(elementType, value);\n            }\n            return;\n        }\n        if (settings.range) {\n            this._updateBulkSelectionRange(id, elementType, value);\n            return;\n        }\n        this._updateBulkSelection([id], elementType, value);\n    }\n\n    /**\n     * Switch between section and cm selection.\n     */\n    switchCurrentSelection() {\n        const bulk = this.courseEditor.get('bulk');\n        if (bulk.selectedType === '' || bulk.selection.length == 0) {\n            return;\n        }\n        const newSelectedType = (bulk.selectedType === 'section') ? 'cm' : 'section';\n        let newSelectedIds;\n        if (bulk.selectedType === 'section') {\n            newSelectedIds = this._getCmIdsFromSections(bulk.selection);\n        } else {\n            newSelectedIds = this._getSectionIdsFromCms(bulk.selection);\n        }\n        // Formats can display only a few activities of the section,\n        // We need to select on the activities present in the page.\n        const affectedIds = [];\n        newSelectedIds.forEach(newId => {\n            if (this._getSelector(newId, newSelectedType)) {\n                affectedIds.push(newId);\n            }\n        });\n        this.courseEditor.dispatch('bulkEnable', true);\n        if (affectedIds.length != 0) {\n            this._updateBulkSelection(affectedIds, newSelectedType, true);\n        }\n    }\n\n    /**\n     * Select all elements of the current type.\n     * @param {Boolean} value the wanted selected value\n     */\n    selectAll(value) {\n        const bulk = this.courseEditor.get('bulk');\n        if (bulk.selectedType == '') {\n            return;\n        }\n        if (!value) {\n            this.courseEditor.dispatch('bulkEnable', true);\n            return;\n        }\n        const elementType = bulk.selectedType;\n        this._updateBulkSelectionAll(elementType, value);\n    }\n\n    /**\n     * Checks if all selectable elements are selected.\n     * @returns {Boolean} true if all are selected\n     */\n    checkAllSelected() {\n        const bulk = this.courseEditor.get('bulk');\n        if (bulk.selectedType == '') {\n            return false;\n        }\n        return this._getContentCheckboxes(bulk.selectedType).every(bulkSelect => {\n            if (bulkSelect.disabled) {\n                return false;\n            }\n            // Section zero is never selectale for bulk actions.\n            if (bulk.selectedType == 'section') {\n                const section = this.courseEditor.get('section', bulkSelect.dataset.id);\n                if (section.number == 0) {\n                    return true;\n                }\n            }\n            return bulk.selection.includes(bulkSelect.dataset.id);\n        });\n    }\n\n    /**\n     * Check if the id is part of the current bulk selection.\n     * @private\n     * @param {Number} id\n     * @param {String} elementType\n     * @returns {Boolean} if the element is present in the current selection.\n     */\n    _isBulkSelected(id, elementType) {\n        const bulk = this.courseEditor.get('bulk');\n        if (bulk.selectedType !== elementType) {\n            return false;\n        }\n        return bulk.selection.includes(id);\n    }\n\n    /**\n     * Update the current bulk selection removing or adding Ids.\n     * @private\n     * @param {Number[]} ids the user selected element id\n     * @param {String} elementType cm or section\n     * @param {Boolean} value the wanted selected value\n     */\n    _updateBulkSelection(ids, elementType, value) {\n        let mutation = elementType;\n        mutation += (value) ? 'Select' : 'Unselect';\n        this.courseEditor.dispatch(mutation, ids);\n    }\n\n    /**\n     * Get all content bulk selector checkboxes of one type (section/cm).\n     * @private\n     * @param {String} elementType section or cm\n     * @returns {HTMLElement[]} an array with all checkboxes\n     */\n    _getContentCheckboxes(elementType) {\n        const selector = (elementType == 'cm') ? this.selectors.BULKCMCHECKBOX : this.selectors.BULKSECTIONCHECKBOX;\n        const checkboxes = document.querySelectorAll(`${this.selectors.CONTENT} ${selector}`);\n        // Converting to array because NodeList has less iteration methods.\n        return [...checkboxes];\n    }\n\n    /**\n     * Validate if an element is selectable in the current page.\n     * @private\n     * @param {Number} id the user selected element id\n     * @param {String} elementType cm or section\n     * @return {Boolean}\n     */\n    _isSelectable(id, elementType) {\n        const bulkSelect = this._getSelector(id, elementType);\n        if (!bulkSelect || bulkSelect.disabled) {\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Get as specific element checkbox.\n     * @private\n     * @param {Number} id\n     * @param {String} elementType cm or section\n     * @returns {HTMLElement|undefined}\n     */\n    _getSelector(id, elementType) {\n        let selector = (elementType == 'cm') ? this.selectors.BULKCMCHECKBOX : this.selectors.BULKSECTIONCHECKBOX;\n        selector += `[data-id='${id}']`;\n        return document.querySelector(`${this.selectors.CONTENT} ${selector}`);\n    }\n\n    /**\n     * Update the current bulk selection when a user uses shift to select a range.\n     * @private\n     * @param {Number} id the user selected element id\n     * @param {String} elementType cm or section\n     * @param {Boolean} value the wanted selected value\n     */\n    _updateBulkSelectionRange(id, elementType, value) {\n        const bulk = this.courseEditor.get('bulk');\n        let lastSelectedId = bulk.selection.at(-1);\n        if (bulk.selectedType !== elementType || lastSelectedId == id) {\n            this._updateBulkSelection([id], elementType, value);\n            return;\n        }\n        const affectedIds = [];\n        let found = 0;\n        this._getContentCheckboxes(elementType).every(bulkSelect => {\n            if (bulkSelect.disabled) {\n                return true;\n            }\n            if (bulkSelect.dataset.id == id || bulkSelect.dataset.id == lastSelectedId) {\n                found++;\n            }\n            if (found == 0) {\n                return true;\n            }\n            affectedIds.push(bulkSelect.dataset.id);\n            return found != 2;\n        });\n        this._updateBulkSelection(affectedIds, elementType, value);\n    }\n\n    /**\n     * Select or unselect all cm siblings.\n     * @private\n     * @param {Number} cmId the user selected element id\n     * @param {Boolean} value the wanted selected value\n     */\n    _updateBulkCmSiblings(cmId, value) {\n        const bulk = this.courseEditor.get('bulk');\n        if (bulk.selectedType === 'section') {\n            return;\n        }\n        const cm = this.courseEditor.get('cm', cmId);\n        const section = this.courseEditor.get('section', cm.sectionid);\n        // Formats can display only a few activities of the section,\n        // We need to select on the activities selectable in the page.\n        const affectedIds = [];\n        section.cmlist.forEach(sectionCmId => {\n            if (this._isSelectable(sectionCmId, 'cm')) {\n                affectedIds.push(sectionCmId);\n            }\n        });\n        this._updateBulkSelection(affectedIds, 'cm', value);\n    }\n\n    /**\n     * Select or unselects al elements of the same type.\n     * @private\n     * @param {String} elementType section or cm\n     * @param {Boolean} value if the elements must be selected or unselected.\n     */\n    _updateBulkSelectionAll(elementType, value) {\n        const affectedIds = [];\n        this._getContentCheckboxes(elementType).forEach(bulkSelect => {\n            if (bulkSelect.disabled) {\n                return;\n            }\n            if (elementType == 'section') {\n                const section = this.courseEditor.get('section', bulkSelect.dataset.id);\n                if (section?.number == 0) {\n                    return;\n                }\n            }\n            affectedIds.push(bulkSelect.dataset.id);\n        });\n        this._updateBulkSelection(affectedIds, elementType, value);\n    }\n\n    /**\n     * Get all cm ids from a specific section ids.\n     * @private\n     * @param {Number[]} sectionIds\n     * @returns {Number[]} the cm ids\n     */\n    _getCmIdsFromSections(sectionIds) {\n        const result = [];\n        sectionIds.forEach(sectionId => {\n            const section = this.courseEditor.get('section', sectionId);\n            result.push(...section.cmlist);\n        });\n        return result;\n    }\n\n    /**\n     * Get all section ids containing a specific cm ids.\n     * @private\n     * @param {Number[]} cmIds\n     * @returns {Number[]} the section ids\n     */\n    _getSectionIdsFromCms(cmIds) {\n        const result = new Set();\n        cmIds.forEach(cmId => {\n            const cm = this.courseEditor.get('cm', cmId);\n            if (cm.sectionnumber == 0) {\n                return;\n            }\n            result.add(cm.sectionid);\n        });\n        return [...result];\n    }\n}\n\n/**\n * Process a bulk selection toggle action.\n * @method\n * @param {CourseEditor} courseEditor\n * @param {HTMLElement} target the action element\n * @param {Event} event\n * @param {String} elementType cm or section\n */\nexport const toggleBulkSelectionAction = function(courseEditor, target, event, elementType) {\n    const id = target.dataset.id;\n    if (!id) {\n        return;\n    }\n    // When the action cames from a form element (checkbox) we should not preventDefault.\n    // If we do it the changechecker module will execute the state change twice.\n    if (target.dataset.preventDefault) {\n        event.preventDefault();\n    }\n    // Using shift or alt key can produce text selection.\n    document.getSelection().removeAllRanges();\n\n    const bulkSelector = new BulkSelector(courseEditor);\n    bulkSelector.processNewSelection(\n        id,\n        elementType,\n        {\n            range: event.shiftKey,\n            all: event.altKey,\n        }\n    );\n};\n\n/**\n * Switch the current bulk selection.\n * @method\n * @param {CourseEditor} courseEditor\n */\nexport const switchBulkSelection = function(courseEditor) {\n    const bulkSelector = new BulkSelector(courseEditor);\n    bulkSelector.switchCurrentSelection();\n};\n\n/**\n * Select/unselect all element of the selected type.\n * @method\n * @param {CourseEditor} courseEditor\n * @param {Boolean} value if the elements must be selected or unselected.\n */\nexport const selectAllBulk = function(courseEditor, value) {\n    const bulkSelector = new BulkSelector(courseEditor);\n    bulkSelector.selectAll(value);\n};\n\n/**\n * Check if all possible elements are selected.\n * @method\n * @param {CourseEditor} courseEditor\n * @return {Boolean} if all elements of the current type are selected.\n */\nexport const checkAllBulkSelected = function(courseEditor) {\n    const bulkSelector = new BulkSelector(courseEditor);\n    return bulkSelector.checkAllSelected();\n};\n"],"names":["BulkSelector","constructor","courseEditor","this","selectors","BULKCMCHECKBOX","BULKSECTIONCHECKBOX","CONTENT","processNewSelection","id","elementType","settings","value","_isBulkSelected","all","range","switchCurrentSelection","_isSelectable","_updateBulkCmSiblings","_updateBulkSelectionAll","_updateBulkSelectionRange","_updateBulkSelection","bulk","get","selectedType","selection","length","newSelectedType","newSelectedIds","_getCmIdsFromSections","_getSectionIdsFromCms","affectedIds","forEach","newId","_getSelector","push","dispatch","selectAll","checkAllSelected","_getContentCheckboxes","every","bulkSelect","disabled","dataset","number","includes","ids","mutation","selector","document","querySelectorAll","querySelector","lastSelectedId","at","found","cmId","cm","section","sectionid","cmlist","sectionCmId","sectionIds","result","sectionId","cmIds","Set","sectionnumber","add","_exports","toggleBulkSelectionAction","target","event","preventDefault","getSelection","removeAllRanges","shiftKey","altKey","switchBulkSelection","selectAllBulk","checkAllBulkSelected"],"mappings":";;;;;;;;;AAuBA,MAAMA,aAMFC,WAAAA,CAAYC,cACRC,KAAKD,aAAeA,aACpBC,KAAKC,UAAY,CACbC,eAAiB,uDACjBC,oBAAsB,4DACtBC,QAAU,eAElB,CAUAC,mBAAAA,CAAoBC,GAAIC,YAAaC,UACjC,MAAMC,OAAST,KAAKU,gBAAgBJ,GAAIC,aACpCC,SAASG,KAAOH,SAASI,MACzBZ,KAAKa,yBAGJb,KAAKc,cAAcR,GAAIC,eAGxBC,SAASG,IACU,MAAfJ,YACAP,KAAKe,sBAAsBT,GAAIG,OAE/BT,KAAKgB,wBAAwBT,YAAaE,OAI9CD,SAASI,MACTZ,KAAKiB,0BAA0BX,GAAIC,YAAaE,OAGpDT,KAAKkB,qBAAqB,CAACZ,IAAKC,YAAaE,OACjD,CAKAI,sBAAAA,GACI,MAAMM,KAAOnB,KAAKD,aAAaqB,IAAI,QACnC,GAA0B,KAAtBD,KAAKE,cAAgD,GAAzBF,KAAKG,UAAUC,OAC3C,OAEJ,MAAMC,gBAAyC,YAAtBL,KAAKE,aAA8B,KAAO,UACnE,IAAII,eAEAA,eADsB,YAAtBN,KAAKE,aACYrB,KAAK0B,sBAAsBP,KAAKG,WAEhCtB,KAAK2B,sBAAsBR,KAAKG,WAIrD,MAAMM,YAAc,GACpBH,eAAeI,SAAQC,QACf9B,KAAK+B,aAAaD,MAAON,kBACzBI,YAAYI,KAAKF,MACrB,IAEJ9B,KAAKD,aAAakC,SAAS,cAAc,GACf,GAAtBL,YAAYL,QACZvB,KAAKkB,qBAAqBU,YAAaJ,iBAAiB,EAEhE,CAMAU,SAAAA,CAAUzB,OACN,MAAMU,KAAOnB,KAAKD,aAAaqB,IAAI,QACnC,GAAyB,IAArBD,KAAKE,aACL,OAEJ,IAAKZ,MAED,YADAT,KAAKD,aAAakC,SAAS,cAAc,GAG7C,MAAM1B,YAAcY,KAAKE,aACzBrB,KAAKgB,wBAAwBT,YAAaE,MAC9C,CAMA0B,gBAAAA,GACI,MAAMhB,KAAOnB,KAAKD,aAAaqB,IAAI,QACnC,MAAyB,IAArBD,KAAKE,cAGFrB,KAAKoC,sBAAsBjB,KAAKE,cAAcgB,OAAMC,aACvD,GAAIA,WAAWC,SACX,OAAO,EAGX,GAAyB,WAArBpB,KAAKE,aAA2B,CAEhC,GAAsB,GADNrB,KAAKD,aAAaqB,IAAI,UAAWkB,WAAWE,QAAQlC,IACxDmC,OACR,OAAO,CAEf,CACA,OAAOtB,KAAKG,UAAUoB,SAASJ,WAAWE,QAAQlC,GAAG,GAE7D,CASAI,eAAAA,CAAgBJ,GAAIC,aAChB,MAAMY,KAAOnB,KAAKD,aAAaqB,IAAI,QACnC,OAAID,KAAKE,eAAiBd,aAGnBY,KAAKG,UAAUoB,SAASpC,GACnC,CASAY,oBAAAA,CAAqByB,IAAKpC,YAAaE,OACnC,IAAImC,SAAWrC,YACfqC,UAAanC,MAAS,SAAW,WACjCT,KAAKD,aAAakC,SAASW,SAAUD,IACzC,CAQAP,qBAAAA,CAAsB7B,aAClB,MAAMsC,SAA2B,MAAftC,YAAuBP,KAAKC,UAAUC,eAAiBF,KAAKC,UAAUE,oBAGxF,MAAO,IAFY2C,SAASC,iBAAkB,GAAE/C,KAAKC,UAAUG,WAAWyC,YAG9E,CASA/B,aAAAA,CAAcR,GAAIC,aACd,MAAM+B,WAAatC,KAAK+B,aAAazB,GAAIC,aACzC,SAAK+B,YAAcA,WAAWC,SAIlC,CASAR,YAAAA,CAAazB,GAAIC,aACb,IAAIsC,SAA2B,MAAftC,YAAuBP,KAAKC,UAAUC,eAAiBF,KAAKC,UAAUE,oBAEtF,OADA0C,UAAa,aAAYvC,OAClBwC,SAASE,cAAe,GAAEhD,KAAKC,UAAUG,WAAWyC,WAC/D,CASA5B,yBAAAA,CAA0BX,GAAIC,YAAaE,OACvC,MAAMU,KAAOnB,KAAKD,aAAaqB,IAAI,QACnC,IAAI6B,eAAiB9B,KAAKG,UAAU4B,IAAI,GACxC,GAAI/B,KAAKE,eAAiBd,aAAe0C,gBAAkB3C,GAEvD,YADAN,KAAKkB,qBAAqB,CAACZ,IAAKC,YAAaE,OAGjD,MAAMmB,YAAc,GACpB,IAAIuB,MAAQ,EACZnD,KAAKoC,sBAAsB7B,aAAa8B,OAAMC,cACtCA,WAAWC,WAGXD,WAAWE,QAAQlC,IAAMA,IAAMgC,WAAWE,QAAQlC,IAAM2C,gBACxDE,QAES,GAATA,QAGJvB,YAAYI,KAAKM,WAAWE,QAAQlC,IACpB,GAAT6C,UAEXnD,KAAKkB,qBAAqBU,YAAarB,YAAaE,MACxD,CAQAM,qBAAAA,CAAsBqC,KAAM3C,OAExB,GAA0B,YADbT,KAAKD,aAAaqB,IAAI,QAC1BC,aACL,OAEJ,MAAMgC,GAAKrD,KAAKD,aAAaqB,IAAI,KAAMgC,MACjCE,QAAUtD,KAAKD,aAAaqB,IAAI,UAAWiC,GAAGE,WAG9C3B,YAAc,GACpB0B,QAAQE,OAAO3B,SAAQ4B,cACfzD,KAAKc,cAAc2C,YAAa,OAChC7B,YAAYI,KAAKyB,YACrB,IAEJzD,KAAKkB,qBAAqBU,YAAa,KAAMnB,MACjD,CAQAO,uBAAAA,CAAwBT,YAAaE,OACjC,MAAMmB,YAAc,GACpB5B,KAAKoC,sBAAsB7B,aAAasB,SAAQS,aAC5C,IAAIA,WAAWC,SAAf,CAGA,GAAmB,WAAfhC,YAA0B,CAC1B,MAAM+C,QAAUtD,KAAKD,aAAaqB,IAAI,UAAWkB,WAAWE,QAAQlC,IACpE,GAAuB,IAAnBgD,mBAAO,EAAPA,QAASb,QACT,MAER,CACAb,YAAYI,KAAKM,WAAWE,QAAQlC,GAPpC,CAOuC,IAE3CN,KAAKkB,qBAAqBU,YAAarB,YAAaE,MACxD,CAQAiB,qBAAAA,CAAsBgC,YAClB,MAAMC,OAAS,GAKf,OAJAD,WAAW7B,SAAQ+B,YACf,MAAMN,QAAUtD,KAAKD,aAAaqB,IAAI,UAAWwC,WACjDD,OAAO3B,QAAQsB,QAAQE,OAAO,IAE3BG,MACX,CAQAhC,qBAAAA,CAAsBkC,OAClB,MAAMF,OAAS,IAAIG,IAQnB,OAPAD,MAAMhC,SAAQuB,OACV,MAAMC,GAAKrD,KAAKD,aAAaqB,IAAI,KAAMgC,MACf,GAApBC,GAAGU,eAGPJ,OAAOK,IAAIX,GAAGE,UAAU,IAErB,IAAII,OACf,EAiCFM,SAAAC,0BAtBuC,SAASnE,aAAcoE,OAAQC,MAAO7D,aAC3E,MAAMD,GAAK6D,OAAO3B,QAAQlC,GAC1B,IAAKA,GACD,OAIA6D,OAAO3B,QAAQ6B,gBACfD,MAAMC,iBAGVvB,SAASwB,eAAeC,kBAEH,IAAI1E,aAAaE,cACzBM,oBACTC,GACAC,YACA,CACIK,MAAOwD,MAAMI,SACb7D,IAAKyD,MAAMK,UAarBR,SAAAS,oBAHiC,SAAS3E,cACnB,IAAIF,aAAaE,cACzBc,0BAYfoD,SAAAU,cAH2B,SAAS5E,aAAcU,OAC3B,IAAIZ,aAAaE,cACzBmC,UAAUzB,QAYzBwD,SAAAW,qBAHkC,SAAS7E,cAEzC,OADqB,IAAIF,aAAaE,cAClBoC,mBACtB"}