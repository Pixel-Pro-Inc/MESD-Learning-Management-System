{"version":3,"file":"actions.min.js","sources":["../../../src/local/content/actions.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Course state actions dispatcher.\n *\n * This module captures all data-dispatch links in the course content and dispatch the proper\n * state mutation, including any confirmation and modal required.\n *\n * @module     core_courseformat/local/content/actions\n * @class      core_courseformat/local/content/actions\n * @copyright  2021 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {BaseComponent} from 'core/reactive';\nimport Modal from 'core/modal';\nimport ModalSaveCancel from 'core/modal_save_cancel';\nimport ModalDeleteCancel from 'core/modal_delete_cancel';\nimport ModalEvents from 'core/modal_events';\nimport Templates from 'core/templates';\nimport {prefetchStrings} from 'core/prefetch';\nimport {getString} from 'core/str';\nimport {getFirst} from 'core/normalise';\nimport {toggleBulkSelectionAction} from 'core_courseformat/local/content/actions/bulkselection';\nimport * as CourseEvents from 'core_course/events';\nimport Pending from 'core/pending';\nimport ContentTree from 'core_courseformat/local/courseeditor/contenttree';\n// The jQuery module is only used for interacting with Boostrap 4. It can we removed when MDL-71979 is integrated.\nimport jQuery from 'jquery';\n\n// Load global strings.\nprefetchStrings('core', ['movecoursesection', 'movecoursemodule', 'confirm', 'delete']);\n\n// Mutations are dispatched by the course content actions.\n// Formats can use this module addActions static method to add custom actions.\n// Direct mutations can be simple strings (mutation) name or functions.\nconst directMutations = {\n    sectionHide: 'sectionHide',\n    sectionShow: 'sectionShow',\n    cmHide: 'cmHide',\n    cmShow: 'cmShow',\n    cmStealth: 'cmStealth',\n    cmMoveRight: 'cmMoveRight',\n    cmMoveLeft: 'cmMoveLeft',\n    cmNoGroups: 'cmNoGroups',\n    cmSeparateGroups: 'cmSeparateGroups',\n    cmVisibleGroups: 'cmVisibleGroups',\n};\n\nexport default class extends BaseComponent {\n\n    /**\n     * Constructor hook.\n     */\n    create() {\n        // Optional component name for debugging.\n        this.name = 'content_actions';\n        // Default query selectors.\n        this.selectors = {\n            ACTIONLINK: `[data-action]`,\n            // Move modal selectors.\n            SECTIONLINK: `[data-for='section']`,\n            CMLINK: `[data-for='cm']`,\n            SECTIONNODE: `[data-for='sectionnode']`,\n            MODALTOGGLER: `[data-toggle='collapse']`,\n            ADDSECTION: `[data-action='addSection']`,\n            CONTENTTREE: `#destination-selector`,\n            ACTIONMENU: `.action-menu`,\n            ACTIONMENUTOGGLER: `[data-toggle=\"dropdown\"]`,\n            // Availability modal selectors.\n            OPTIONSRADIO: `[type='radio']`,\n        };\n        // Component css classes.\n        this.classes = {\n            DISABLED: `text-body`,\n            ITALIC: `font-italic`,\n        };\n    }\n\n    /**\n     * Add extra actions to the module.\n     *\n     * @param {array} actions array of methods to execute\n     */\n    static addActions(actions) {\n        for (const [action, mutationReference] of Object.entries(actions)) {\n            if (typeof mutationReference !== 'function' && typeof mutationReference !== 'string') {\n                throw new Error(`${action} action must be a mutation name or a function`);\n            }\n            directMutations[action] = mutationReference;\n        }\n    }\n\n    /**\n     * Initial state ready method.\n     *\n     * @param {Object} state the state data.\n     *\n     */\n    stateReady(state) {\n        // Delegate dispatch clicks.\n        this.addEventListener(\n            this.element,\n            'click',\n            this._dispatchClick\n        );\n        // Check section limit.\n        this._checkSectionlist({state});\n        // Add an Event listener to recalculate limits it if a section HTML is altered.\n        this.addEventListener(\n            this.element,\n            CourseEvents.sectionRefreshed,\n            () => this._checkSectionlist({state})\n        );\n    }\n\n    /**\n     * Return the component watchers.\n     *\n     * @returns {Array} of watchers\n     */\n    getWatchers() {\n        return [\n            // Check section limit.\n            {watch: `course.sectionlist:updated`, handler: this._checkSectionlist},\n        ];\n    }\n\n    _dispatchClick(event) {\n        const target = event.target.closest(this.selectors.ACTIONLINK);\n        if (!target) {\n            return;\n        }\n        if (target.classList.contains(this.classes.DISABLED)) {\n            event.preventDefault();\n            return;\n        }\n\n        // Invoke proper method.\n        const actionName = target.dataset.action;\n        const methodName = this._actionMethodName(actionName);\n\n        if (this[methodName] !== undefined) {\n            this[methodName](target, event);\n            return;\n        }\n\n        // Check direct mutations or mutations handlers.\n        if (directMutations[actionName] !== undefined) {\n            if (typeof directMutations[actionName] === 'function') {\n                directMutations[actionName](target, event);\n                return;\n            }\n            this._requestMutationAction(target, event, directMutations[actionName]);\n            return;\n        }\n    }\n\n    _actionMethodName(name) {\n        const requestName = name.charAt(0).toUpperCase() + name.slice(1);\n        return `_request${requestName}`;\n    }\n\n    /**\n     * Check the section list and disable some options if needed.\n     *\n     * @param {Object} detail the update details.\n     * @param {Object} detail.state the state object.\n     */\n    _checkSectionlist({state}) {\n        // Disable \"add section\" actions if the course max sections has been exceeded.\n        this._setAddSectionLocked(state.course.sectionlist.length > state.course.maxsections);\n    }\n\n    /**\n     * Return the ids represented by this element.\n     *\n     * Depending on the dataset attributes the action could represent a single id\n     * or a bulk actions with all the current selected ids.\n     *\n     * @param {HTMLElement} target\n     * @returns {Number[]} array of Ids\n     */\n    _getTargetIds(target) {\n        let ids = [];\n        if (target?.dataset?.id) {\n            ids.push(target.dataset.id);\n        }\n        const bulkType = target?.dataset?.bulk;\n        if (!bulkType) {\n            return ids;\n        }\n        const bulk = this.reactive.get('bulk');\n        if (bulk.enabled && bulk.selectedType === bulkType) {\n            ids = [...ids, ...bulk.selection];\n        }\n        return ids;\n    }\n\n    /**\n     * Handle a move section request.\n     *\n     * @param {Element} target the dispatch action element\n     * @param {Event} event the triggered event\n     */\n    async _requestMoveSection(target, event) {\n        // Check we have an id.\n        const sectionIds = this._getTargetIds(target);\n        if (sectionIds.length == 0) {\n            return;\n        }\n\n        event.preventDefault();\n\n        const pendingModalReady = new Pending(`courseformat/actions:prepareMoveSectionModal`);\n\n        // The section edit menu to refocus on end.\n        const editTools = this._getClosestActionMenuToogler(target);\n\n        // Collect section information from the state.\n        const exporter = this.reactive.getExporter();\n        const data = exporter.course(this.reactive.state);\n        let titleText = null;\n\n        // Add the target section id and title.\n        let sectionInfo = null;\n        if (sectionIds.length == 1) {\n            sectionInfo = this.reactive.get('section', sectionIds[0]);\n            data.sectionid = sectionInfo.id;\n            data.sectiontitle = sectionInfo.title;\n            data.information = await this.reactive.getFormatString('sectionmove_info', data.sectiontitle);\n            titleText = this.reactive.getFormatString('sectionmove_title');\n        } else {\n            data.information = await this.reactive.getFormatString('sectionsmove_info', sectionIds.length);\n            titleText = this.reactive.getFormatString('sectionsmove_title');\n        }\n\n\n        // Create the modal.\n        // Build the modal parameters from the event data.\n        const modal = await this._modalBodyRenderedPromise(Modal, {\n            title: titleText,\n            body: Templates.render('core_courseformat/local/content/movesection', data),\n        });\n\n        const modalBody = getFirst(modal.getBody());\n\n        // Disable current selected section ids.\n        sectionIds.forEach(sectionId => {\n            const currentElement = modalBody.querySelector(`${this.selectors.SECTIONLINK}[data-id='${sectionId}']`);\n            this._disableLink(currentElement);\n        });\n\n        // Setup keyboard navigation.\n        new ContentTree(\n            modalBody.querySelector(this.selectors.CONTENTTREE),\n            {\n                SECTION: this.selectors.SECTIONNODE,\n                TOGGLER: this.selectors.MODALTOGGLER,\n                COLLAPSE: this.selectors.MODALTOGGLER,\n            },\n            true\n        );\n\n        // Capture click.\n        modalBody.addEventListener('click', (event) => {\n            const target = event.target;\n            if (!target.matches('a') || target.dataset.for != 'section' || target.dataset.id === undefined) {\n                return;\n            }\n            if (target.getAttribute('aria-disabled')) {\n                return;\n            }\n            event.preventDefault();\n            this.reactive.dispatch('sectionMoveAfter', sectionIds, target.dataset.id);\n            this._destroyModal(modal, editTools);\n        });\n\n        pendingModalReady.resolve();\n    }\n\n    /**\n     * Handle a move cm request.\n     *\n     * @param {Element} target the dispatch action element\n     * @param {Event} event the triggered event\n     */\n    async _requestMoveCm(target, event) {\n        // Check we have an id.\n        const cmIds = this._getTargetIds(target);\n        if (cmIds.length == 0) {\n            return;\n        }\n\n        event.preventDefault();\n\n        const pendingModalReady = new Pending(`courseformat/actions:prepareMoveCmModal`);\n\n        // The section edit menu to refocus on end.\n        const editTools = this._getClosestActionMenuToogler(target);\n\n        // Collect information from the state.\n        const exporter = this.reactive.getExporter();\n        const data = exporter.course(this.reactive.state);\n\n        let titleText = null;\n        if (cmIds.length == 1) {\n            const cmInfo = this.reactive.get('cm', cmIds[0]);\n            data.cmid = cmInfo.id;\n            data.cmname = cmInfo.name;\n            data.information = await this.reactive.getFormatString('cmmove_info', data.cmname);\n            titleText = this.reactive.getFormatString('cmmove_title');\n        } else {\n            data.information = await this.reactive.getFormatString('cmsmove_info', cmIds.length);\n            titleText = this.reactive.getFormatString('cmsmove_title');\n        }\n\n        // Create the modal.\n        // Build the modal parameters from the event data.\n        const modal = await this._modalBodyRenderedPromise(Modal, {\n            title: titleText,\n            body: Templates.render('core_courseformat/local/content/movecm', data),\n        });\n\n        const modalBody = getFirst(modal.getBody());\n\n        // Disable current selected section ids.\n        cmIds.forEach(cmId => {\n            const currentElement = modalBody.querySelector(`${this.selectors.CMLINK}[data-id='${cmId}']`);\n            this._disableLink(currentElement);\n        });\n\n        // Setup keyboard navigation.\n        new ContentTree(\n            modalBody.querySelector(this.selectors.CONTENTTREE),\n            {\n                SECTION: this.selectors.SECTIONNODE,\n                TOGGLER: this.selectors.MODALTOGGLER,\n                COLLAPSE: this.selectors.MODALTOGGLER,\n                ENTER: this.selectors.SECTIONLINK,\n            }\n        );\n\n        // Open the cm section node if possible (Bootstrap 4 uses jQuery to interact with collapsibles).\n        // All jQuery in this code can be replaced when MDL-71979 is integrated.\n        cmIds.forEach(cmId => {\n            const currentElement = modalBody.querySelector(`${this.selectors.CMLINK}[data-id='${cmId}']`);\n            const sectionnode = currentElement.closest(this.selectors.SECTIONNODE);\n            const toggler = jQuery(sectionnode).find(this.selectors.MODALTOGGLER);\n            let collapsibleId = toggler.data('target') ?? toggler.attr('href');\n            if (collapsibleId) {\n                // We cannot be sure we have # in the id element name.\n                collapsibleId = collapsibleId.replace('#', '');\n                const expandNode = modalBody.querySelector(`#${collapsibleId}`);\n                jQuery(expandNode).collapse('show');\n            }\n        });\n\n        modalBody.addEventListener('click', (event) => {\n            const target = event.target;\n            if (!target.matches('a') || target.dataset.for === undefined || target.dataset.id === undefined) {\n                return;\n            }\n            if (target.getAttribute('aria-disabled')) {\n                return;\n            }\n            event.preventDefault();\n\n            let targetSectionId;\n            let targetCmId;\n            if (target.dataset.for == 'cm') {\n                const dropData = exporter.cmDraggableData(this.reactive.state, target.dataset.id);\n                targetSectionId = dropData.sectionid;\n                targetCmId = dropData.nextcmid;\n            } else {\n                const section = this.reactive.get('section', target.dataset.id);\n                targetSectionId = target.dataset.id;\n                targetCmId = section?.cmlist[0];\n            }\n            this.reactive.dispatch('cmMove', cmIds, targetSectionId, targetCmId);\n            this._destroyModal(modal, editTools);\n        });\n\n        pendingModalReady.resolve();\n    }\n\n    /**\n     * Handle a create section request.\n     *\n     * @param {Element} target the dispatch action element\n     * @param {Event} event the triggered event\n     */\n    async _requestAddSection(target, event) {\n        event.preventDefault();\n        this.reactive.dispatch('addSection', target.dataset.id ?? 0);\n    }\n\n    /**\n     * Handle a delete section request.\n     *\n     * @param {Element} target the dispatch action element\n     * @param {Event} event the triggered event\n     */\n    async _requestDeleteSection(target, event) {\n        const sectionIds = this._getTargetIds(target);\n        if (sectionIds.length == 0) {\n            return;\n        }\n\n        event.preventDefault();\n\n        // We don't need confirmation to delete empty sections.\n        let needsConfirmation = sectionIds.some(sectionId => {\n            const sectionInfo = this.reactive.get('section', sectionId);\n            const cmList = sectionInfo.cmlist ?? [];\n            return (cmList.length || sectionInfo.hassummary || sectionInfo.rawtitle);\n        });\n        if (!needsConfirmation) {\n            this.reactive.dispatch('sectionDelete', sectionIds);\n            return;\n        }\n\n        let bodyText = null;\n        let titleText = null;\n        if (sectionIds.length == 1) {\n            titleText = this.reactive.getFormatString('sectiondelete_title');\n            const sectionInfo = this.reactive.get('section', sectionIds[0]);\n            bodyText = this.reactive.getFormatString('sectiondelete_info', {name: sectionInfo.title});\n        } else {\n            titleText = this.reactive.getFormatString('sectionsdelete_title');\n            bodyText = this.reactive.getFormatString('sectionsdelete_info', {count: sectionIds.length});\n        }\n\n        const modal = await this._modalBodyRenderedPromise(ModalDeleteCancel, {\n            title: titleText,\n            body: bodyText,\n        });\n\n        modal.getRoot().on(\n            ModalEvents.delete,\n            e => {\n                // Stop the default save button behaviour which is to close the modal.\n                e.preventDefault();\n                modal.destroy();\n                this.reactive.dispatch('sectionDelete', sectionIds);\n            }\n        );\n    }\n\n    /**\n     * Handle a toggle cm selection.\n     *\n     * @param {Element} target the dispatch action element\n     * @param {Event} event the triggered event\n     */\n    async _requestToggleSelectionCm(target, event) {\n        toggleBulkSelectionAction(this.reactive, target, event, 'cm');\n    }\n\n    /**\n     * Handle a toggle section selection.\n     *\n     * @param {Element} target the dispatch action element\n     * @param {Event} event the triggered event\n     */\n    async _requestToggleSelectionSection(target, event) {\n        toggleBulkSelectionAction(this.reactive, target, event, 'section');\n    }\n\n    /**\n     * Basic mutation action helper.\n     *\n     * @param {Element} target the dispatch action element\n     * @param {Event} event the triggered event\n     * @param {string} mutationName the mutation name\n     */\n    async _requestMutationAction(target, event, mutationName) {\n        if (!target.dataset.id && target.dataset.for !== 'bulkaction') {\n            return;\n        }\n        event.preventDefault();\n        if (target.dataset.for === 'bulkaction') {\n            // If the mutation is a bulk action we use the current selection.\n            this.reactive.dispatch(mutationName, this.reactive.get('bulk').selection);\n        } else {\n            this.reactive.dispatch(mutationName, [target.dataset.id]);\n        }\n    }\n\n    /**\n     * Handle a course module duplicate request.\n     *\n     * @param {Element} target the dispatch action element\n     * @param {Event} event the triggered event\n     */\n    async _requestCmDuplicate(target, event) {\n        const cmIds = this._getTargetIds(target);\n        if (cmIds.length == 0) {\n            return;\n        }\n        const sectionId = target.dataset.sectionid ?? null;\n        event.preventDefault();\n        this.reactive.dispatch('cmDuplicate', cmIds, sectionId);\n    }\n\n    /**\n     * Handle a delete cm request.\n     *\n     * @param {Element} target the dispatch action element\n     * @param {Event} event the triggered event\n     */\n    async _requestCmDelete(target, event) {\n        const cmIds = this._getTargetIds(target);\n        if (cmIds.length == 0) {\n            return;\n        }\n\n        event.preventDefault();\n\n        let bodyText = null;\n        let titleText = null;\n        if (cmIds.length == 1) {\n            const cmInfo = this.reactive.get('cm', cmIds[0]);\n            titleText = getString('cmdelete_title', 'core_courseformat');\n            bodyText = getString(\n                'cmdelete_info',\n                'core_courseformat',\n                {\n                    type: cmInfo.modname,\n                    name: cmInfo.name,\n                }\n            );\n        } else {\n            titleText = getString('cmsdelete_title', 'core_courseformat');\n            bodyText = getString(\n                'cmsdelete_info',\n                'core_courseformat',\n                {count: cmIds.length}\n            );\n        }\n\n        const modal = await this._modalBodyRenderedPromise(ModalDeleteCancel, {\n            title: titleText,\n            body: bodyText,\n        });\n\n        modal.getRoot().on(\n            ModalEvents.delete,\n            e => {\n                // Stop the default save button behaviour which is to close the modal.\n                e.preventDefault();\n                modal.destroy();\n                this.reactive.dispatch('cmDelete', cmIds);\n            }\n        );\n    }\n\n    /**\n     * Handle a cm availability change request.\n     *\n     * @param {Element} target the dispatch action element\n     */\n    async _requestCmAvailability(target) {\n        const cmIds = this._getTargetIds(target);\n        if (cmIds.length == 0) {\n            return;\n        }\n        // Show the availability modal to decide which action to trigger.\n        const exporter = this.reactive.getExporter();\n        const data = {\n            allowstealth: exporter.canUseStealth(this.reactive.state, cmIds),\n        };\n        const modal = await this._modalBodyRenderedPromise(ModalSaveCancel, {\n            title: getString('availability', 'core'),\n            body: Templates.render('core_courseformat/local/content/cm/availabilitymodal', data),\n            saveButtonText: getString('apply', 'core'),\n        });\n\n        this._setupMutationRadioButtonModal(modal, cmIds);\n    }\n\n    /**\n     * Handle a section availability change request.\n     *\n     * @param {Element} target the dispatch action element\n     */\n    async _requestSectionAvailability(target) {\n        const sectionIds = this._getTargetIds(target);\n        if (sectionIds.length == 0) {\n            return;\n        }\n        const title = (sectionIds.length == 1) ? 'sectionavailability_title' : 'sectionsavailability_title';\n        // Show the availability modal to decide which action to trigger.\n        const modal = await this._modalBodyRenderedPromise(ModalSaveCancel, {\n            title: this.reactive.getFormatString(title),\n            body: Templates.render('core_courseformat/local/content/section/availabilitymodal', []),\n            saveButtonText: getString('apply', 'core'),\n        });\n\n        this._setupMutationRadioButtonModal(modal, sectionIds);\n    }\n\n    /**\n     * Add events to a mutation selector radio buttons modal.\n     * @param {Modal} modal\n     * @param {Number[]} ids the section or cm ids to apply the mutation\n     */\n    _setupMutationRadioButtonModal(modal, ids) {\n        // The save button is not enabled until the user selects an option.\n        modal.setButtonDisabled('save', true);\n\n        const submitFunction = (radio) => {\n            const mutation = radio?.value;\n            if (!mutation) {\n                return false;\n            }\n            this.reactive.dispatch(mutation, ids);\n            return true;\n        };\n\n        const modalBody = getFirst(modal.getBody());\n        const radioOptions = modalBody.querySelectorAll(this.selectors.OPTIONSRADIO);\n        radioOptions.forEach(radio => {\n            radio.addEventListener('change', () => {\n                modal.setButtonDisabled('save', false);\n            });\n            radio.parentNode.addEventListener('click', () => {\n                radio.checked = true;\n                modal.setButtonDisabled('save', false);\n            });\n            radio.parentNode.addEventListener('dblclick', dbClickEvent => {\n                if (submitFunction(radio)) {\n                    dbClickEvent.preventDefault();\n                    modal.destroy();\n                }\n            });\n        });\n\n        modal.getRoot().on(\n            ModalEvents.save,\n            () => {\n                const radio = modalBody.querySelector(`${this.selectors.OPTIONSRADIO}:checked`);\n                submitFunction(radio);\n            }\n        );\n    }\n\n    /**\n     * Disable all add sections actions.\n     *\n     * @param {boolean} locked the new locked value.\n     */\n    _setAddSectionLocked(locked) {\n        const targets = this.getElements(this.selectors.ADDSECTION);\n        targets.forEach(element => {\n            element.classList.toggle(this.classes.DISABLED, locked);\n            element.classList.toggle(this.classes.ITALIC, locked);\n            this.setElementLocked(element, locked);\n        });\n    }\n\n    /**\n     * Replace an element with a copy with a different tag name.\n     *\n     * @param {Element} element the original element\n     */\n    _disableLink(element) {\n        if (element) {\n            element.style.pointerEvents = 'none';\n            element.style.userSelect = 'none';\n            element.classList.add(this.classes.DISABLED);\n            element.classList.add(this.classes.ITALIC);\n            element.setAttribute('aria-disabled', true);\n            element.addEventListener('click', event => event.preventDefault());\n        }\n    }\n\n    /**\n     * Render a modal and return a body ready promise.\n     *\n     * @param {Modal} ModalClass the modal class\n     * @param {object} modalParams the modal params\n     * @return {Promise} the modal body ready promise\n     */\n    _modalBodyRenderedPromise(ModalClass, modalParams) {\n        return new Promise((resolve, reject) => {\n            ModalClass.create(modalParams).then((modal) => {\n                modal.setRemoveOnClose(true);\n                // Handle body loading event.\n                modal.getRoot().on(ModalEvents.bodyRendered, () => {\n                    resolve(modal);\n                });\n                // Configure some extra modal params.\n                if (modalParams.saveButtonText !== undefined) {\n                    modal.setSaveButtonText(modalParams.saveButtonText);\n                }\n                if (modalParams.deleteButtonText !== undefined) {\n                    modal.setDeleteButtonText(modalParams.saveButtonText);\n                }\n                modal.show();\n                return;\n            }).catch(() => {\n                reject(`Cannot load modal content`);\n            });\n        });\n    }\n\n    /**\n     * Hide and later destroy a modal.\n     *\n     * Behat will fail if we remove the modal while some boostrap collapse is executing.\n     *\n     * @param {Modal} modal\n     * @param {HTMLElement} element the dom element to focus on.\n     */\n    _destroyModal(modal, element) {\n        modal.hide();\n        const pendingDestroy = new Pending(`courseformat/actions:destroyModal`);\n        if (element) {\n            element.focus();\n        }\n        setTimeout(() =>{\n            modal.destroy();\n            pendingDestroy.resolve();\n        }, 500);\n    }\n\n    /**\n     * Get the closest actions menu toggler to an action element.\n     *\n     * @param {HTMLElement} element the action link element\n     * @returns {HTMLElement|undefined}\n     */\n    _getClosestActionMenuToogler(element) {\n        const actionMenu = element.closest(this.selectors.ACTIONMENU);\n        if (!actionMenu) {\n            return undefined;\n        }\n        return actionMenu.querySelector(this.selectors.ACTIONMENUTOGGLER);\n    }\n}\n"],"names":["_getRequireWildcardCache","e","WeakMap","r","t","_interopRequireDefault","obj","__esModule","default","_modal","_modal_save_cancel","_modal_delete_cancel","_modal_events","_templates","CourseEvents","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","_interopRequireWildcard","_pending","_contenttree","_jquery","prefetchStrings","directMutations","sectionHide","sectionShow","cmHide","cmShow","cmStealth","cmMoveRight","cmMoveLeft","cmNoGroups","cmSeparateGroups","cmVisibleGroups","_default","BaseComponent","create","this","name","selectors","ACTIONLINK","SECTIONLINK","CMLINK","SECTIONNODE","MODALTOGGLER","ADDSECTION","CONTENTTREE","ACTIONMENU","ACTIONMENUTOGGLER","OPTIONSRADIO","classes","DISABLED","ITALIC","addActions","actions","action","mutationReference","entries","Error","stateReady","state","addEventListener","element","_dispatchClick","_checkSectionlist","sectionRefreshed","getWatchers","watch","handler","event","target","closest","classList","contains","preventDefault","actionName","dataset","methodName","_actionMethodName","undefined","_requestMutationAction","charAt","toUpperCase","slice","_ref","_setAddSectionLocked","course","sectionlist","length","maxsections","_getTargetIds","_target$dataset","_target$dataset2","ids","id","push","bulkType","bulk","reactive","enabled","selectedType","selection","_requestMoveSection","sectionIds","pendingModalReady","Pending","editTools","_getClosestActionMenuToogler","data","getExporter","titleText","sectionInfo","sectionid","sectiontitle","title","information","getFormatString","modal","_modalBodyRenderedPromise","Modal","body","Templates","render","modalBody","getFirst","getBody","forEach","sectionId","currentElement","querySelector","_disableLink","ContentTree","SECTION","TOGGLER","COLLAPSE","matches","for","getAttribute","dispatch","_destroyModal","resolve","_requestMoveCm","cmIds","exporter","cmInfo","cmid","cmname","cmId","ENTER","sectionnode","toggler","jQuery","find","collapsibleId","attr","replace","expandNode","collapse","targetSectionId","targetCmId","dropData","cmDraggableData","nextcmid","section","cmlist","_requestAddSection","_requestDeleteSection","some","hassummary","rawtitle","bodyText","count","ModalDeleteCancel","getRoot","on","ModalEvents","delete","destroy","_requestToggleSelectionCm","toggleBulkSelectionAction","_requestToggleSelectionSection","mutationName","_requestCmDuplicate","_requestCmDelete","getString","type","modname","_requestCmAvailability","allowstealth","canUseStealth","ModalSaveCancel","saveButtonText","_setupMutationRadioButtonModal","_requestSectionAvailability","setButtonDisabled","submitFunction","radio","mutation","value","querySelectorAll","parentNode","checked","dbClickEvent","save","locked","getElements","toggle","setElementLocked","style","pointerEvents","userSelect","add","setAttribute","ModalClass","modalParams","Promise","reject","then","setRemoveOnClose","bodyRendered","setSaveButtonText","deleteButtonText","setDeleteButtonText","show","catch","hide","pendingDestroy","focus","setTimeout","actionMenu","_exports"],"mappings":"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"}