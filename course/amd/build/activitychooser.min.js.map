{"version":3,"file":"activitychooser.min.js","sources":["../src/activitychooser.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * A type of dialogue used as for choosing modules in a course.\n *\n * @module     core_course/activitychooser\n * @copyright  2020 Mathew May <mathew.solutions>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport * as ChooserDialogue from 'core_course/local/activitychooser/dialogue';\nimport * as Repository from 'core_course/local/activitychooser/repository';\nimport selectors from 'core_course/local/activitychooser/selectors';\nimport CustomEvents from 'core/custom_interaction_events';\nimport * as Templates from 'core/templates';\nimport {getString} from 'core/str';\nimport Modal from 'core/modal';\nimport Pending from 'core/pending';\n\n// Set up some JS module wide constants that can be added to in the future.\n\n// Tab config options.\nconst ALLACTIVITIESRESOURCES = 0;\nconst ACTIVITIESRESOURCES = 2;\nconst ALLACTIVITIESRESOURCESREC = 3;\nconst ONLYALLREC = 4;\nconst ACTIVITIESRESOURCESREC = 5;\n\n\n// Module types.\nconst ACTIVITY = 0;\nconst RESOURCE = 1;\n\nlet initialized = false;\n\n/**\n * Set up the activity chooser.\n *\n * @method init\n * @param {Number} courseId Course ID to use later on in fetchModules()\n * @param {Object} chooserConfig Any PHP config settings that we may need to reference\n */\nexport const init = (courseId, chooserConfig) => {\n    const pendingPromise = new Pending();\n\n    registerListenerEvents(courseId, chooserConfig);\n\n    pendingPromise.resolve();\n};\n\n/**\n * Once a selection has been made make the modal & module information and pass it along\n *\n * @method registerListenerEvents\n * @param {Number} courseId\n * @param {Object} chooserConfig Any PHP config settings that we may need to reference\n */\nconst registerListenerEvents = (courseId, chooserConfig) => {\n\n    // Ensure we only add our listeners once.\n    if (initialized) {\n        return;\n    }\n\n    const events = [\n        'click',\n        CustomEvents.events.activate,\n        CustomEvents.events.keyboardActivate\n    ];\n\n    const fetchModuleData = (() => {\n        let innerPromise = null;\n\n        return () => {\n            if (!innerPromise) {\n                innerPromise = new Promise((resolve) => {\n                    resolve(Repository.activityModules(courseId));\n                });\n            }\n\n            return innerPromise;\n        };\n    })();\n\n    const fetchFooterData = (() => {\n        let footerInnerPromise = null;\n\n        return (sectionId) => {\n            if (!footerInnerPromise) {\n                footerInnerPromise = new Promise((resolve) => {\n                    resolve(Repository.fetchFooterData(courseId, sectionId));\n                });\n            }\n\n            return footerInnerPromise;\n        };\n    })();\n\n    CustomEvents.define(document, events);\n\n    // Display module chooser event listeners.\n    events.forEach((event) => {\n        document.addEventListener(event, async(e) => {\n            if (e.target.closest(selectors.elements.sectionmodchooser)) {\n                let caller;\n                // We need to know who called this.\n                // Standard courses use the ID in the main section info.\n                const sectionDiv = e.target.closest(selectors.elements.section);\n                // Front page courses need some special handling.\n                const button = e.target.closest(selectors.elements.sectionmodchooser);\n\n                // If we don't have a section ID use the fallback ID.\n                // We always want the sectionDiv caller first as it keeps track of section ID's after DnD changes.\n                // The button attribute is always just a fallback for us as the section div is not always available.\n                // A YUI change could be done maybe to only update the button attribute but we are going for minimal change here.\n                if (sectionDiv !== null && sectionDiv.hasAttribute('data-sectionid')) {\n                    // We check for attributes just in case of outdated contrib course formats.\n                    caller = sectionDiv;\n                } else {\n                    caller = button;\n                }\n\n                // We want to show the modal instantly but loading whilst waiting for our data.\n                let bodyPromiseResolver;\n                const bodyPromise = new Promise(resolve => {\n                    bodyPromiseResolver = resolve;\n                });\n\n                const footerData = await fetchFooterData(caller.dataset.sectionid);\n                const sectionModal = buildModal(bodyPromise, footerData);\n\n                // Now we have a modal we should start fetching data.\n                // If an error occurs while fetching the data, display the error within the modal.\n                const data = await fetchModuleData().catch(async(e) => {\n                    const errorTemplateData = {\n                        'errormessage': e.message\n                    };\n                    bodyPromiseResolver(await Templates.render('core_course/local/activitychooser/error', errorTemplateData));\n                });\n\n                // Early return if there is no module data.\n                if (!data) {\n                    return;\n                }\n\n                // Apply the section id to all the module instance links.\n                const builtModuleData = sectionIdMapper(\n                    data,\n                    caller.dataset.sectionid,\n                    caller.dataset.sectionreturnid,\n                    caller.dataset.beforemod\n                );\n\n                ChooserDialogue.displayChooser(\n                    sectionModal,\n                    builtModuleData,\n                    partiallyAppliedFavouriteManager(data, caller.dataset.sectionid),\n                    footerData,\n                );\n\n                bodyPromiseResolver(await Templates.render(\n                    'core_course/activitychooser',\n                    templateDataBuilder(builtModuleData, chooserConfig)\n                ));\n            }\n        });\n    });\n\n    initialized = true;\n};\n\n/**\n * Given the web service data and an ID we want to make a deep copy\n * of the WS data then add on the section ID to the addoption URL\n *\n * @method sectionIdMapper\n * @param {Object} webServiceData Our original data from the Web service call\n * @param {Number} id The ID of the section we need to append to the links\n * @param {Number|null} sectionreturnid The ID of the section return we need to append to the links\n * @param {Number|null} beforemod The ID of the cm we need to append to the links\n * @return {Array} [modules] with URL's built\n */\nconst sectionIdMapper = (webServiceData, id, sectionreturnid, beforemod) => {\n    // We need to take a fresh deep copy of the original data as an object is a reference type.\n    const newData = JSON.parse(JSON.stringify(webServiceData));\n    newData.content_items.forEach((module) => {\n        module.link += '&section=' + id + '&sr=' + (sectionreturnid ?? 0) + '&beforemod=' + (beforemod ?? 0);\n    });\n    return newData.content_items;\n};\n\n/**\n * Given an array of modules we want to figure out where & how to place them into our template object\n *\n * @method templateDataBuilder\n * @param {Array} data our modules to manipulate into a Templatable object\n * @param {Object} chooserConfig Any PHP config settings that we may need to reference\n * @return {Object} Our built object ready to render out\n */\nconst templateDataBuilder = (data, chooserConfig) => {\n    // Setup of various bits and pieces we need to mutate before throwing it to the wolves.\n    let activities = [];\n    let resources = [];\n    let showAll = true;\n    let showActivities = false;\n    let showResources = false;\n\n    // Tab mode can be the following [All, Resources & Activities, All & Activities & Resources].\n    const tabMode = parseInt(chooserConfig.tabmode);\n\n    // Filter the incoming data to find favourite & recommended modules.\n    const favourites = data.filter(mod => mod.favourite === true);\n    const recommended = data.filter(mod => mod.recommended === true);\n\n    // Whether the activities and resources tabs should be displayed or not.\n    const showActivitiesAndResources = (tabMode) => {\n        const acceptableModes = [\n            ALLACTIVITIESRESOURCES,\n            ALLACTIVITIESRESOURCESREC,\n            ACTIVITIESRESOURCES,\n            ACTIVITIESRESOURCESREC,\n        ];\n\n        return acceptableModes.indexOf(tabMode) !== -1;\n    };\n\n    // These modes need Activity & Resource tabs.\n    if (showActivitiesAndResources(tabMode)) {\n        // Filter the incoming data to find activities then resources.\n        activities = data.filter(mod => mod.archetype === ACTIVITY);\n        resources = data.filter(mod => mod.archetype === RESOURCE);\n        showActivities = true;\n        showResources = true;\n\n        // We want all of the previous information but no 'All' tab.\n        if (tabMode === ACTIVITIESRESOURCES || tabMode === ACTIVITIESRESOURCESREC) {\n            showAll = false;\n        }\n    }\n\n    const recommendedBeforeTabs = [\n        ALLACTIVITIESRESOURCESREC,\n        ONLYALLREC,\n        ACTIVITIESRESOURCESREC,\n    ];\n    // Whether the recommended tab should be displayed before the All/Activities/Resources tabs.\n    const recommendedBeginning = recommendedBeforeTabs.indexOf(tabMode) !== -1;\n\n    // Given the results of the above filters lets figure out what tab to set active.\n    // We have some favourites.\n    const favouritesFirst = !!favourites.length;\n    const recommendedFirst = favouritesFirst === false && recommendedBeginning === true && !!recommended.length;\n    // We are in tabMode 2 without any favourites.\n    const activitiesFirst = showAll === false && favouritesFirst === false && recommendedFirst === false;\n    // We have nothing fallback to show all modules.\n    const fallback = showAll === true && favouritesFirst === false && recommendedFirst === false;\n\n    return {\n        'default': data,\n        showAll: showAll,\n        activities: activities,\n        showActivities: showActivities,\n        activitiesFirst: activitiesFirst,\n        resources: resources,\n        showResources: showResources,\n        favourites: favourites,\n        recommended: recommended,\n        recommendedFirst: recommendedFirst,\n        recommendedBeginning: recommendedBeginning,\n        favouritesFirst: favouritesFirst,\n        fallback: fallback,\n    };\n};\n\n/**\n * Given an object we want to build a modal ready to show\n *\n * @method buildModal\n * @param {Promise} body\n * @param {String|Boolean} footer Either a footer to add or nothing\n * @return {Object} The modal ready to display immediately and render body in later.\n */\nconst buildModal = (body, footer) => Modal.create({\n    body,\n    title: getString('addresourceoractivity'),\n    footer: footer.customfootertemplate,\n    large: true,\n    scrollable: false,\n    templateContext: {\n        classes: 'modchooser'\n    },\n    show: true,\n});\n\n/**\n * A small helper function to handle the case where there are no more favourites\n * and we need to mess a bit with the available tabs in the chooser\n *\n * @method nullFavouriteDomManager\n * @param {HTMLElement} favouriteTabNav Dom node of the favourite tab nav\n * @param {HTMLElement} modalBody Our current modals' body\n */\nconst nullFavouriteDomManager = (favouriteTabNav, modalBody) => {\n    favouriteTabNav.tabIndex = -1;\n    favouriteTabNav.classList.add('d-none');\n    // Need to set active to an available tab.\n    if (favouriteTabNav.classList.contains('active')) {\n        favouriteTabNav.classList.remove('active');\n        favouriteTabNav.setAttribute('aria-selected', 'false');\n        const favouriteTab = modalBody.querySelector(selectors.regions.favouriteTab);\n        favouriteTab.classList.remove('active');\n        const defaultTabNav = modalBody.querySelector(selectors.regions.defaultTabNav);\n        const activitiesTabNav = modalBody.querySelector(selectors.regions.activityTabNav);\n        if (defaultTabNav.classList.contains('d-none') === false) {\n            defaultTabNav.classList.add('active');\n            defaultTabNav.setAttribute('aria-selected', 'true');\n            defaultTabNav.tabIndex = 0;\n            defaultTabNav.focus();\n            const defaultTab = modalBody.querySelector(selectors.regions.defaultTab);\n            defaultTab.classList.add('active');\n        } else {\n            activitiesTabNav.classList.add('active');\n            activitiesTabNav.setAttribute('aria-selected', 'true');\n            activitiesTabNav.tabIndex = 0;\n            activitiesTabNav.focus();\n            const activitiesTab = modalBody.querySelector(selectors.regions.activityTab);\n            activitiesTab.classList.add('active');\n        }\n\n    }\n};\n\n/**\n * Export a curried function where the builtModules has been applied.\n * We have our array of modules so we can rerender the favourites area and have all of the items sorted.\n *\n * @method partiallyAppliedFavouriteManager\n * @param {Array} moduleData This is our raw WS data that we need to manipulate\n * @param {Number} sectionId We need this to add the sectionID to the URL's in the faves area after rerender\n * @return {Function} partially applied function so we can manipulate DOM nodes easily & update our internal array\n */\nconst partiallyAppliedFavouriteManager = (moduleData, sectionId) => {\n    /**\n     * Curried function that is being returned.\n     *\n     * @param {String} internal Internal name of the module to manage\n     * @param {Boolean} favourite Is the caller adding a favourite or removing one?\n     * @param {HTMLElement} modalBody What we need to update whilst we are here\n     */\n    return async(internal, favourite, modalBody) => {\n        const favouriteArea = modalBody.querySelector(selectors.render.favourites);\n\n        // eslint-disable-next-line max-len\n        const favouriteButtons = modalBody.querySelectorAll(`[data-internal=\"${internal}\"] ${selectors.actions.optionActions.manageFavourite}`);\n        const favouriteTabNav = modalBody.querySelector(selectors.regions.favouriteTabNav);\n        const result = moduleData.content_items.find(({name}) => name === internal);\n        const newFaves = {};\n        if (result) {\n            if (favourite) {\n                result.favourite = true;\n\n                // eslint-disable-next-line camelcase\n                newFaves.content_items = moduleData.content_items.filter(mod => mod.favourite === true);\n\n                const builtFaves = sectionIdMapper(newFaves, sectionId);\n\n                const {html, js} = await Templates.renderForPromise('core_course/local/activitychooser/favourites',\n                    {favourites: builtFaves});\n\n                await Templates.replaceNodeContents(favouriteArea, html, js);\n\n                Array.from(favouriteButtons).forEach((element) => {\n                    element.classList.remove('text-muted');\n                    element.classList.add('text-primary');\n                    element.dataset.favourited = 'true';\n                    element.setAttribute('aria-pressed', true);\n                    element.firstElementChild.classList.remove('fa-star-o');\n                    element.firstElementChild.classList.add('fa-star');\n                });\n\n                favouriteTabNav.classList.remove('d-none');\n            } else {\n                result.favourite = false;\n\n                const nodeToRemove = favouriteArea.querySelector(`[data-internal=\"${internal}\"]`);\n\n                nodeToRemove.parentNode.removeChild(nodeToRemove);\n\n                Array.from(favouriteButtons).forEach((element) => {\n                    element.classList.add('text-muted');\n                    element.classList.remove('text-primary');\n                    element.dataset.favourited = 'false';\n                    element.setAttribute('aria-pressed', false);\n                    element.firstElementChild.classList.remove('fa-star');\n                    element.firstElementChild.classList.add('fa-star-o');\n                });\n                const newFaves = moduleData.content_items.filter(mod => mod.favourite === true);\n\n                if (newFaves.length === 0) {\n                    nullFavouriteDomManager(favouriteTabNav, modalBody);\n                }\n            }\n        }\n    };\n};\n"],"names":["_interopRequireDefault","obj","__esModule","default","_getRequireWildcardCache","e","WeakMap","r","t","_interopRequireWildcard","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","ChooserDialogue","Repository","_selectors","_custom_interaction_events","Templates","_modal","_pending","initialized","_exports","init","courseId","chooserConfig","pendingPromise","Pending","registerListenerEvents","resolve","events","CustomEvents","activate","keyboardActivate","fetchModuleData","innerPromise","Promise","activityModules","fetchFooterData","footerInnerPromise","sectionId","define","document","forEach","event","addEventListener","async","target","closest","selectors","elements","sectionmodchooser","caller","sectionDiv","section","button","bodyPromiseResolver","hasAttribute","bodyPromise","footerData","dataset","sectionid","sectionModal","buildModal","data","catch","errorTemplateData","errormessage","message","render","builtModuleData","sectionIdMapper","sectionreturnid","beforemod","displayChooser","partiallyAppliedFavouriteManager","templateDataBuilder","webServiceData","id","newData","JSON","parse","stringify","content_items","module","link","activities","resources","showAll","showActivities","showResources","tabMode","parseInt","tabmode","favourites","filter","mod","favourite","recommended","indexOf","showActivitiesAndResources","archetype","recommendedBeginning","favouritesFirst","length","recommendedFirst","activitiesFirst","fallback","body","footer","Modal","create","title","getString","customfootertemplate","large","scrollable","templateContext","classes","show","moduleData","internal","modalBody","favouriteArea","querySelector","favouriteButtons","querySelectorAll","actions","optionActions","manageFavourite","favouriteTabNav","regions","result","find","_ref","name","newFaves","builtFaves","html","js","renderForPromise","replaceNodeContents","Array","from","element","classList","remove","add","favourited","setAttribute","firstElementChild","nodeToRemove","parentNode","removeChild","nullFavouriteDomManager","tabIndex","contains","favouriteTab","defaultTabNav","activitiesTabNav","activityTabNav","focus","defaultTab","activityTab"],"mappings":"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"}