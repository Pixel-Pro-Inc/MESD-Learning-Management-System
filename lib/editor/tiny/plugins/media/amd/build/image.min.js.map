{"version":3,"file":"image.min.js","sources":["../src/image.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny Media plugin Image class for Moodle.\n *\n * @module      tiny_media/image\n * @copyright   2022 Huong Nguyen <huongnv13@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Templates from 'core/templates';\nimport {getString, getStrings} from 'core/str';\nimport Pending from 'core/pending';\nimport {displayFilepicker} from 'editor_tiny/utils';\nimport Selectors from './selectors';\nimport ImageModal from './imagemodal';\nimport {getImagePermissions} from './options';\nimport {component} from \"./common\";\nimport {getFilePicker} from 'editor_tiny/options';\n\nexport default class MediaImage {\n    DEFAULTS = {\n        WIDTH: 160,\n        HEIGHT: 160,\n    };\n\n    form = null;\n    rawImageDimensions = null;\n    canShowFilePicker = false;\n    editor = null;\n    currentModal = null;\n    selectedImage = null;\n    imageAlignment = null;\n\n    constructor(editor) {\n        const permissions = getImagePermissions(editor);\n\n        // Indicates whether the file picker can be shown.\n        this.canShowFilePicker = permissions.filepicker && (typeof getFilePicker(editor, 'image') !== 'undefined');\n\n        this.editor = editor;\n    }\n\n    async displayDialogue() {\n        // Reset the image dimensions.\n        this.rawImageDimensions = null;\n\n        const currentImageData = await this.getCurrentImageData();\n        this.currentModal = await ImageModal.create({\n            title: getString('imageproperties', 'tiny_media'),\n            templateContext: await this.getTemplateContext(currentImageData),\n        });\n\n        if (currentImageData && currentImageData.src) {\n            this.loadPreviewImage(currentImageData.src);\n        }\n\n        await this.registerEventListeners();\n    }\n\n    async getAlignmentTitles() {\n        if (!this.alignmentTitles) {\n            const [top, middle, bottom] = await getStrings([\n                'alignment_top',\n                'alignment_middle',\n                'alignment_bottom',\n            ].map((key) => ({key, component})));\n\n            this.alignmentTitles = {\n                top,\n                middle,\n                bottom,\n            };\n        }\n\n        return this.alignmentTitles;\n    }\n\n    async getImageAlignment(selected = '') {\n        const titles = await this.getAlignmentTitles();\n        const alignments = [\n            {\n                text: titles.top,\n                value: 'align-top',\n            },\n            {\n                text: titles.middle,\n                value: 'align-middle',\n            },\n            {\n                text: titles.bottom,\n                value: 'align-bottom',\n            },\n        ];\n\n        if (selected) {\n            alignments.forEach((alignment, index, array) => {\n                if (alignment.value === selected) {\n                    array[index].selected = true;\n                }\n            });\n        }\n\n        return alignments;\n    }\n\n    async getTemplateContext(data) {\n        return {\n            elementid: this.editor.id,\n            showfilepicker: this.canShowFilePicker,\n            alignoptions: await this.getImageAlignment(),\n            ...data,\n        };\n    }\n\n    async getCurrentImageData() {\n        const selectedImageProperties = this.getSelectedImageProperties();\n        if (!selectedImageProperties) {\n            return {};\n        }\n\n        const properties = {...selectedImageProperties};\n        if (properties.align) {\n            properties.alignoptions = await this.getImageAlignment(properties.align);\n        }\n\n        if (properties.src) {\n            properties.haspreview = true;\n        }\n\n        if (!properties.alt) {\n            properties.presentation = true;\n        }\n\n        return properties;\n    }\n\n    filePickerCallback(params, self) {\n        if (params.url) {\n            const input = self.form.querySelector(Selectors.IMAGE.elements.url);\n            input.value = params.url;\n\n            // Auto set the width and height.\n            self.form.querySelector(Selectors.IMAGE.elements.width).value = '';\n            self.form.querySelector(Selectors.IMAGE.elements.height).value = '';\n\n            // Load the preview image.\n            self.loadPreviewImage(params.url);\n        }\n    }\n\n    storeImageDimensions(image) {\n        // Store dimensions of the raw image, falling back to defaults for images without dimensions (e.g. SVG).\n        this.rawImageDimensions = {\n            width: image.width || this.DEFAULTS.WIDTH,\n            height: image.height || this.DEFAULTS.HEIGHT,\n        };\n\n        const getCurrentWidth = (element) => {\n            if (element.value === '') {\n                element.value = this.rawImageDimensions.width;\n            }\n            return element.value;\n        };\n        const getCurrentHeight = (element) => {\n            if (element.value === '') {\n                element.value = this.rawImageDimensions.height;\n            }\n            return element.value;\n        };\n\n        const widthInput = this.form.querySelector(Selectors.IMAGE.elements.width);\n        const currentWidth = getCurrentWidth(widthInput);\n\n        const heightInput = this.form.querySelector(Selectors.IMAGE.elements.height);\n        const currentHeight = getCurrentHeight(heightInput);\n\n        const preview = this.form.querySelector(Selectors.IMAGE.elements.preview);\n        preview.setAttribute('src', image.src);\n        preview.style.display = 'inline';\n\n        const constrain = this.form.querySelector(Selectors.IMAGE.elements.constrain);\n        if (this.isPercentageValue(currentWidth) && this.isPercentageValue(currentHeight)) {\n            constrain.checked = currentWidth === currentHeight;\n        } else if (image.width === 0 || image.height === 0) {\n            // If we don't have both dimensions of the image, we can't auto-size it, so disable control.\n            constrain.disabled = 'disabled';\n        } else {\n            // This is the same as comparing to 3 decimal places.\n            const widthRatio = Math.round(1000 * parseInt(currentWidth, 10) / image.width);\n            const heightRatio = Math.round(1000 * parseInt(currentHeight, 10) / image.height);\n            constrain.checked = widthRatio === heightRatio;\n        }\n    }\n\n    loadPreviewImage(url) {\n        const image = new Image();\n\n        image.addEventListener('error', () => {\n            const preview = this.form.querySelector(Selectors.IMAGE.elements.preview);\n            preview.style.display = 'none';\n        });\n        image.addEventListener('load', () => {\n            this.storeImageDimensions(image);\n            this.autoAdjustSize();\n        });\n\n        image.src = url;\n    }\n\n    urlChanged() {\n        const input = this.form.querySelector(Selectors.IMAGE.elements.url);\n\n        if (input.value) {\n            // Load the preview image.\n            this.loadPreviewImage(input.value);\n        }\n    }\n\n    hasErrorUrlField() {\n        const url = this.form.querySelector(Selectors.IMAGE.elements.url).value;\n        const urlError = url === '';\n        this.toggleVisibility(Selectors.IMAGE.elements.urlWarning, urlError);\n        this.toggleAriaInvalid([Selectors.IMAGE.elements.url], urlError);\n\n        return urlError;\n    }\n\n    hasErrorAltField() {\n        const alt = this.form.querySelector(Selectors.IMAGE.elements.alt).value;\n        const presentation = this.form.querySelector(Selectors.IMAGE.elements.presentation).checked;\n        const imageAltError = alt === '' && !presentation;\n        this.toggleVisibility(Selectors.IMAGE.elements.altWarning, imageAltError);\n        this.toggleAriaInvalid([Selectors.IMAGE.elements.alt, Selectors.IMAGE.elements.presentation], imageAltError);\n\n        return imageAltError;\n    }\n\n    toggleVisibility(selector, predicate) {\n        const elements = this.form.querySelectorAll(selector);\n        elements.forEach((element) => {\n            element.style.display = predicate ? 'block' : 'none';\n        });\n    }\n\n    toggleAriaInvalid(selectors, predicate) {\n        selectors.forEach((selector) => {\n            const elements = this.form.querySelectorAll(selector);\n            elements.forEach((element) => element.setAttribute('aria-invalid', predicate));\n        });\n    }\n\n    getAlignmentClass(alignment) {\n        return alignment;\n    }\n\n    updateWarning() {\n        const urlError = this.hasErrorUrlField();\n        const imageAltError = this.hasErrorAltField();\n\n        return urlError || imageAltError;\n    }\n\n    getImageContext() {\n        // Check if there are any accessibility issues.\n        if (this.updateWarning()) {\n            return null;\n        }\n\n        const classList = [];\n\n        const constrain = this.form.querySelector(Selectors.IMAGE.elements.constrain).value;\n        if (constrain) {\n            classList.push(Selectors.IMAGE.styles.responsive);\n        }\n\n        // Add the alignment class for the image.\n        const alignment = this.getAlignmentClass(this.form.querySelector(Selectors.IMAGE.elements.alignment).value);\n        classList.push(alignment);\n\n        return {\n            url: this.form.querySelector(Selectors.IMAGE.elements.url).value,\n            alt: this.form.querySelector(Selectors.IMAGE.elements.alt).value,\n            width: this.form.querySelector(Selectors.IMAGE.elements.width).value,\n            height: this.form.querySelector(Selectors.IMAGE.elements.height).value,\n            presentation: this.form.querySelector(Selectors.IMAGE.elements.presentation).checked,\n            customStyle: this.form.querySelector(Selectors.IMAGE.elements.customStyle).value,\n            classlist: classList.join(' '),\n        };\n    }\n\n    setImage() {\n        const pendingPromise = new Pending('tiny_media:setImage');\n        const url = this.form.querySelector(Selectors.IMAGE.elements.url).value;\n        if (url === '') {\n            return;\n        }\n\n        // Check if there are any accessibility issues.\n        if (this.updateWarning()) {\n            pendingPromise.resolve();\n            return;\n        }\n\n        // Check for invalid width or height.\n        const width = this.form.querySelector(Selectors.IMAGE.elements.width).value;\n        if (!this.isPercentageValue(width) && isNaN(parseInt(width, 10))) {\n            this.form.querySelector(Selectors.IMAGE.elements.width).focus();\n            pendingPromise.resolve();\n            return;\n        }\n\n        const height = this.form.querySelector(Selectors.IMAGE.elements.height).value;\n        if (!this.isPercentageValue(height) && isNaN(parseInt(height, 10))) {\n            this.form.querySelector(Selectors.IMAGE.elements.height).focus();\n            pendingPromise.resolve();\n            return;\n        }\n\n        Templates.render('tiny_media/image', this.getImageContext())\n        .then((html) => {\n            this.editor.insertContent(html);\n            this.currentModal.destroy();\n            pendingPromise.resolve();\n\n            return html;\n        })\n        .catch();\n    }\n\n    handleKeyupCharacterCount() {\n        const alt = this.form.querySelector(Selectors.IMAGE.elements.alt).value;\n        const current = this.form.querySelector('#currentcount');\n        current.innerHTML = alt.length;\n    }\n\n    autoAdjustSize(forceHeight = false) {\n        // If we do not know the image size, do not do anything.\n        if (!this.rawImageDimensions) {\n            return;\n        }\n\n        const widthField = this.form.querySelector(Selectors.IMAGE.elements.width);\n        const heightField = this.form.querySelector(Selectors.IMAGE.elements.height);\n        const normalizeFieldData = (fieldData) => {\n            fieldData.isPercentageValue = !!this.isPercentageValue(fieldData.field.value);\n            if (fieldData.isPercentageValue) {\n                fieldData.percentValue = parseInt(fieldData.field.value, 10);\n                fieldData.pixelSize = this.rawImageDimensions[fieldData.type] / 100 * fieldData.percentValue;\n            } else {\n                fieldData.pixelSize = parseInt(fieldData.field.value, 10);\n                fieldData.percentValue = fieldData.pixelSize / this.rawImageDimensions[fieldData.type] * 100;\n            }\n\n            return fieldData;\n        };\n\n        const getKeyField = () => {\n            const getValue = () => {\n                if (forceHeight) {\n                    return {\n                        field: heightField,\n                        type: 'height',\n                    };\n                } else {\n                    return {\n                        field: widthField,\n                        type: 'width',\n                    };\n                }\n            };\n\n            const currentValue = getValue();\n            if (currentValue.field.value === '') {\n                currentValue.field.value = this.rawImageDimensions[currentValue.type];\n            }\n\n            return normalizeFieldData(currentValue);\n        };\n\n        const getRelativeField = () => {\n            if (forceHeight) {\n                return normalizeFieldData({\n                    field: widthField,\n                    type: 'width',\n                });\n            } else {\n                return normalizeFieldData({\n                    field: heightField,\n                    type: 'height',\n                });\n            }\n        };\n\n\n        const setImageDimensions = (image, keyField, relativeField, forceHeight = false) => {\n            const getStyleValue = (field) => field.isPercentageValue ? `${field.percentValue}%` : `${field.pixelSize}px`;\n\n            // If the values are constrained, then only update the width.\n            if (forceHeight) {\n                if (keyField.type === 'width') {\n                    image.style.width = getStyleValue(keyField);\n                } else {\n                    image.style.width = getStyleValue(relativeField);\n                }\n            } else {\n                image.style[keyField.type] = getStyleValue(keyField);\n                image.style[relativeField.type] = getStyleValue(relativeField);\n            }\n        };\n\n        const imagePreview = this.form.querySelector(Selectors.IMAGE.elements.preview);\n        // Clear the existing preview sizes.\n        imagePreview.style.width = '';\n        imagePreview.style.height = '';\n\n        // Now update with the new values.\n        const constrainField = this.form.querySelector(Selectors.IMAGE.elements.constrain);\n        const keyField = getKeyField();\n        const relativeField = getRelativeField();\n        if (constrainField.checked) {\n            // We are keeping the image in proportion.\n            // Calculate the size for the relative field.\n            if (keyField.isPercentageValue) {\n                // In proportion, so the percentages are the same.\n                relativeField.field.value = keyField.field.value;\n                relativeField.percentValue = keyField.percentValue;\n            } else {\n                relativeField.pixelSize = Math.round(\n                    keyField.pixelSize / this.rawImageDimensions[keyField.type] * this.rawImageDimensions[relativeField.type]\n                );\n                relativeField.field.value = relativeField.pixelSize;\n            }\n        }\n        setImageDimensions(imagePreview, keyField, relativeField, !!constrainField.checked);\n    }\n\n    getSelectedImageProperties() {\n        const image = this.getSelectedImage();\n        if (!image) {\n            this.selectedImage = null;\n            return null;\n        }\n\n        const properties = {\n            src: null,\n            alt: null,\n            width: null,\n            height: null,\n            align: '',\n            presentation: false,\n        };\n\n        const getImageHeight = (image) => {\n            if (!this.isPercentageValue(String(image.height))) {\n                return parseInt(image.height, 10);\n            }\n\n            return image.height;\n        };\n\n        const getImageWidth = (image) => {\n            if (!this.isPercentageValue(String(image.width))) {\n                return parseInt(image.width, 10);\n            }\n\n            return image.width;\n        };\n\n        // Get the current selection.\n        this.removeLegacyAlignment(image);\n        this.selectedImage = image;\n\n        properties.customStyle = image.style.cssText;\n\n        const width = getImageWidth(image);\n        if (width !== 0) {\n            properties.width = width;\n        }\n\n        const height = getImageHeight(image);\n        if (height !== 0) {\n            properties.height = height;\n        }\n\n        const alignment = this.getAlignmentProperties(image, properties);\n        if (alignment) {\n            properties.align = alignment.value;\n        }\n\n        properties.src = image.getAttribute('src');\n        properties.alt = image.getAttribute('alt') || '';\n        properties.presentation = (image.getAttribute('role') === 'presentation');\n\n        return properties;\n    }\n\n    removeLegacyAlignment(imageNode) {\n        if (!imageNode.style.margin) {\n            // There is no margin therefore this cannot match any known alignments.\n            return imageNode;\n        }\n\n        Selectors.IMAGE.alignments.some(alignment => {\n            if (imageNode.style[alignment.name] !== alignment.value) {\n                // The name/value do not match. Skip.\n                return false;\n            }\n            const normalisedNode = document.createElement('div');\n            normalisedNode.style.margin = alignment.margin;\n            if (imageNode.style.margin !== normalisedNode.style.margin) {\n                // The margin does not match.\n                return false;\n            }\n\n            imageNode.classList.add(this.getAlignmentClass(alignment.value));\n            imageNode.style[alignment.name] = null;\n            imageNode.style.margin = null;\n\n            return true;\n        });\n\n        return imageNode;\n    }\n\n    getAlignmentProperties(image) {\n        const currentAlignment = Selectors.IMAGE.alignments.find((alignment) => {\n            if (image.classList.contains(this.getAlignmentClass(alignment.value))) {\n                return true;\n            }\n\n            if (alignment.legacyValues) {\n                return alignment.legacyValues.some((legacyValue) => image.classList.contains(legacyValue));\n            }\n\n            return false;\n        });\n        if (currentAlignment) {\n            return currentAlignment;\n        }\n\n        return Selectors.IMAGE.alignments.find((alignment) => alignment.isDefault);\n    }\n\n    getSelectedImage() {\n        const imgElm = this.editor.selection.getNode();\n        const figureElm = this.editor.dom.getParent(imgElm, 'figure.image');\n        if (figureElm) {\n            return this.editor.dom.select('img', figureElm)[0];\n        }\n\n        if (imgElm && (imgElm.nodeName.toUpperCase() !== 'IMG' || this.isPlaceholderImage(imgElm))) {\n            return null;\n        }\n        return imgElm;\n    }\n\n    isPlaceholderImage(imgElm) {\n        if (imgElm.nodeName.toUpperCase() !== 'IMG') {\n            return false;\n        }\n\n        return (imgElm.hasAttribute('data-mce-object') || imgElm.hasAttribute('data-mce-placeholder'));\n    }\n\n    isPercentageValue(value) {\n        return value.match(/\\d+%/);\n    }\n\n    async registerEventListeners() {\n        await this.currentModal.getBody();\n        const root = this.currentModal.getRoot()[0];\n\n        this.form = root.querySelector(Selectors.IMAGE.elements.form);\n        root.addEventListener('click', (e) => {\n            const submitAction = e.target.closest(Selectors.IMAGE.actions.submit);\n            const imageBrowserAction = e.target.closest(Selectors.IMAGE.actions.imageBrowser);\n            if (submitAction) {\n                e.preventDefault();\n                this.setImage();\n            }\n            if (imageBrowserAction && this.canShowFilePicker) {\n                e.preventDefault();\n                displayFilepicker(this.editor, 'image').then((params) => {\n                    const self = this;\n                    this.filePickerCallback(params, self);\n\n                    return;\n                }).catch();\n            }\n        });\n\n        root.addEventListener('change', (e) => {\n            const urlEle = e.target.closest(Selectors.IMAGE.elements.url);\n            if (urlEle) {\n                this.hasErrorUrlField();\n            }\n\n            const presentationEle = e.target.closest(Selectors.IMAGE.elements.presentation);\n            if (presentationEle) {\n                this.hasErrorAltField();\n            }\n\n            const constrainEle = e.target.closest(Selectors.IMAGE.elements.constrain);\n            if (constrainEle) {\n                this.autoAdjustSize(true);\n            }\n        });\n\n        root.addEventListener('blur', (e) => {\n            if (e.target.nodeType === Node.ELEMENT_NODE) {\n                const urlEle = e.target.closest(Selectors.IMAGE.elements.url);\n                if (urlEle) {\n                    this.urlChanged();\n                }\n\n                const altEle = e.target.closest(Selectors.IMAGE.elements.alt);\n                if (altEle) {\n                    this.hasErrorAltField();\n                }\n\n                const widthEle = e.target.closest(Selectors.IMAGE.elements.width);\n                if (widthEle) {\n                    this.autoAdjustSize();\n                }\n\n                const heightEle = e.target.closest(Selectors.IMAGE.elements.height);\n                if (heightEle) {\n                    this.autoAdjustSize(true);\n                }\n            }\n        }, true);\n\n        // Character count.\n        root.addEventListener('keyup', (e) => {\n            const altEle = e.target.closest(Selectors.IMAGE.elements.alt);\n            if (altEle) {\n                this.handleKeyupCharacterCount();\n            }\n        });\n    }\n}\n"],"names":["_interopRequireDefault","obj","__esModule","default","_templates","_pending","_selectors","_imagemodal","_exports","DEFAULTS","WIDTH","HEIGHT","form","rawImageDimensions","canShowFilePicker","editor","currentModal","selectedImage","imageAlignment","constructor","permissions","getImagePermissions","this","filepicker","getFilePicker","displayDialogue","currentImageData","getCurrentImageData","ImageModal","create","title","getString","templateContext","getTemplateContext","src","loadPreviewImage","registerEventListeners","getAlignmentTitles","alignmentTitles","top","middle","bottom","getStrings","map","key","component","getImageAlignment","selected","arguments","length","undefined","titles","alignments","text","value","forEach","alignment","index","array","data","elementid","id","showfilepicker","alignoptions","selectedImageProperties","getSelectedImageProperties","properties","align","haspreview","alt","presentation","filePickerCallback","params","self","url","querySelector","Selectors","IMAGE","elements","width","height","storeImageDimensions","image","currentWidth","element","getCurrentWidth","currentHeight","getCurrentHeight","preview","setAttribute","style","display","constrain","isPercentageValue","checked","disabled","widthRatio","Math","round","parseInt","heightRatio","Image","addEventListener","autoAdjustSize","urlChanged","input","hasErrorUrlField","urlError","toggleVisibility","urlWarning","toggleAriaInvalid","hasErrorAltField","imageAltError","altWarning","selector","predicate","querySelectorAll","selectors","getAlignmentClass","updateWarning","getImageContext","classList","push","styles","responsive","customStyle","classlist","join","setImage","pendingPromise","Pending","resolve","isNaN","focus","Templates","render","then","html","insertContent","destroy","catch","handleKeyupCharacterCount","innerHTML","forceHeight","widthField","heightField","normalizeFieldData","fieldData","field","percentValue","pixelSize","type","imagePreview","constrainField","keyField","getKeyField","currentValue","relativeField","getStyleValue","setImageDimensions","getSelectedImage","removeLegacyAlignment","cssText","String","getImageWidth","getImageHeight","getAlignmentProperties","getAttribute","imageNode","margin","some","name","normalisedNode","document","createElement","add","currentAlignment","find","contains","legacyValues","legacyValue","isDefault","imgElm","selection","getNode","figureElm","dom","getParent","select","nodeName","toUpperCase","isPlaceholderImage","hasAttribute","match","getBody","root","getRoot","e","submitAction","target","closest","actions","submit","imageBrowserAction","imageBrowser","preventDefault","displayFilepicker","nodeType","Node","ELEMENT_NODE"],"mappings":"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"}