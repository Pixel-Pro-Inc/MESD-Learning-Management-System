{"version":3,"file":"base_recorder.min.js","sources":["../src/base_recorder.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n//\n\n/**\n * Tiny Record RTC type.\n *\n * @module      tiny_recordrtc/base_recorder\n * @copyright   2022 Stevani Andolo <stevani@hotmail.com.au>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {getString, getStrings} from 'core/str';\nimport {component} from './common';\nimport Pending from 'core/pending';\nimport {getData} from './options';\nimport uploadFile from 'editor_tiny/uploader';\nimport {add as addToast} from 'core/toast';\nimport * as ModalEvents from 'core/modal_events';\nimport * as Templates from 'core/templates';\nimport {saveCancelPromise} from 'core/notification';\nimport {prefetchStrings, prefetchTemplates} from 'core/prefetch';\nimport AlertModal from 'core/local/modal/alert';\n\n/**\n * The RecordRTC base class for audio, video, and any other future types\n */\nexport default class {\n\n    stopRequested = false;\n\n    /**\n     * Constructor for the RecordRTC class\n     *\n     * @param {TinyMCE} editor The Editor to which the content will be inserted\n     * @param {Modal} modal The Moodle Modal that contains the interface used for recording\n     */\n    constructor(editor, modal) {\n        this.ready = false;\n\n        if (!this.checkAndWarnAboutBrowserCompatibility()) {\n            return;\n        }\n\n        this.editor = editor;\n        this.config = getData(editor).params;\n        this.modal = modal;\n        this.modalRoot = modal.getRoot()[0];\n        this.startStopButton = this.modalRoot.querySelector('button[data-action=\"startstop\"]');\n        this.uploadButton = this.modalRoot.querySelector('button[data-action=\"upload\"]');\n\n        // Disable the record button untilt he stream is acquired.\n        this.setRecordButtonState(false);\n\n        this.player = this.configurePlayer();\n        this.registerEventListeners();\n        this.ready = true;\n\n        this.captureUserMedia();\n        this.prefetchContent();\n    }\n\n    /**\n     * Check whether the browser is compatible.\n     *\n     * @returns {boolean}\n     */\n    isReady() {\n        return this.ready;\n    }\n\n    // Disable eslint's valid-jsdoc rule as the following methods are abstract and mnust be overridden by the child class.\n\n    /* eslint-disable valid-jsdoc, no-unused-vars */\n\n    /**\n     * Get the Player element for this type.\n     *\n     * @returns {HTMLElement} The player element, typically an audio or video tag.\n     */\n    configurePlayer() {\n        throw new Error(`configurePlayer() must be implemented in ${this.constructor.name}`);\n    }\n\n    /**\n     * Get the list of supported mimetypes for this recorder.\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/isTypeSupported}\n     *\n     * @returns {string[]} The list of supported mimetypes.\n     */\n    getSupportedTypes() {\n        throw new Error(`getSupportedTypes() must be implemented in ${this.constructor.name}`);\n    }\n\n    /**\n     * Get any recording options passed into the MediaRecorder.\n     * Please note that the mimeType will be fetched from {@link getSupportedTypes()}.\n     *\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/MediaRecorder#options}\n     * @returns {Object}\n     */\n    getRecordingOptions() {\n        throw new Error(`getRecordingOptions() must be implemented in ${this.constructor.name}`);\n    }\n\n    /**\n     * Get a filename for the generated file.\n     *\n     * Typically this function will take a prefix and add a type-specific suffix such as the extension to it.\n     *\n     * @param {string} prefix The prefix for the filename generated by the recorder.\n     * @returns {string}\n     */\n    getFileName(prefix) {\n        throw new Error(`getFileName() must be implemented in ${this.constructor.name}`);\n    }\n\n    /**\n     * Get a list of constraints as required by the getUserMedia() function.\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia#constraints}\n     *\n     * @returns {Object}\n     */\n    getMediaConstraints() {\n        throw new Error(`getMediaConstraints() must be implemented in ${this.constructor.name}`);\n    }\n\n    /**\n     * Whether to start playing the recording as it is captured.\n     * @returns {boolean} Whether to start playing the recording as it is captured.\n     */\n    playOnCapture() {\n        return false;\n    }\n\n    /**\n     * Get the time limit for this recording type.\n     *\n     * @returns {number} The time limit in seconds.\n     */\n    getTimeLimit() {\n        throw new Error(`getTimeLimit() must be implemented in ${this.constructor.name}`);\n    }\n\n    /**\n     * Get the name of the template used when embedding the URL in the editor content.\n     *\n     * @returns {string}\n     */\n    getEmbedTemplateName() {\n        throw new Error(`getEmbedTemplateName() must be implemented in ${this.constructor.name}`);\n    }\n\n    /**\n     * Fetch the Class of the Modal to be displayed.\n     *\n     * @returns {Modal}\n     */\n    static getModalClass() {\n        throw new Error(`getModalClass() must be implemented in ${this.constructor.name}`);\n    }\n\n    /* eslint-enable valid-jsdoc, no-unused-vars */\n\n    /**\n     * Get the options for the MediaRecorder.\n     *\n     * @returns {object} The options for the MediaRecorder instance.\n     */\n    getParsedRecordingOptions() {\n        const requestedTypes = this.getSupportedTypes();\n        const possibleTypes = requestedTypes.reduce((result, type) => {\n            result.push(type);\n            // Safari seems to use codecs: instead of codecs=.\n            // It is safe to add both, so we do, but we want them to remain in order.\n            result.push(type.replace('=', ':'));\n            return result;\n        }, []);\n\n        const compatTypes = possibleTypes.filter((type) => window.MediaRecorder.isTypeSupported(type));\n\n        const options = this.getRecordingOptions();\n        if (compatTypes.length !== 0) {\n            options.mimeType = compatTypes[0];\n        }\n        window.console.info(\n            `Selected codec ${options.mimeType} from ${compatTypes.length} options.`,\n            compatTypes,\n        );\n\n        return options;\n    }\n\n    /**\n     * Start capturing the User Media and handle success or failure of the capture.\n     */\n    async captureUserMedia() {\n        try {\n            const stream = await navigator.mediaDevices.getUserMedia(this.getMediaConstraints());\n            this.handleCaptureSuccess(stream);\n        } catch (error) {\n            this.handleCaptureFailure(error);\n        }\n    }\n\n    /**\n     * Prefetch some of the content that will be used in the UI.\n     *\n     * Note: not all of the strings used are pre-fetched.\n     * Some of the strings will be fetched because their template is used.\n     */\n    prefetchContent() {\n        prefetchStrings(component, [\n            'uploading',\n            'recordagain_title',\n            'recordagain_desc',\n            'discard_title',\n            'discard_desc',\n            'confirm_yes',\n            'recordinguploaded',\n            'maxfilesizehit',\n            'maxfilesizehit_title',\n            'uploadfailed',\n        ]);\n\n        prefetchTemplates([\n            this.getEmbedTemplateName(),\n            'tiny_recordrtc/timeremaining',\n        ]);\n    }\n\n    /**\n     * Display an error message to the user.\n     *\n     * @param {Promise<string>} title The error title\n     * @param {Promise<string>} content The error message\n     * @returns {Promise<Modal>}\n     */\n    async displayAlert(title, content) {\n        const pendingPromise = new Pending('core/confirm:alert');\n        const modal = await AlertModal.create({\n            title: title,\n            body: content,\n            removeOnClose: true,\n        });\n\n        modal.show();\n        pendingPromise.resolve();\n\n        return modal;\n    }\n\n    /**\n     * Handle successful capture of the User Media.\n     *\n     * @param {MediaStream} stream The stream as captured by the User Media.\n     */\n    handleCaptureSuccess(stream) {\n        // Set audio player source to microphone stream.\n        this.player.srcObject = stream;\n\n        if (this.playOnCapture()) {\n            // Mute audio, distracting while recording.\n            this.player.muted = true;\n\n            this.player.play();\n        }\n\n        this.stream = stream;\n        this.setupPlayerSource();\n        this.setRecordButtonState(true);\n    }\n\n    /**\n     * Setup the player to use the stream as a source.\n     */\n    setupPlayerSource() {\n        if (!this.player.srcObject) {\n            this.player.srcObject = this.stream;\n\n            // Mute audio, distracting while recording.\n            this.player.muted = true;\n\n            this.player.play();\n        }\n    }\n\n    /**\n     * Enable the record button.\n     *\n     * @param {boolean|null} enabled Set the button state\n     */\n    setRecordButtonState(enabled) {\n        this.startStopButton.disabled = !enabled;\n    }\n\n    /**\n     * Configure button visibility for the record button.\n     *\n     * @param {boolean} visible Set the visibility of the button.\n     */\n    setRecordButtonVisibility(visible) {\n        const container = this.getButtonContainer('start-stop');\n        container.classList.toggle('hide', !visible);\n    }\n\n    /**\n     * Enable the upload button.\n     *\n     * @param {boolean|null} enabled Set the button state\n     */\n    setUploadButtonState(enabled) {\n        this.uploadButton.disabled = !enabled;\n    }\n\n    /**\n     * Configure button visibility for the upload button.\n     *\n     * @param {boolean} visible Set the visibility of the button.\n     */\n    setUploadButtonVisibility(visible) {\n        const container = this.getButtonContainer('upload');\n        container.classList.toggle('hide', !visible);\n    }\n    /**\n     * Handle failure to capture the User Media.\n     *\n     * @param {Error} error\n     */\n    handleCaptureFailure(error) {\n        // Changes 'CertainError' -> 'gumcertain' to match language string names.\n        var subject = `gum${error.name.replace('Error', '').toLowerCase()}`;\n        this.displayAlert(\n            getString(`${subject}_title`, component),\n            getString(subject, component)\n        );\n    }\n\n    /**\n     * Close the modal and stop recording.\n     */\n    close() {\n        // Closing the modal will destroy it and remove it from the DOM.\n        // It will also stop the recording via the hidden Modal Event.\n        this.modal.hide();\n    }\n\n    /**\n     * Register event listeners for the modal.\n     */\n    registerEventListeners() {\n        this.modalRoot.addEventListener('click', this.handleModalClick.bind(this));\n        this.modal.getRoot().on(ModalEvents.outsideClick, this.outsideClickHandler.bind(this));\n        this.modal.getRoot().on(ModalEvents.hidden, () => {\n            this.cleanupStream();\n            this.requestRecordingStop();\n        });\n    }\n\n    /**\n     * Prevent the Modal from closing when recording is on process.\n     *\n     * @param {MouseEvent} event The click event\n     */\n    async outsideClickHandler(event) {\n        if (this.isRecording()) {\n            // The user is recording.\n            // Do not distract with a confirmation, just prevent closing.\n            event.preventDefault();\n        } else if (this.hasData()) {\n            // If there is a blobsize then there is data that may be lost.\n            // Ask the user to confirm they want to close the modal.\n            // We prevent default here, and then close the modal if they confirm.\n            event.preventDefault();\n\n            try {\n                await saveCancelPromise(\n                    await getString(\"discard_title\", component),\n                    await getString(\"discard_desc\", component),\n                    await getString(\"confirm_yes\", component),\n                );\n                this.modal.hide();\n            } catch (error) {\n                // Do nothing, the modal will not close.\n            }\n        }\n    }\n\n    /**\n     * Handle a click within the Modal.\n     *\n     * @param {MouseEvent} event The click event\n     */\n    handleModalClick(event) {\n        const button = event.target.closest('button');\n        if (button && button.dataset.action) {\n            const action = button.dataset.action;\n            if (action === 'startstop') {\n                this.handleRecordingStartStopRequested();\n            }\n\n            if (action === 'upload') {\n                this.uploadRecording();\n            }\n        }\n    }\n\n    /**\n     * Handle the click event for the recording start/stop button.\n     */\n    handleRecordingStartStopRequested() {\n        if (this.mediaRecorder?.state === 'recording') {\n            this.requestRecordingStop();\n        } else {\n            this.startRecording();\n        }\n    }\n\n    /**\n     * Handle the media stream after it has finished.\n     */\n    async onMediaStopped() {\n        // Set source of audio player.\n        this.blob = new Blob(this.data.chunks, {\n            type: this.mediaRecorder.mimeType\n        });\n        this.player.srcObject = null;\n        this.player.src = URL.createObjectURL(this.blob);\n\n        // Change the label to \"Record again\".\n        this.setRecordButtonTextFromString('recordagain');\n\n        // Show audio player with controls enabled, and unmute.\n        this.player.muted = false;\n        this.player.controls = true;\n        this.getButtonContainer('player')?.classList.toggle('hide', false);\n\n        // Show upload button.\n        this.setUploadButtonVisibility(true);\n        this.setUploadButtonState(true);\n    }\n\n    /**\n     * Upload the recording and insert it into the editor content.\n     */\n    async uploadRecording() {\n        // Trigger error if no recording has been made.\n        if (this.data.chunks.length === 0) {\n            this.displayAlert('norecordingfound');\n            return;\n        }\n\n        const fileName = this.getFileName((Math.random() * 1000).toString().replace('.', ''));\n\n        // Upload recording to server.\n        try {\n            // Once uploading starts, do not allow any further changes to the recording.\n            this.setRecordButtonVisibility(false);\n\n            // Disable the upload button.\n            this.setUploadButtonState(false);\n\n            // Upload the recording.\n            const fileURL = await uploadFile(this.editor, 'media', this.blob, fileName, (progress) => {\n                this.setUploadButtonTextProgress(progress);\n            });\n            this.insertMedia(fileURL);\n            this.close();\n            addToast(await getString('recordinguploaded', component));\n        } catch (error) {\n            // Show a toast and unhide the button.\n            this.setUploadButtonState(true);\n\n            addToast(await getString('uploadfailed', component, {error}), {\n                type: 'error',\n            });\n\n        }\n    }\n\n    /**\n     * Helper to get the container that a button is in.\n     *\n     * @param {string} purpose The button purpose\n     * @returns {HTMLElement}\n     */\n    getButtonContainer(purpose) {\n        return this.modalRoot.querySelector(`[data-purpose=\"${purpose}-container\"]`);\n    }\n\n    /**\n     * Check whether the browser is compatible with capturing media.\n     *\n     * @returns {boolean}\n     */\n    static isBrowserCompatible() {\n        return this.checkSecure() && this.hasUserMedia();\n    }\n\n    static async display(editor) {\n        const ModalClass = this.getModalClass();\n        const modal = await ModalClass.create({\n            templateContext: {},\n            large: true,\n            removeOnClose: true,\n        });\n\n        // Set up the VideoRecorder.\n        const recorder = new this(editor, modal);\n        if (recorder.isReady()) {\n            modal.show();\n        }\n        return modal;\n    }\n\n    /**\n     * Check whether the browser is compatible with capturing media, and display a warning if not.\n     *\n     * @returns {boolean}\n     */\n    checkAndWarnAboutBrowserCompatibility() {\n        if (!this.constructor.checkSecure()) {\n            getStrings(['insecurealert_title', 'insecurealert'].map((key) => ({key, component})))\n                .then(([title, message]) => addToast(message, {title, type: 'error'}))\n                .catch();\n            return false;\n        }\n\n        if (!this.constructor.hasUserMedia) {\n            getStrings(['nowebrtc_title', 'nowebrtc'].map((key) => ({key, component})))\n                .then(([title, message]) => addToast(message, {title, type: 'error'}))\n                .catch();\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Check whether the browser supports WebRTC.\n     *\n     * @returns {boolean}\n     */\n    static hasUserMedia() {\n        return (navigator.mediaDevices && window.MediaRecorder);\n    }\n\n    /**\n     * Check whether the hostname is either hosted over SSL, or from a valid localhost hostname.\n     *\n     * The UserMedia API can only be used in secure contexts as noted.\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia#privacy_and_security}\n     *\n     * @returns {boolean} Whether the plugin can be loaded.\n     */\n    static checkSecure() {\n        // Note: We can now use window.isSecureContext.\n        // https://developer.mozilla.org/en-US/docs/Web/Security/Secure_Contexts#feature_detection\n        // https://developer.mozilla.org/en-US/docs/Web/API/isSecureContext\n        return window.isSecureContext;\n    }\n\n    /**\n     * Update the content of the stop recording button timer.\n     */\n    async setStopRecordingButton() {\n        const {html, js} = await Templates.renderForPromise('tiny_recordrtc/timeremaining', this.getTimeRemaining());\n        Templates.replaceNodeContents(this.startStopButton, html, js);\n        this.buttonTimer = setInterval(this.updateRecordButtonTime.bind(this), 500);\n    }\n\n    /**\n     * Update the time on the stop recording button.\n     */\n    updateRecordButtonTime() {\n        const {remaining, minutes, seconds} = this.getTimeRemaining();\n        if (remaining < 0) {\n            this.requestRecordingStop();\n        } else {\n            this.startStopButton.querySelector('[data-type=\"minutes\"]').textContent = minutes;\n            this.startStopButton.querySelector('[data-type=\"seconds\"]').textContent = seconds;\n        }\n    }\n\n    /**\n     * Set the text of the record button using a language string.\n     *\n     * @param {string} string The string identifier\n     */\n    async setRecordButtonTextFromString(string) {\n        this.startStopButton.textContent = await getString(string, component);\n    }\n\n    /**\n     * Set the upload button text progress.\n     *\n     * @param {number} progress The progress\n     */\n    async setUploadButtonTextProgress(progress) {\n        this.uploadButton.textContent = await getString('uploading', component, {\n            progress: Math.round(progress * 100) / 100,\n        });\n    }\n\n    async resetUploadButtonText() {\n        this.uploadButton.textContent = await getString('upload', component);\n    }\n\n    /**\n     * Clear the timer for the stop recording button.\n     */\n    clearButtonTimer() {\n        if (this.buttonTimer) {\n            clearInterval(this.buttonTimer);\n        }\n        this.buttonTimer = null;\n    }\n\n    /**\n     * Get the time remaining for the recording.\n     *\n     * @returns {Object} The minutes and seconds remaining.\n     */\n    getTimeRemaining() {\n        // All times are in milliseconds\n        const now = new Date().getTime();\n        const remaining = Math.floor(this.getTimeLimit() - ((now - this.startTime) / 1000));\n\n        const formatter = new Intl.NumberFormat(navigator.language, {minimumIntegerDigits: 2});\n        const seconds = formatter.format(remaining % 60);\n        const minutes = formatter.format(Math.floor((remaining - seconds) / 60));\n        return {\n            remaining,\n            minutes,\n            seconds,\n        };\n    }\n\n    /**\n     * Get the maximum file size that can be uploaded.\n     *\n     * @returns {number} The max byte size\n     */\n    getMaxUploadSize() {\n        return this.config.maxrecsize;\n    }\n\n    /**\n     * Stop the recording.\n     * Please note that this should only stop the recording.\n     * Anything related to processing the recording should be handled by the\n     * mediaRecorder's stopped event handler which is processed after it has stopped.\n     */\n    requestRecordingStop() {\n        if (this.mediaRecorder && this.mediaRecorder.state !== 'inactive') {\n            this.stopRequested = true;\n        } else {\n            // There is no recording to stop, but the stream must still be cleaned up.\n            this.cleanupStream();\n        }\n    }\n\n    stopRecorder() {\n        this.mediaRecorder.stop();\n\n        // Unmute the player so that the audio is heard during playback.\n        this.player.muted = false;\n    }\n\n    /**\n     * Clean up the stream.\n     *\n     * This involves stopping any track which is still active.\n     */\n    cleanupStream() {\n        if (this.stream) {\n            this.stream.getTracks()\n                .filter((track) => track.readyState !== 'ended')\n                .forEach((track) => track.stop());\n        }\n    }\n\n    /**\n     * Handle the mediaRecorder `stop` event.\n     */\n    handleStopped() {\n        // Handle the stream data.\n        this.onMediaStopped();\n\n        // Clear the button timer.\n        this.clearButtonTimer();\n    }\n\n    /**\n     * Handle the mediaRecorder `start` event.\n     *\n     * This event is called when the recording starts.\n     */\n    handleStarted() {\n        this.startTime = new Date().getTime();\n        this.setStopRecordingButton();\n    }\n\n    /**\n     * Handle the mediaRecorder `dataavailable` event.\n     *\n     * @param {Event} event\n     */\n    handleDataAvailable(event) {\n        if (this.isRecording()) {\n            const newSize = this.data.blobSize + event.data.size;\n            // Recording stops when either the maximum upload size is reached, or the time limit expires.\n            // The time limit is checked in the `updateButtonTime` function.\n            if (newSize >= this.getMaxUploadSize()) {\n                this.stopRecorder();\n                this.displayFileLimitHitMessage();\n            } else {\n                // Push recording slice to array.\n                this.data.chunks.push(event.data);\n\n                // Size of all recorded data so far.\n                this.data.blobSize = newSize;\n\n                if (this.stopRequested) {\n                    this.stopRecorder();\n                }\n            }\n        }\n    }\n\n    async displayFileLimitHitMessage() {\n        addToast(await getString('maxfilesizehit', component), {\n            title: await getString('maxfilesizehit_title', component),\n            type: 'error',\n        });\n    }\n\n    /**\n     * Check whether the recording is in progress.\n     *\n     * @returns {boolean}\n     */\n    isRecording() {\n        return this.mediaRecorder?.state === 'recording';\n    }\n\n    /**\n     * Whether any data has been recorded.\n     *\n     * @returns {boolean}\n     */\n    hasData() {\n        return !!this.data?.blobSize;\n    }\n\n    /**\n     * Start the recording\n     */\n    async startRecording() {\n        if (this.mediaRecorder) {\n            // Stop the existing recorder if it exists.\n            if (this.isRecording()) {\n                this.mediaRecorder.stop();\n            }\n\n            if (this.hasData()) {\n                const resetRecording = await this.recordAgainConfirmation();\n                if (!resetRecording) {\n                    // User cancelled at the confirmation to reset the data, so exit early.\n                    return;\n                }\n                this.setUploadButtonVisibility(false);\n            }\n\n            this.mediaRecorder = null;\n        }\n\n        // The options for the recording codecs and bitrates.\n        this.mediaRecorder = new MediaRecorder(this.stream, this.getParsedRecordingOptions());\n\n        this.mediaRecorder.addEventListener('dataavailable', this.handleDataAvailable.bind(this));\n        this.mediaRecorder.addEventListener('stop', this.handleStopped.bind(this));\n        this.mediaRecorder.addEventListener('start', this.handleStarted.bind(this));\n\n        this.data = {\n            chunks: [],\n            blobSize: 0\n        };\n        this.setupPlayerSource();\n        this.stopRequested = false;\n\n        // Capture in 50ms chunks.\n        this.mediaRecorder.start(50);\n    }\n\n    /**\n     * Confirm whether the user wants to reset the existing recoring.\n     *\n     * @returns {Promise<boolean>} Whether the user confirmed the reset.\n     */\n    async recordAgainConfirmation() {\n        try {\n            await saveCancelPromise(\n                await getString(\"recordagain_title\", component),\n                await getString(\"recordagain_desc\", component),\n                await getString(\"confirm_yes\", component)\n            );\n            return true;\n        } catch {\n            return false;\n        }\n    }\n\n    /**\n     * Insert the HTML to embed the recording into the editor content.\n     *\n     * @param {string} source The URL to view the media.\n     */\n    async insertMedia(source) {\n        const {html} = await Templates.renderForPromise(\n            this.getEmbedTemplateName(),\n            this.getEmbedTemplateContext({\n                source,\n            })\n        );\n        this.editor.insertContent(html);\n    }\n\n    /**\n     * Add or modify the template parameters for the specified type.\n     *\n     * @param {Object} templateContext The Tempalte context to use\n     * @returns {Object} The finalised template context\n     */\n    getEmbedTemplateContext(templateContext) {\n        return templateContext;\n    }\n}\n"],"names":["_getRequireWildcardCache","e","WeakMap","r","t","_interopRequireWildcard","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","_interopRequireDefault","obj","_pending","_uploader","ModalEvents","Templates","_alert","_exports","stopRequested","constructor","editor","modal","this","ready","checkAndWarnAboutBrowserCompatibility","config","getData","params","modalRoot","getRoot","startStopButton","querySelector","uploadButton","setRecordButtonState","player","configurePlayer","registerEventListeners","captureUserMedia","prefetchContent","isReady","Error","name","getSupportedTypes","getRecordingOptions","getFileName","prefix","getMediaConstraints","playOnCapture","getTimeLimit","getEmbedTemplateName","getModalClass","getParsedRecordingOptions","compatTypes","reduce","result","type","push","replace","filter","window","MediaRecorder","isTypeSupported","options","length","mimeType","console","info","stream","navigator","mediaDevices","getUserMedia","handleCaptureSuccess","error","handleCaptureFailure","prefetchStrings","component","prefetchTemplates","displayAlert","title","content","pendingPromise","Pending","AlertModal","create","body","removeOnClose","show","resolve","srcObject","muted","play","setupPlayerSource","enabled","disabled","setRecordButtonVisibility","visible","getButtonContainer","classList","toggle","setUploadButtonState","setUploadButtonVisibility","subject","toLowerCase","getString","close","hide","addEventListener","handleModalClick","bind","on","outsideClick","outsideClickHandler","hidden","cleanupStream","requestRecordingStop","event","isRecording","preventDefault","hasData","saveCancelPromise","button","target","closest","dataset","action","handleRecordingStartStopRequested","uploadRecording","_this$mediaRecorder","mediaRecorder","state","startRecording","onMediaStopped","_this$getButtonContai","blob","Blob","data","chunks","src","URL","createObjectURL","setRecordButtonTextFromString","controls","fileName","Math","random","toString","fileURL","uploadFile","progress","setUploadButtonTextProgress","insertMedia","addToast","purpose","isBrowserCompatible","checkSecure","hasUserMedia","display","ModalClass","templateContext","large","getStrings","map","key","then","_ref2","message","catch","_ref","isSecureContext","setStopRecordingButton","html","js","renderForPromise","getTimeRemaining","replaceNodeContents","buttonTimer","setInterval","updateRecordButtonTime","remaining","minutes","seconds","textContent","string","round","resetUploadButtonText","clearButtonTimer","clearInterval","now","Date","getTime","floor","startTime","formatter","Intl","NumberFormat","language","minimumIntegerDigits","format","getMaxUploadSize","maxrecsize","stopRecorder","stop","getTracks","track","readyState","forEach","handleStopped","handleStarted","handleDataAvailable","newSize","blobSize","size","displayFileLimitHitMessage","_this$mediaRecorder2","_this$data","recordAgainConfirmation","start","source","getEmbedTemplateContext","insertContent"],"mappings":"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"}