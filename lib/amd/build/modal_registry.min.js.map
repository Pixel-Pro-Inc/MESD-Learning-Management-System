{"version":3,"file":"modal_registry.min.js","sources":["../src/modal_registry.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * A registry for the different types of modal.\n *\n * @module     core/modal_registry\n * @class      modal_registry\n * @copyright  2016 Ryan Wyllie <ryan@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport * as Notification from 'core/notification';\nimport * as Prefetch from 'core/prefetch';\n\n// A singleton registry for all modules to access. Allows types to be\n// added at runtime.\nconst registry = new Map();\n\n/**\n * Get a registered type of modal.\n *\n * @method get\n * @param {string} type The type of modal to get\n * @return {object} The registered config for the modal\n */\nexport const get = (type) => registry.get(type);\n\n/**\n * Register a modal with the registry.\n *\n * @method register\n * @param {string} type The type of modal (must be unique)\n * @param {function} module The modal module (must be a constructor function of type core/modal)\n * @param {string} template The template name of the modal\n */\nexport const register = (type, module, template) => {\n    const existing = get(type);\n    if (existing && existing.module !== module) {\n        Notification.exception({\n            message: `Modal of  type '${type}' is already registered`,\n        });\n    }\n\n    if (!module || typeof module !== 'function') {\n        Notification.exception({message: \"You must provide a modal module\"});\n    }\n\n    if (!template) {\n        Notification.exception({message: \"You must provide a modal template\"});\n    }\n\n    registry.set(type, {module, template});\n\n    // Prefetch the template.\n    Prefetch.prefetchTemplate(template);\n};\n\nexport default {\n    register,\n    get,\n};\n"],"names":["_getRequireWildcardCache","e","WeakMap","r","t","_interopRequireWildcard","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","Notification","Prefetch","registry","Map","type","_exports","register","module","template","existing","exception","message","prefetchTemplate"],"mappings":"uHAwB0C,SAAAA,yBAAAC,GAAA,GAAA,mBAAAC,QAAA,OAAA,KAAA,IAAAC,EAAAD,IAAAA,QAAAE,EAAAF,IAAAA,eAAAF,yBAAA,SAAAC,GAAAA,OAAAA,EAAAG,EAAAD,IAAAF,EAAA,CAAA,SAAAI,wBAAAJ,EAAAE,GAAAA,IAAAA,GAAAF,GAAAA,EAAAK,kBAAAL,EAAA,GAAA,OAAAA,GAAA,iBAAAA,GAAA,mBAAAA,EAAA,MAAA,CAAAM,QAAAN,GAAA,IAAAG,EAAAJ,yBAAAG,GAAAC,GAAAA,GAAAA,EAAAI,IAAAP,GAAAG,OAAAA,EAAAK,IAAAR,GAAAS,IAAAA,GAAAC,UAAA,MAAAC,EAAAC,OAAAC,gBAAAD,OAAAE,yBAAA,IAAA,IAAAC,KAAAf,EAAA,GAAA,YAAAe,GAAAH,OAAAI,UAAAC,eAAAC,KAAAlB,EAAAe,GAAAI,CAAAA,IAAAA,EAAAR,EAAAC,OAAAE,yBAAAd,EAAAe,GAAA,KAAAI,IAAAA,EAAAX,KAAAW,EAAAC,KAAAR,OAAAC,eAAAJ,EAAAM,EAAAI,GAAAV,EAAAM,GAAAf,EAAAe,EAAA,CAAA,OAAAN,EAAAH,QAAAN,EAAAG,GAAAA,EAAAiB,IAAApB,EAAAS,GAAAA;;;;;;;;KAAA,gHAD1CY,aAAAjB,wBAAAiB,cACAC,SAAAlB,wBAAAkB,UAIA,MAAMC,SAAW,IAAIC,IASRhB,IAAOiB,MAASF,SAASf,IAAIiB,MAAMC,SAAAlB,IAAAA,IAUzC,MAAMmB,SAAWA,CAACF,KAAMG,OAAQC,YACnC,MAAMC,SAAWtB,IAAIiB,MACjBK,UAAYA,SAASF,SAAWA,QAChCP,aAAaU,UAAU,CACnBC,QAAU,mBAAkBP,gCAI/BG,QAA4B,mBAAXA,QAClBP,aAAaU,UAAU,CAACC,QAAS,oCAGhCH,UACDR,aAAaU,UAAU,CAACC,QAAS,sCAGrCT,SAASH,IAAIK,KAAM,CAACG,cAAQC,oBAG5BP,SAASW,iBAAiBJ,SAAS,EACrCH,SAAAC,SAAAA,SAAAD,SAAApB,QAEa,CACXqB,kBACAnB,SACH,OAAAkB,SAAApB,OAAA"}