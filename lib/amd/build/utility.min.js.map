{"version":3,"file":"utility.min.js","sources":["../src/utility.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript handling for HTML attributes. This module gets autoloaded on page load.\n *\n * With the appropriate HTML attributes, various functionalities defined in this module can be used such as a displaying\n * an alert or a confirmation modal, etc.\n *\n * @module     core/utility\n * @copyright  2021 Andrew Nicols <andrew@nicols.co.uk>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @since      4.0\n *\n * @example <caption>Calling the confirmation modal to delete a block</caption>\n *\n * // The following is an example of how to use this module via an indirect PHP call with a button.\n *\n * $controls[] = new action_menu_link_secondary(\n *     $deleteactionurl,\n *     new pix_icon('t/delete', $str, 'moodle', array('class' => 'iconsmall', 'title' => '')),\n *     $str,\n *     [\n *         'class' => 'editing_delete',\n *         'data-modal' => 'confirmation', // Needed so this module will pick it up in the click handler.\n *         'data-modal-title-str' => json_encode(['deletecheck_modal', 'block']),\n *         'data-modal-content-str' => json_encode(['deleteblockcheck', 'block', $blocktitle]),\n *         'data-modal-yes-button-str' => json_encode(['delete', 'core']),\n *         'data-modal-toast' => 'true', // Can be set to inform the user that their action was a success.\n *         'data-modal-toast-confirmation-str' => json_encode(['deleteblockinprogress', 'block', $blocktitle]),\n *         'data-modal-destination' => $deleteconfirmationurl->out(false), // Where do you want to direct the user?\n *     ]\n * );\n */\n\nimport * as Str from 'core/str';\nimport Pending from 'core/pending';\nimport {add as addToast} from 'core/toast';\nimport {saveCancelPromise, deleteCancelPromise, exception} from 'core/notification';\n\n// We want to ensure that we only initialize the listeners only once.\nlet registered = false;\n\n/**\n * Either fetch the string or return it from the dom node.\n *\n * @method getConfirmationString\n * @private\n * @param {HTMLElement} dataset The page element to fetch dataset items in\n * @param {String} type The type of string to fetch\n * @param {String} field The dataset field name to fetch the contents of\n * @param {Array|null} [defaultValue=null] The default params to pass to get_string if no value is found in a dataset\n * @return {Promise}\n *\n */\nconst getModalString = (dataset, type, field, defaultValue = null) => {\n    if (dataset[`${type}${field}Str`]) {\n        return Str.get_string.apply(null, JSON.parse(dataset[`${type}${field}Str`]));\n    }\n    if (dataset[`${type}${field}`]) {\n        return Promise.resolve(dataset[`${type}${field}`]);\n    }\n\n    if (defaultValue) {\n        return Str.get_string.apply(null, defaultValue);\n    }\n\n    return null;\n};\n\n/**\n * Display a save/cancel confirmation.\n *\n * @private\n * @param {HTMLElement} source The title of the confirmation\n * @param {String} type The content of the confirmation\n * @returns {Promise}\n */\nconst displayConfirmation = (source, type) => {\n    let confirmationPromise = null;\n    if (`${type}Type` in source.dataset && source.dataset[`${type}Type`] === 'delete') {\n        confirmationPromise = deleteCancelPromise(\n            getModalString(source.dataset, type, 'Title', ['confirm', 'core']),\n            getModalString(source.dataset, type, 'Content'),\n            getModalString(source.dataset, type, 'YesButton', ['yes', 'core'])\n        );\n    } else {\n        confirmationPromise = saveCancelPromise(\n            getModalString(source.dataset, type, 'Title', ['confirm', 'core']),\n            getModalString(source.dataset, type, 'Content'),\n            getModalString(source.dataset, type, 'YesButton', ['yes', 'core'])\n        );\n    }\n    return confirmationPromise.then(() => {\n        if (source.dataset[`${type}Toast`] === 'true') {\n            const stringForToast = getModalString(source.dataset, type, 'ToastConfirmation');\n            if (typeof stringForToast === \"string\") {\n                addToast(stringForToast);\n            } else {\n                stringForToast.then(str => addToast(str)).catch(e => exception(e));\n            }\n        }\n\n        if (source.dataset[`${type}Destination`]) {\n            window.location.href = source.dataset[`${type}Destination`];\n            return;\n        }\n\n        if (source.closest('form')) {\n            // Update the modal and confirmation data fields so that we don't loop.\n            source.dataset.confirmation = 'none';\n            source.dataset.modal = 'none';\n\n            // Click on the button again.\n            // Note: Do not use the form.submit() because it will not work for cancel buttons.\n            source.click();\n            return;\n        }\n\n        const link = source.closest('a');\n        if (link && link.href && link.href !== '#') {\n            window.location.href = link.href;\n            return;\n        }\n\n        const button = source.closest('button, input[type=\"submit\"], input[type=\"button\"], input[type=\"reset\"]');\n        if (button) {\n            source.dataset.modalSubmitting = true;\n            source.click();\n            return;\n        }\n\n        window.console.error(`No destination found for ${type} modal`);\n        return;\n    }).catch(() => {\n        return;\n    });\n};\n\n/**\n * Display an alert and return the promise from it.\n *\n * @private\n * @param {String} title The title of the alert\n * @param {String} body The content of the alert\n * @returns {Promise<ModalAlert>}\n */\nconst displayAlert = async(title, body) => {\n    const pendingPromise = new Pending('core/confirm:alert');\n    const AlertModal = await import('core/local/modal/alert');\n\n    return AlertModal.create({\n        title,\n        body,\n        removeOnClose: true,\n        show: true,\n    })\n    .then((modal) => {\n        pendingPromise.resolve();\n        return modal;\n    });\n};\n\n/**\n * Set up the listeners for the confirmation modal widget within the page.\n *\n * @method registerConfirmationListeners\n * @private\n */\nconst registerConfirmationListeners = () => {\n    document.addEventListener('click', e => {\n        if (e.target.closest('[data-modal-submitting]')) {\n            return;\n        }\n        const confirmRequest = e.target.closest('[data-confirmation=\"modal\"]');\n        if (confirmRequest) {\n            e.preventDefault();\n            displayConfirmation(confirmRequest, 'confirmation');\n        }\n\n        const modalConfirmation = e.target.closest('[data-modal=\"confirmation\"]');\n        if (modalConfirmation) {\n            e.preventDefault();\n            displayConfirmation(modalConfirmation, 'modal');\n        }\n\n        const alertRequest = e.target.closest('[data-modal=\"alert\"]');\n        if (alertRequest) {\n            e.preventDefault();\n            displayAlert(\n                getModalString(alertRequest.dataset, 'modal', 'Title'),\n                getModalString(alertRequest.dataset, 'modal', 'Content'),\n            );\n        }\n    });\n};\n\nif (!registered) {\n    registerConfirmationListeners();\n    registered = true;\n}\n"],"names":["obj","Str","e","r","__esModule","default","t","_getRequireWildcardCache","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","_interopRequireWildcard","_pending","_systemImportTransformerGlobalIdentifier","window","self","global","WeakMap","registered","getModalString","dataset","type","field","defaultValue","arguments","length","undefined","get_string","apply","JSON","parse","Promise","resolve","displayConfirmation","source","confirmationPromise","deleteCancelPromise","saveCancelPromise","then","stringForToast","addToast","str","catch","exception","location","href","closest","confirmation","modal","click","link","modalSubmitting","console","error","registerConfirmationListeners","document","addEventListener","target","confirmRequest","preventDefault","modalConfirmation","alertRequest","async","title","body","pendingPromise","Pending","define","amd","reject","require","module","exports","component","loader","create","removeOnClose","show","displayAlert"],"mappings":"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"}