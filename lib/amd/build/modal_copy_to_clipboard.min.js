define("core/modal_copy_to_clipboard",["exports","core/modal","core/copy_to_clipboard"],(function(_exports,_modal,_copy_to_clipboard){var obj;
/**
   * Contain the logic for the copy to clipboard modal, i.e. the modal contains a
   * readonly input text field, that contains a value. Clicking on the single
   * button "Copy to clipboard" in the footer, puts the content of the input
   * text field into the clipboard and closes the modal.
   *
   * Usage:
   * ModalCopyToClipboard.create(string:<stringToCopy>, string:<modalTitle>|null);
   *
   * @module     core/modal_copy_to_clipboard
   * @copyright  2023 Stephan Robotta <stephan.robotta@bfh.ch>
   * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.default=void 0,_modal=(obj=_modal)&&obj.__esModule?obj:{default:obj};class CopyToClipboardModal extends _modal.default{static TYPE="core/copytoclipboard";static TEMPLATE="core/modal_copytoclipboard";constructor(){super(...arguments),this.setRemoveOnClose(!0)}registerEventListeners(){super.registerEventListeners(...arguments),this.getRoot().get(0).addEventListener("click",(e=>{e.target.closest('[data-action="copytoclipboard"]')&&this.getRoot().get(0).contains(e.target)&&setTimeout(this.destroy.bind(this))}))}static async create(){let{text:text,useTextArea:useTextArea=!1}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},title=arguments.length>1?arguments[1]:void 0;const modalConfig={templateContext:{text:text,useTextArea:useTextArea}};return title&&(modalConfig.title=title),super.create(modalConfig)}configure(modalConfig){modalConfig.show=!0,modalConfig.removeOnClose=!0,super.configure(modalConfig)}}return _exports.default=CopyToClipboardModal,CopyToClipboardModal.registerModalType(),_exports.default}));

//# sourceMappingURL=modal_copy_to_clipboard.min.js.map