{"version":3,"file":"modalform.min.js","sources":["../src/modalform.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Display a form in a modal dialogue\n *\n * Example:\n *    import ModalForm from 'core_form/modalform';\n *\n *    const modalForm = new ModalForm({\n *        formClass: 'pluginname\\\\form\\\\formname',\n *        modalConfig: {title: 'Here comes the title'},\n *        args: {categoryid: 123},\n *        returnFocus: e.target,\n *    });\n *    modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, (c) => window.console.log(c.detail));\n *    modalForm.show();\n *\n * See also https://docs.moodle.org/dev/Modal_and_AJAX_forms\n *\n * @module     core_form/modalform\n * @copyright  2018 Mitxel Moriana <mitxel@tresipunt.>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from 'core/ajax';\nimport * as FormChangeChecker from 'core_form/changechecker';\nimport * as FormEvents from 'core_form/events';\nimport Fragment from 'core/fragment';\nimport ModalEvents from 'core/modal_events';\nimport Notification from 'core/notification';\nimport Pending from 'core/pending';\nimport {serialize} from './util';\n\nexport default class ModalForm {\n\n    /**\n     * Various events that can be observed.\n     *\n     * @type {Object}\n     */\n    events = {\n        // Form was successfully submitted - the response is passed to the event listener.\n        // Cancellable (but it's hardly ever needed to cancel this event).\n        FORM_SUBMITTED: 'core_form_modalform_formsubmitted',\n        // Cancel button was pressed.\n        // Cancellable (but it's hardly ever needed to cancel this event).\n        FORM_CANCELLED: 'core_form_modalform_formcancelled',\n        // User attempted to submit the form but there was client-side validation error.\n        CLIENT_VALIDATION_ERROR: 'core_form_modalform_clientvalidationerror',\n        // User attempted to submit the form but server returned validation error.\n        SERVER_VALIDATION_ERROR: 'core_form_modalform_validationerror',\n        // Error occurred while performing request to the server.\n        // Cancellable (by default calls Notification.exception).\n        ERROR: 'core_form_modalform_error',\n        // Right after user pressed no-submit button,\n        // listen to this event if you want to add JS validation or processing for no-submit button.\n        // Cancellable.\n        NOSUBMIT_BUTTON_PRESSED: 'core_form_modalform_nosubmitbutton',\n        // Right after user pressed submit button,\n        // listen to this event if you want to add additional JS validation or confirmation dialog.\n        // Cancellable.\n        SUBMIT_BUTTON_PRESSED: 'core_form_modalform_submitbutton',\n        // Right after user pressed cancel button,\n        // listen to this event if you want to add confirmation dialog.\n        // Cancellable.\n        CANCEL_BUTTON_PRESSED: 'core_form_modalform_cancelbutton',\n        // Modal was loaded and this.modal is available (but the form content may not be loaded yet).\n        LOADED: 'core_form_modalform_loaded',\n    };\n\n    /**\n     * Constructor\n     *\n     * Shows the required form inside a modal dialogue\n     *\n     * @param {Object} config parameters for the form and modal dialogue:\n     * @paramy {String} config.formClass PHP class name that handles the form (should extend \\core_form\\modal )\n     * @paramy {String} config.moduleName module name to use if different to core/modal_save_cancel (optional)\n     * @paramy {Object} config.modalConfig modal config - title, header, footer, etc.\n     *              Default: {removeOnClose: true, large: true}\n     * @paramy {Object} config.args Arguments for the initial form rendering (for example, id of the edited entity)\n     * @paramy {String} config.saveButtonText the text to display on the Modal \"Save\" button (optional)\n     * @paramy {String} config.saveButtonClasses additional CSS classes for the Modal \"Save\" button\n     * @paramy {HTMLElement} config.returnFocus element to return focus to after the dialogue is closed\n     */\n    constructor(config) {\n        this.modal = null;\n        this.config = config;\n        this.config.modalConfig = {\n            removeOnClose: true,\n            large: true,\n            ...(this.config.modalConfig || {}),\n        };\n        this.config.args = this.config.args || {};\n        this.futureListeners = [];\n    }\n\n    /**\n     * Loads the modal module and creates an instance\n     *\n     * @returns {Promise}\n     */\n    getModalModule() {\n        if (!this.config.moduleName && this.config.modalConfig.type && this.config.modalConfig.type !== 'SAVE_CANCEL') {\n            // Legacy loader for plugins that were not updated with Moodle 4.3 changes.\n            window.console.warn(\n                'Passing config.modalConfig.type to ModalForm has been deprecated since Moodle 4.3. ' +\n                'Please pass config.modalName instead with the full module name.',\n            );\n            return import('core/modal_factory')\n                .then((ModalFactory) => ModalFactory.create(this.config.modalConfig));\n        } else {\n            // New loader for Moodle 4.3 and above.\n            const moduleName = this.config.moduleName ?? 'core/modal_save_cancel';\n            return import(moduleName)\n                .then((module) => module.create(this.config.modalConfig));\n        }\n    }\n\n    /**\n     * Initialise the modal and shows it\n     *\n     * @return {Promise}\n     */\n    show() {\n        const pendingPromise = new Pending('core_form/modalform:init');\n\n        return this.getModalModule()\n        .then((modal) => {\n            this.modal = modal;\n\n            // Retrieve the form and set the modal body. We can not set the body in the modalConfig,\n            // we need to make sure that the modal already exists when we render the form. Some form elements\n            // such as date_selector inspect the existing elements on the page to find the highest z-index.\n            const formParams = serialize(this.config.args || {});\n            const bodyContent = this.getBody(formParams);\n            this.modal.setBodyContent(bodyContent);\n            bodyContent.catch(Notification.exception);\n\n            // After successfull submit, when we press \"Cancel\" or close the dialogue by clicking on X in the top right corner.\n            this.modal.getRoot().on(ModalEvents.hidden, () => {\n                this.notifyResetFormChanges();\n                this.modal.destroy();\n                // Focus on the element that actually launched the modal.\n                if (this.config.returnFocus) {\n                    this.config.returnFocus.focus();\n                }\n            });\n\n            // Add the class to the modal dialogue.\n            this.modal.getModal().addClass('modal-form-dialogue');\n\n            // We catch the press on submit buttons in the forms.\n            this.modal.getRoot().on('click', 'form input[type=submit][data-no-submit]',\n                (e) => {\n                    e.preventDefault();\n                    const event = this.trigger(this.events.NOSUBMIT_BUTTON_PRESSED, e.target);\n                    if (!event.defaultPrevented) {\n                        this.processNoSubmitButton(e.target);\n                    }\n                });\n\n            // We catch the form submit event and use it to submit the form with ajax.\n            this.modal.getRoot().on('submit', 'form', (e) => {\n                e.preventDefault();\n                const event = this.trigger(this.events.SUBMIT_BUTTON_PRESSED);\n                if (!event.defaultPrevented) {\n                    this.submitFormAjax();\n                }\n            });\n\n            // Change the text for the save button.\n            if (typeof this.config.saveButtonText !== 'undefined' &&\n                typeof this.modal.setSaveButtonText !== 'undefined') {\n                this.modal.setSaveButtonText(this.config.saveButtonText);\n            }\n            // Set classes for the save button.\n            if (typeof this.config.saveButtonClasses !== 'undefined') {\n                this.setSaveButtonClasses(this.config.saveButtonClasses);\n            }\n            // When Save button is pressed - submit the form.\n            this.modal.getRoot().on(ModalEvents.save, (e) => {\n                e.preventDefault();\n                this.modal.getRoot().find('form').submit();\n            });\n\n            // When Cancel button is pressed - allow to intercept.\n            this.modal.getRoot().on(ModalEvents.cancel, (e) => {\n                const event = this.trigger(this.events.CANCEL_BUTTON_PRESSED);\n                if (event.defaultPrevented) {\n                    e.preventDefault();\n                }\n            });\n            this.futureListeners.forEach(args => this.modal.getRoot()[0].addEventListener(...args));\n            this.futureListeners = [];\n            this.trigger(this.events.LOADED, null, false);\n            return this.modal.show();\n        })\n        .then(pendingPromise.resolve);\n    }\n\n    /**\n     * Triggers a custom event\n     *\n     * @private\n     * @param {String} eventName\n     * @param {*} detail\n     * @param {Boolean} cancelable\n     * @return {CustomEvent<unknown>}\n     */\n    trigger(eventName, detail = null, cancelable = true) {\n        const e = new CustomEvent(eventName, {detail, cancelable});\n        this.modal.getRoot()[0].dispatchEvent(e);\n        return e;\n    }\n\n    /**\n     * Add listener for an event\n     *\n     * @param {array} args\n     * @example:\n     *    const modalForm = new ModalForm(...);\n     *    dynamicForm.addEventListener(modalForm.events.FORM_SUBMITTED, e => {\n     *        window.console.log(e.detail);\n     *    });\n     */\n    addEventListener(...args) {\n        if (!this.modal) {\n            this.futureListeners.push(args);\n        } else {\n            this.modal.getRoot()[0].addEventListener(...args);\n        }\n    }\n\n    /**\n     * Get form contents (to be used in ModalForm.setBodyContent())\n     *\n     * @param {String} formDataString form data in format of a query string\n     * @method getBody\n     * @private\n     * @return {Promise}\n     */\n    getBody(formDataString) {\n        const params = {\n            formdata: formDataString,\n            form: this.config.formClass\n        };\n        const pendingPromise = new Pending('core_form/modalform:form_body');\n        return Ajax.call([{\n            methodname: 'core_form_dynamic_form',\n            args: params\n        }])[0]\n        .then(response => {\n            pendingPromise.resolve();\n            return {html: response.html, js: Fragment.processCollectedJavascript(response.javascript)};\n        });\n    }\n\n    /**\n     * On exception during form processing. Caller may override\n     *\n     * @param {Object} exception\n     */\n    onSubmitError(exception) {\n        const event = this.trigger(this.events.ERROR, exception);\n        if (event.defaultPrevented) {\n            return;\n        }\n\n        Notification.exception(exception);\n    }\n\n    /**\n     * Notifies listeners that form dirty state should be reset.\n     *\n     * @fires event:formSubmittedByJavascript\n     */\n    notifyResetFormChanges() {\n        const form = this.getFormNode();\n        if (!form) {\n            return;\n        }\n\n        FormEvents.notifyFormSubmittedByJavascript(form, true);\n\n        FormChangeChecker.resetFormDirtyState(form);\n    }\n\n    /**\n     * Get the form node from the Dialogue.\n     *\n     * @returns {HTMLFormElement}\n     */\n    getFormNode() {\n        return this.modal.getRoot().find('form')[0];\n    }\n\n    /**\n     * Click on a \"submit\" button that is marked in the form as registerNoSubmitButton()\n     *\n     * @param {Element} button button that was pressed\n     * @fires event:formSubmittedByJavascript\n     */\n    processNoSubmitButton(button) {\n        const form = this.getFormNode();\n        if (!form) {\n            return;\n        }\n\n        FormEvents.notifyFormSubmittedByJavascript(form, true);\n\n        // Add the button name to the form data and submit it.\n        let formData = this.modal.getRoot().find('form').serialize();\n        formData = formData + '&' + encodeURIComponent(button.getAttribute('name')) + '=' +\n            encodeURIComponent(button.getAttribute('value'));\n\n        const bodyContent = this.getBody(formData);\n        this.modal.setBodyContent(bodyContent);\n        bodyContent.catch(Notification.exception);\n    }\n\n    /**\n     * Validate form elements\n     * @return {Boolean} Whether client-side validation has passed, false if there are errors\n     * @fires event:formSubmittedByJavascript\n     */\n    validateElements() {\n        FormEvents.notifyFormSubmittedByJavascript(this.getFormNode());\n\n        // Now the change events have run, see if there are any \"invalid\" form fields.\n        /** @var {jQuery} list of elements with errors */\n        const invalid = this.modal.getRoot().find('[aria-invalid=\"true\"], .error');\n\n        // If we found invalid fields, focus on the first one and do not submit via ajax.\n        if (invalid.length) {\n            invalid.first().focus();\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Disable buttons during form submission\n     */\n    disableButtons() {\n        this.modal.getFooter().find('[data-action]').attr('disabled', true);\n    }\n\n    /**\n     * Enable buttons after form submission (on validation error)\n     */\n    enableButtons() {\n        this.modal.getFooter().find('[data-action]').removeAttr('disabled');\n    }\n\n    /**\n     * Submit the form via AJAX call to the core_form_dynamic_form WS\n     */\n    async submitFormAjax() {\n        // If we found invalid fields, focus on the first one and do not submit via ajax.\n        if (!this.validateElements()) {\n            this.trigger(this.events.CLIENT_VALIDATION_ERROR, null, false);\n            return;\n        }\n        this.disableButtons();\n\n        // Convert all the form elements values to a serialised string.\n        const form = this.modal.getRoot().find('form');\n        const formData = form.serialize();\n\n        // Now we can continue...\n        Ajax.call([{\n            methodname: 'core_form_dynamic_form',\n            args: {\n                formdata: formData,\n                form: this.config.formClass\n            }\n        }])[0]\n        .then((response) => {\n            if (!response.submitted) {\n                // Form was not submitted because validation failed.\n                const promise = new Promise(\n                    resolve => resolve({html: response.html, js: Fragment.processCollectedJavascript(response.javascript)}));\n                this.modal.setBodyContent(promise);\n                this.enableButtons();\n                this.trigger(this.events.SERVER_VALIDATION_ERROR);\n            } else {\n                // Form was submitted properly. Hide the modal and execute callback.\n                const data = JSON.parse(response.data);\n                FormChangeChecker.markFormSubmitted(form[0]);\n                const event = this.trigger(this.events.FORM_SUBMITTED, data);\n                if (!event.defaultPrevented) {\n                    this.modal.hide();\n                }\n            }\n            return null;\n        })\n        .catch(exception => this.onSubmitError(exception));\n    }\n\n    /**\n     * Set the classes for the 'save' button.\n     *\n     * @method setSaveButtonClasses\n     * @param {(String)} value The 'save' button classes.\n     */\n    setSaveButtonClasses(value) {\n        const button = this.modal.getFooter().find(\"[data-action='save']\");\n        if (!button) {\n            throw new Error(\"Unable to find the 'save' button\");\n        }\n        button.removeClass().addClass(value);\n    }\n}\n"],"names":["_ajax","_interopRequireDefault","FormChangeChecker","_interopRequireWildcard","FormEvents","_fragment","_modal_events","_notification","_pending","_systemImportTransformerGlobalIdentifier","window","self","global","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","obj","_exports","events","FORM_SUBMITTED","FORM_CANCELLED","CLIENT_VALIDATION_ERROR","SERVER_VALIDATION_ERROR","ERROR","NOSUBMIT_BUTTON_PRESSED","SUBMIT_BUTTON_PRESSED","CANCEL_BUTTON_PRESSED","LOADED","constructor","config","this","modal","modalConfig","removeOnClose","large","args","futureListeners","getModalModule","moduleName","type","console","warn","define","amd","Promise","resolve","reject","require","module","exports","component","loader","then","ModalFactory","create","show","pendingPromise","Pending","formParams","serialize","bodyContent","getBody","setBodyContent","catch","Notification","exception","getRoot","on","ModalEvents","hidden","notifyResetFormChanges","destroy","returnFocus","focus","getModal","addClass","preventDefault","trigger","target","defaultPrevented","processNoSubmitButton","submitFormAjax","saveButtonText","setSaveButtonText","saveButtonClasses","setSaveButtonClasses","save","find","submit","cancel","forEach","addEventListener","eventName","CustomEvent","detail","arguments","length","undefined","cancelable","dispatchEvent","_len","Array","_key","push","formDataString","params","formdata","form","formClass","Ajax","methodname","response","html","js","Fragment","processCollectedJavascript","javascript","onSubmitError","getFormNode","notifyFormSubmittedByJavascript","resetFormDirtyState","button","formData","encodeURIComponent","getAttribute","validateElements","invalid","first","disableButtons","getFooter","attr","enableButtons","removeAttr","submitted","data","JSON","parse","markFormSubmitted","hide","promise","value","Error","removeClass"],"mappings":"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"}