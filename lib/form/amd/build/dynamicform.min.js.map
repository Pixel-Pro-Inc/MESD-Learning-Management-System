{"version":3,"file":"dynamicform.min.js","sources":["../src/dynamicform.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Display an embedded form, it is only loaded and reloaded inside its container\n *\n *\n * @module     core_form/dynamicform\n * @copyright  2019 Marina Glancy\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * See also https://docs.moodle.org/dev/Modal_and_AJAX_forms\n *\n * @example\n *    import DynamicForm from 'core_form/dynamicform';\n *\n *    const dynamicForm = new DynamicForm(document.querySelector('#mycontainer', 'pluginname\\\\form\\\\formname');\n *    dynamicForm.addEventListener(dynamicForm.events.FORM_SUBMITTED, e => {\n *        e.preventDefault();\n *        window.console.log(e.detail);\n *        dynamicForm.container.innerHTML = 'Thank you, your form is submitted!';\n *    });\n *    dynamicForm.load();\n *\n */\n\nimport * as FormChangeChecker from 'core_form/changechecker';\nimport * as FormEvents from 'core_form/events';\nimport Ajax from 'core/ajax';\nimport Fragment from 'core/fragment';\nimport Notification from 'core/notification';\nimport Pending from 'core/pending';\nimport Templates from 'core/templates';\nimport {getStrings} from 'core/str';\nimport {serialize} from './util';\n\n/**\n * @class core_form/dynamicform\n */\nexport default class DynamicForm {\n\n    /**\n     * Various events that can be observed.\n     *\n     * @type {Object}\n     */\n    events = {\n        // Form was successfully submitted - the response is passed to the event listener.\n        // Cancellable (in order to prevent default behavior to clear the container).\n        FORM_SUBMITTED: 'core_form_dynamicform_formsubmitted',\n        // Cancel button was pressed.\n        // Cancellable (in order to prevent default behavior to clear the container).\n        FORM_CANCELLED: 'core_form_dynamicform_formcancelled',\n        // User attempted to submit the form but there was client-side validation error.\n        CLIENT_VALIDATION_ERROR: 'core_form_dynamicform_clientvalidationerror',\n        // User attempted to submit the form but server returned validation error.\n        SERVER_VALIDATION_ERROR: 'core_form_dynamicform_validationerror',\n        // Error occurred while performing request to the server.\n        // Cancellable (by default calls Notification.exception).\n        ERROR: 'core_form_dynamicform_error',\n        // Right after user pressed no-submit button,\n        // listen to this event if you want to add JS validation or processing for no-submit button.\n        // Cancellable.\n        NOSUBMIT_BUTTON_PRESSED: 'core_form_dynamicform_nosubmitbutton',\n        // Right after user pressed submit button,\n        // listen to this event if you want to add additional JS validation or confirmation dialog.\n        // Cancellable.\n        SUBMIT_BUTTON_PRESSED: 'core_form_dynamicform_submitbutton',\n        // Right after user pressed cancel button,\n        // listen to this event if you want to add confirmation dialog.\n        // Cancellable.\n        CANCEL_BUTTON_PRESSED: 'core_form_dynamicform_cancelbutton',\n    };\n\n    /**\n     * Constructor\n     *\n     * Creates an instance\n     *\n     * @param {Element} container - the parent element for the form\n     * @param {string} formClass full name of the php class that extends \\core_form\\modal , must be in autoloaded location\n     */\n    constructor(container, formClass) {\n        this.formClass = formClass;\n        this.container = container;\n\n        // Ensure strings required for shortforms are always available.\n        getStrings([\n            {key: 'collapseall', component: 'moodle'},\n            {key: 'expandall', component: 'moodle'}\n        ]).catch(Notification.exception);\n\n        // Register delegated events handlers in vanilla JS.\n        this.container.addEventListener('click', e => {\n            if (e.target.matches('form input[type=submit][data-cancel]')) {\n                e.preventDefault();\n                const event = this.trigger(this.events.CANCEL_BUTTON_PRESSED, e.target);\n                if (!event.defaultPrevented) {\n                    this.processCancelButton();\n                }\n            } else if (e.target.matches('form input[type=submit][data-no-submit=\"1\"]')) {\n                e.preventDefault();\n                const event = this.trigger(this.events.NOSUBMIT_BUTTON_PRESSED, e.target);\n                if (!event.defaultPrevented) {\n                    this.processNoSubmitButton(e.target);\n                }\n            }\n        });\n\n        this.container.addEventListener('submit', e => {\n            if (e.target.matches('form')) {\n                e.preventDefault();\n                const event = this.trigger(this.events.SUBMIT_BUTTON_PRESSED);\n                if (!event.defaultPrevented) {\n                    this.submitFormAjax();\n                }\n            }\n        });\n    }\n\n    /**\n     * Loads the form via AJAX and shows it inside a given container\n     *\n     * @param {Object} args\n     * @return {Promise}\n     * @public\n     */\n    load(args = null) {\n        const formData = serialize(args || {});\n        const pendingPromise = new Pending('core_form/dynamicform:load');\n        return this.getBody(formData)\n        .then((resp) => this.updateForm(resp))\n        .then(pendingPromise.resolve);\n    }\n\n    /**\n     * Triggers a custom event\n     *\n     * @private\n     * @param {String} eventName\n     * @param {*} detail\n     * @param {Boolean} cancelable\n     * @return {CustomEvent<unknown>}\n     */\n    trigger(eventName, detail = null, cancelable = true) {\n        const e = new CustomEvent(eventName, {detail, cancelable});\n        this.container.dispatchEvent(e);\n        return e;\n    }\n\n    /**\n     * Add listener for an event\n     *\n     * @param {array} args\n     * @example:\n     *    const dynamicForm = new DynamicForm(...);\n     *    dynamicForm.addEventListener(dynamicForm.events.FORM_SUBMITTED, e => {\n     *        e.preventDefault();\n     *        window.console.log(e.detail);\n     *        dynamicForm.container.innerHTML = 'Thank you, your form is submitted!';\n     *    });\n     */\n    addEventListener(...args) {\n        this.container.addEventListener(...args);\n    }\n\n    /**\n     * Get form body\n     *\n     * @param {String} formDataString form data in format of a query string\n     * @private\n     * @return {Promise}\n     */\n    getBody(formDataString) {\n        return Ajax.call([{\n            methodname: 'core_form_dynamic_form',\n            args: {\n                formdata: formDataString,\n                form: this.formClass,\n            }\n        }])[0]\n        .then(response => {\n            return {html: response.html, js: Fragment.processCollectedJavascript(response.javascript)};\n        });\n    }\n\n    /**\n     * On form submit\n     *\n     * @param {*} response Response received from the form's \"process\" method\n     */\n    onSubmitSuccess(response) {\n        const event = this.trigger(this.events.FORM_SUBMITTED, response);\n        if (event.defaultPrevented) {\n            return;\n        }\n\n        // Default implementation is to remove the form. Event listener should either remove or reload the form\n        // since its contents is no longer correct. For example, if an element was created as a result of\n        // form submission, the \"id\" in the form would be still zero. Also the server-side validation\n        // errors from the previous submission may still be present.\n        this.container.innerHTML = '';\n    }\n\n    /**\n     * On exception during form processing\n     *\n     * @private\n     * @param {Object} exception\n     */\n    onSubmitError(exception) {\n        const event = this.trigger(this.events.ERROR, exception);\n        if (event.defaultPrevented) {\n            return;\n        }\n\n        Notification.exception(exception);\n    }\n\n    /**\n     * Click on a \"submit\" button that is marked in the form as registerNoSubmitButton()\n     *\n     * @method submitButtonPressed\n     * @param {Element} button that was pressed\n     * @fires event:formSubmittedByJavascript\n     */\n    processNoSubmitButton(button) {\n        const pendingPromise = new Pending('core_form/dynamicform:nosubmit');\n        const form = this.getFormNode();\n        const formData = new URLSearchParams([...(new FormData(form)).entries()]);\n        formData.append(button.getAttribute('name'), button.getAttribute('value'));\n\n        FormEvents.notifyFormSubmittedByJavascript(form, true);\n\n        // Add the button name to the form data and submit it.\n        this.disableButtons();\n\n        this.getBody(formData.toString())\n        .then(resp => this.updateForm(resp))\n        .then(pendingPromise.resolve)\n        .catch(exception => this.onSubmitError(exception));\n    }\n\n    /**\n     * Get the form node from the Dialogue.\n     *\n     * @returns {HTMLFormElement}\n     */\n    getFormNode() {\n        return this.container.querySelector('form');\n    }\n\n    /**\n     * Notifies listeners that form dirty state should be reset.\n     *\n     * @fires event:formSubmittedByJavascript\n     */\n    notifyResetFormChanges() {\n        FormEvents.notifyFormSubmittedByJavascript(this.getFormNode(), true);\n        FormChangeChecker.resetFormDirtyState(this.getFormNode());\n    }\n\n    /**\n     * Click on a \"cancel\" button\n     */\n    processCancelButton() {\n        // Notify listeners that the form is about to be submitted (this will reset atto autosave).\n        this.notifyResetFormChanges();\n\n        const event = this.trigger(this.events.FORM_CANCELLED);\n        if (!event.defaultPrevented) {\n            // By default removes the form from the DOM.\n            this.container.innerHTML = '';\n        }\n    }\n\n    /**\n     * Update form contents\n     *\n     * @param {object} param\n     * @param {string} param.html\n     * @param {string} param.js\n     * @returns {Promise}\n     */\n    updateForm({html, js}) {\n        return Templates.replaceNodeContents(this.container, html, js);\n    }\n\n    /**\n     * Validate form elements\n     * @return {Boolean} Whether client-side validation has passed, false if there are errors\n     * @fires event:formSubmittedByJavascript\n     */\n    validateElements() {\n        // Notify listeners that the form is about to be submitted (this will reset atto autosave).\n        FormEvents.notifyFormSubmittedByJavascript(this.getFormNode());\n\n        // Now the change events have run, see if there are any \"invalid\" form fields.\n        const invalid = [...this.container.querySelectorAll('[aria-invalid=\"true\"], .error')];\n\n        // If we found invalid fields, focus on the first one and do not submit via ajax.\n        if (invalid.length) {\n            invalid[0].focus();\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Disable buttons during form submission\n     */\n    disableButtons() {\n        this.container.querySelectorAll('form input[type=\"submit\"]')\n            .forEach(el => el.setAttribute('disabled', true));\n    }\n\n    /**\n     * Enable buttons after form submission (on validation error)\n     */\n    enableButtons() {\n        this.container.querySelectorAll('form input[type=\"submit\"]')\n            .forEach(el => el.removeAttribute('disabled'));\n    }\n\n    /**\n     * Submit the form via AJAX call to the core_form_dynamic_form WS\n     */\n    async submitFormAjax() {\n        // If we found invalid fields, focus on the first one and do not submit via ajax.\n        if (!(await this.validateElements())) {\n            this.trigger(this.events.CLIENT_VALIDATION_ERROR, null, false);\n            return;\n        }\n        this.disableButtons();\n\n        // Convert all the form elements values to a serialised string.\n        const form = this.container.querySelector('form');\n        const formData = new URLSearchParams([...(new FormData(form)).entries()]);\n\n        // Now we can continue...\n        Ajax.call([{\n            methodname: 'core_form_dynamic_form',\n            args: {\n                formdata: formData.toString(),\n                form: this.formClass\n            }\n        }])[0]\n        .then((response) => {\n            if (!response.submitted) {\n                // Form was not submitted, it could be either because validation failed or because no-submit button was pressed.\n                this.updateForm({html: response.html, js: Fragment.processCollectedJavascript(response.javascript)});\n                this.enableButtons();\n                this.trigger(this.events.SERVER_VALIDATION_ERROR, null, false);\n            } else {\n                // Form was submitted properly.\n                const data = JSON.parse(response.data);\n                this.enableButtons();\n                this.notifyResetFormChanges();\n                this.onSubmitSuccess(data);\n            }\n            return null;\n        })\n        .catch(exception => this.onSubmitError(exception));\n    }\n}\n"],"names":["_interopRequireDefault","obj","__esModule","default","_getRequireWildcardCache","e","WeakMap","r","t","_interopRequireWildcard","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","FormChangeChecker","FormEvents","_ajax","_fragment","_notification","_pending","_templates","_exports","events","FORM_SUBMITTED","FORM_CANCELLED","CLIENT_VALIDATION_ERROR","SERVER_VALIDATION_ERROR","ERROR","NOSUBMIT_BUTTON_PRESSED","SUBMIT_BUTTON_PRESSED","CANCEL_BUTTON_PRESSED","constructor","container","formClass","this","getStrings","key","component","catch","Notification","exception","addEventListener","target","matches","preventDefault","trigger","defaultPrevented","processCancelButton","processNoSubmitButton","submitFormAjax","load","args","arguments","length","undefined","formData","serialize","pendingPromise","Pending","getBody","then","resp","updateForm","resolve","eventName","CustomEvent","detail","cancelable","dispatchEvent","formDataString","Ajax","methodname","formdata","form","response","html","js","Fragment","processCollectedJavascript","javascript","onSubmitSuccess","innerHTML","onSubmitError","button","getFormNode","URLSearchParams","FormData","entries","append","getAttribute","notifyFormSubmittedByJavascript","disableButtons","toString","querySelector","notifyResetFormChanges","resetFormDirtyState","_ref","Templates","replaceNodeContents","validateElements","invalid","querySelectorAll","focus","forEach","el","setAttribute","enableButtons","removeAttribute","submitted","data","JSON","parse"],"mappings":"0SA2CuC,SAAAA,uBAAAC,KAAAA,OAAAA,KAAAA,IAAAC,WAAAD,IAAAE,CAAAA,QAAAF,IAAA,CAAA,SAAAG,yBAAAC,GAAA,GAAA,mBAAAC,QAAA,OAAA,KAAA,IAAAC,EAAAD,IAAAA,QAAAE,EAAAF,IAAAA,eAAAF,yBAAA,SAAAC,GAAAA,OAAAA,EAAAG,EAAAD,IAAAF,EAAA,CAAA,SAAAI,wBAAAJ,EAAAE,GAAAA,IAAAA,GAAAF,GAAAA,EAAAH,kBAAAG,EAAA,GAAA,OAAAA,GAAA,iBAAAA,GAAA,mBAAAA,EAAA,MAAA,CAAAF,QAAAE,GAAA,IAAAG,EAAAJ,yBAAAG,GAAAC,GAAAA,GAAAA,EAAAE,IAAAL,GAAAG,OAAAA,EAAAG,IAAAN,GAAAO,IAAAA,GAAAC,UAAA,MAAAC,EAAAC,OAAAC,gBAAAD,OAAAE,yBAAA,IAAA,IAAAC,KAAAb,EAAA,GAAA,YAAAa,GAAAH,OAAAI,UAAAC,eAAAC,KAAAhB,EAAAa,GAAAI,CAAAA,IAAAA,EAAAR,EAAAC,OAAAE,yBAAAZ,EAAAa,GAAA,KAAAI,IAAAA,EAAAX,KAAAW,EAAAC,KAAAR,OAAAC,eAAAJ,EAAAM,EAAAI,GAAAV,EAAAM,GAAAb,EAAAa,EAAA,CAAA,OAAAN,EAAAT,QAAAE,EAAAG,GAAAA,EAAAe,IAAAlB,EAAAO,GAAAA;;;;;;;;;;;;;;;;;;;;;KAAA,iFANvCY,kBAAAf,wBAAAe,mBACAC,WAAAhB,wBAAAgB,YACAC,MAAA1B,uBAAA0B,OACAC,UAAA3B,uBAAA2B,WACAC,cAAA5B,uBAAA4B,eACAC,SAAA7B,uBAAA6B,UACAC,WAAA9B,uBAAA8B,YA6UC,OAAAC,SAAA5B,QAtUc,MAOX6B,OAAS,CAGLC,eAAgB,sCAGhBC,eAAgB,sCAEhBC,wBAAyB,8CAEzBC,wBAAyB,wCAGzBC,MAAO,8BAIPC,wBAAyB,uCAIzBC,sBAAuB,qCAIvBC,sBAAuB,sCAW3BC,WAAAA,CAAYC,UAAWC,WACnBC,KAAKD,UAAYA,UACjBC,KAAKF,UAAYA,WAGjB,EAAAG,KAAAA,YAAW,CACP,CAACC,IAAK,cAAeC,UAAW,UAChC,CAACD,IAAK,YAAaC,UAAW,YAC/BC,MAAMC,cAAY9C,QAAC+C,WAGtBN,KAAKF,UAAUS,iBAAiB,SAAS9C,IACrC,GAAIA,EAAE+C,OAAOC,QAAQ,wCAAyC,CAC1DhD,EAAEiD,iBACYV,KAAKW,QAAQX,KAAKZ,OAAOQ,sBAAuBnC,EAAE+C,QACrDI,kBACPZ,KAAKa,qBAEZ,MAAM,GAAIpD,EAAE+C,OAAOC,QAAQ,+CAAgD,CACxEhD,EAAEiD,iBACYV,KAAKW,QAAQX,KAAKZ,OAAOM,wBAAyBjC,EAAE+C,QACvDI,kBACPZ,KAAKc,sBAAsBrD,EAAE+C,OAErC,KAGJR,KAAKF,UAAUS,iBAAiB,UAAU9C,IACtC,GAAIA,EAAE+C,OAAOC,QAAQ,QAAS,CAC1BhD,EAAEiD,iBACYV,KAAKW,QAAQX,KAAKZ,OAAOO,uBAC5BiB,kBACPZ,KAAKe,gBAEb,IAER,CASAC,IAAAA,GAAkB,IAAbC,KAAIC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,KACR,MAAMG,UAAW,EAAAC,MAAAA,WAAUL,MAAQ,CAAA,GAC7BM,eAAiB,IAAIC,SAAOjE,QAAC,8BACnC,OAAOyC,KAAKyB,QAAQJ,UACnBK,MAAMC,MAAS3B,KAAK4B,WAAWD,QAC/BD,KAAKH,eAAeM,QACzB,CAWAlB,OAAAA,CAAQmB,WACJ,MAAMrE,EAAI,IAAIsE,YAAYD,UAAW,CAACE,OADjBd,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,KACsBe,aADNf,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,KAGxC,OADAlB,KAAKF,UAAUoC,cAAczE,GACtBA,CACX,CAcA8C,gBAAAA,GACIP,KAAKF,UAAUS,oBAAiBW,UACpC,CASAO,OAAAA,CAAQU,gBACJ,OAAOC,MAAI7E,QAACkB,KAAK,CAAC,CACd4D,WAAY,yBACZpB,KAAM,CACFqB,SAAUH,eACVI,KAAMvC,KAAKD,cAEf,GACH2B,MAAKc,WACK,CAACC,KAAMD,SAASC,KAAMC,GAAIC,UAAQpF,QAACqF,2BAA2BJ,SAASK,eAEtF,CAOAC,eAAAA,CAAgBN,UACExC,KAAKW,QAAQX,KAAKZ,OAAOC,eAAgBmD,UAC7C5B,mBAQVZ,KAAKF,UAAUiD,UAAY,GAC/B,CAQAC,aAAAA,CAAc1C,WACIN,KAAKW,QAAQX,KAAKZ,OAAOK,MAAOa,WACpCM,kBAIVP,cAAAA,QAAaC,UAAUA,UAC3B,CASAQ,qBAAAA,CAAsBmC,QAClB,MAAM1B,eAAiB,IAAIC,SAAOjE,QAAC,kCAC7BgF,KAAOvC,KAAKkD,cACZ7B,SAAW,IAAI8B,gBAAgB,IAAK,IAAIC,SAASb,MAAOc,YAC9DhC,SAASiC,OAAOL,OAAOM,aAAa,QAASN,OAAOM,aAAa,UAEjE1E,WAAW2E,gCAAgCjB,MAAM,GAGjDvC,KAAKyD,iBAELzD,KAAKyB,QAAQJ,SAASqC,YACrBhC,MAAKC,MAAQ3B,KAAK4B,WAAWD,QAC7BD,KAAKH,eAAeM,SACpBzB,OAAME,WAAaN,KAAKgD,cAAc1C,YAC3C,CAOA4C,WAAAA,GACI,OAAOlD,KAAKF,UAAU6D,cAAc,OACxC,CAOAC,sBAAAA,GACI/E,WAAW2E,gCAAgCxD,KAAKkD,eAAe,GAC/DtE,kBAAkBiF,oBAAoB7D,KAAKkD,cAC/C,CAKArC,mBAAAA,GAEIb,KAAK4D,yBAES5D,KAAKW,QAAQX,KAAKZ,OAAOE,gBAC5BsB,mBAEPZ,KAAKF,UAAUiD,UAAY,GAEnC,CAUAnB,UAAAA,CAAUkC,MAAa,IAAZrB,KAACA,KAAIC,GAAEA,IAAGoB,KACjB,OAAOC,WAAAA,QAAUC,oBAAoBhE,KAAKF,UAAW2C,KAAMC,GAC/D,CAOAuB,gBAAAA,GAEIpF,WAAW2E,gCAAgCxD,KAAKkD,eAGhD,MAAMgB,QAAU,IAAIlE,KAAKF,UAAUqE,iBAAiB,kCAGpD,OAAID,QAAQ/C,SACR+C,QAAQ,GAAGE,SACJ,EAIf,CAKAX,cAAAA,GACIzD,KAAKF,UAAUqE,iBAAiB,6BAC3BE,SAAQC,IAAMA,GAAGC,aAAa,YAAY,IACnD,CAKAC,aAAAA,GACIxE,KAAKF,UAAUqE,iBAAiB,6BAC3BE,SAAQC,IAAMA,GAAGG,gBAAgB,aAC1C,CAKA,oBAAM1D,GAEF,UAAYf,KAAKiE,mBAEb,YADAjE,KAAKW,QAAQX,KAAKZ,OAAOG,wBAAyB,MAAM,GAG5DS,KAAKyD,iBAGL,MAAMlB,KAAOvC,KAAKF,UAAU6D,cAAc,QACpCtC,SAAW,IAAI8B,gBAAgB,IAAK,IAAIC,SAASb,MAAOc,YAG9DjB,MAAI7E,QAACkB,KAAK,CAAC,CACP4D,WAAY,yBACZpB,KAAM,CACFqB,SAAUjB,SAASqC,WACnBnB,KAAMvC,KAAKD,cAEf,GACH2B,MAAMc,WACH,GAAKA,SAASkC,UAKP,CAEH,MAAMC,KAAOC,KAAKC,MAAMrC,SAASmC,MACjC3E,KAAKwE,gBACLxE,KAAK4D,yBACL5D,KAAK8C,gBAAgB6B,KACzB,MATI3E,KAAK4B,WAAW,CAACa,KAAMD,SAASC,KAAMC,GAAIC,UAAQpF,QAACqF,2BAA2BJ,SAASK,cACvF7C,KAAKwE,gBACLxE,KAAKW,QAAQX,KAAKZ,OAAOI,wBAAyB,MAAM,GAQ5D,OAAO,IAAI,IAEdY,OAAME,WAAaN,KAAKgD,cAAc1C,YAC3C,GACHnB,SAAA5B,OAAA"}