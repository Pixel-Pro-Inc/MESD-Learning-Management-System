{"version":3,"file":"conditions.min.js","sources":["../../../src/local/editor/conditions.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Report builder conditions editor\n *\n * @module      core_reportbuilder/local/editor/conditions\n * @copyright   2021 Paul Holden <paulh@moodle.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n\"use strict\";\n\nimport $ from 'jquery';\nimport CustomEvents from 'core/custom_interaction_events';\nimport {dispatchEvent} from 'core/event_dispatcher';\nimport 'core/inplace_editable';\nimport Notification from 'core/notification';\nimport Pending from 'core/pending';\nimport {prefetchStrings} from 'core/prefetch';\nimport SortableList from 'core/sortable_list';\nimport {getString} from 'core/str';\nimport Templates from 'core/templates';\nimport {add as addToast} from 'core/toast';\nimport DynamicForm from 'core_form/dynamicform';\nimport * as reportEvents from 'core_reportbuilder/local/events';\nimport * as reportSelectors from 'core_reportbuilder/local/selectors';\nimport {addCondition, deleteCondition, reorderCondition, resetConditions} from 'core_reportbuilder/local/repository/conditions';\n\n/**\n * Reload conditions settings region\n *\n * @param {Element} reportElement\n * @param {Object} templateContext\n * @return {Promise}\n */\nconst reloadSettingsConditionsRegion = (reportElement, templateContext) => {\n    const pendingPromise = new Pending('core_reportbuilder/conditions:reload');\n    const settingsConditionsRegion = reportElement.querySelector(reportSelectors.regions.settingsConditions);\n\n    return Templates.renderForPromise('core_reportbuilder/local/settings/conditions', {conditions: templateContext})\n        .then(({html, js}) => {\n            const conditionsjs = $.parseHTML(templateContext.javascript, null, true).map(node => node.innerHTML).join(\"\\n\");\n            Templates.replaceNode(settingsConditionsRegion, html, js + conditionsjs);\n\n            initConditionsForm();\n\n            // Re-focus the add condition element after reloading the region.\n            const reportAddCondition = reportElement.querySelector(reportSelectors.actions.reportAddCondition);\n            reportAddCondition?.focus();\n\n            return pendingPromise.resolve();\n        });\n};\n\n/**\n * Initialise conditions form, must be called on each init because the form container is re-created when switching editor modes\n */\nconst initConditionsForm = () => {\n    CustomEvents.define(reportSelectors.actions.reportAddCondition, [CustomEvents.events.accessibleChange]);\n\n    // Handle dynamic conditions form.\n    const reportElement = document.querySelector(reportSelectors.regions.report);\n    const conditionFormContainer = reportElement.querySelector(reportSelectors.regions.settingsConditions);\n    if (!conditionFormContainer) {\n        return;\n    }\n    const conditionForm = new DynamicForm(conditionFormContainer, '\\\\core_reportbuilder\\\\form\\\\condition');\n\n    // Submit report conditions.\n    conditionForm.addEventListener(conditionForm.events.FORM_SUBMITTED, event => {\n        event.preventDefault();\n\n        getString('conditionsapplied', 'core_reportbuilder')\n            .then(addToast)\n            .catch(Notification.exception);\n\n        // After the form has been submitted, we should trigger report table reload.\n        dispatchEvent(reportEvents.tableReload, {}, reportElement);\n    });\n\n    // Reset report conditions.\n    conditionForm.addEventListener(conditionForm.events.NOSUBMIT_BUTTON_PRESSED, event => {\n        event.preventDefault();\n\n        Notification.saveCancelPromise(\n            getString('resetconditions', 'core_reportbuilder'),\n            getString('resetconditionsconfirm', 'core_reportbuilder'),\n            getString('resetall', 'core_reportbuilder'),\n            {triggerElement: event.detail}\n        ).then(() => {\n            const pendingPromise = new Pending('core_reportbuilder/conditions:reset');\n\n            return resetConditions(reportElement.dataset.reportId)\n                .then(data => reloadSettingsConditionsRegion(reportElement, data))\n                .then(() => addToast(getString('conditionsreset', 'core_reportbuilder')))\n                .then(() => {\n                    dispatchEvent(reportEvents.tableReload, {}, reportElement);\n                    return pendingPromise.resolve();\n                })\n                .catch(Notification.exception);\n        }).catch(() => {\n            return;\n        });\n    });\n};\n\n/**\n * Initialise module, prefetch all required strings\n *\n * @param {Boolean} initialized Ensure we only add our listeners once\n */\nexport const init = initialized => {\n    prefetchStrings('core_reportbuilder', [\n        'conditionadded',\n        'conditiondeleted',\n        'conditionmoved',\n        'conditionsapplied',\n        'conditionsreset',\n        'deletecondition',\n        'deleteconditionconfirm',\n        'resetall',\n        'resetconditions',\n        'resetconditionsconfirm',\n    ]);\n\n    prefetchStrings('core', [\n        'delete',\n    ]);\n\n    initConditionsForm();\n    if (initialized) {\n        return;\n    }\n\n    // Add condition to report. Use custom events helper to ensure consistency across platforms.\n    $(document).on(CustomEvents.events.accessibleChange, reportSelectors.actions.reportAddCondition, event => {\n        const reportAddCondition = event.target.closest(reportSelectors.actions.reportAddCondition);\n        if (reportAddCondition) {\n            event.preventDefault();\n\n            // Check if dropdown is closed with no condition selected.\n            if (reportAddCondition.selectedIndex === 0) {\n                return;\n            }\n\n            const reportElement = reportAddCondition.closest(reportSelectors.regions.report);\n            const pendingPromise = new Pending('core_reportbuilder/conditions:add');\n\n            addCondition(reportElement.dataset.reportId, reportAddCondition.value)\n                .then(data => reloadSettingsConditionsRegion(reportElement, data))\n                .then(() => getString('conditionadded', 'core_reportbuilder',\n                    reportAddCondition.options[reportAddCondition.selectedIndex].text))\n                .then(addToast)\n                .then(() => {\n                    dispatchEvent(reportEvents.tableReload, {}, reportElement);\n                    return pendingPromise.resolve();\n                })\n                .catch(Notification.exception);\n        }\n    });\n\n    document.addEventListener('click', event => {\n\n        // Remove condition from report.\n        const reportRemoveCondition = event.target.closest(reportSelectors.actions.reportRemoveCondition);\n        if (reportRemoveCondition) {\n            event.preventDefault();\n\n            const reportElement = reportRemoveCondition.closest(reportSelectors.regions.report);\n            const conditionContainer = reportRemoveCondition.closest(reportSelectors.regions.activeCondition);\n            const conditionName = conditionContainer.dataset.conditionName;\n\n            Notification.saveCancelPromise(\n                getString('deletecondition', 'core_reportbuilder', conditionName),\n                getString('deleteconditionconfirm', 'core_reportbuilder', conditionName),\n                getString('delete', 'core'),\n                {triggerElement: reportRemoveCondition}\n            ).then(() => {\n                const pendingPromise = new Pending('core_reportbuilder/conditions:remove');\n\n                return deleteCondition(reportElement.dataset.reportId, conditionContainer.dataset.conditionId)\n                    .then(data => reloadSettingsConditionsRegion(reportElement, data))\n                    .then(() => addToast(getString('conditiondeleted', 'core_reportbuilder', conditionName)))\n                    .then(() => {\n                        dispatchEvent(reportEvents.tableReload, {}, reportElement);\n                        return pendingPromise.resolve();\n                    })\n                    .catch(Notification.exception);\n            }).catch(() => {\n                return;\n            });\n        }\n    });\n\n    // Initialize sortable list to handle active conditions moving (note JQuery dependency, see MDL-72293 for resolution).\n    var activeConditionsSortableList = new SortableList(`${reportSelectors.regions.activeConditions}`,\n        {isHorizontal: false});\n    activeConditionsSortableList.getElementName = element => Promise.resolve(element.data('conditionName'));\n\n    $(document).on(SortableList.EVENTS.DROP, reportSelectors.regions.activeCondition, (event, info) => {\n        if (info.positionChanged) {\n            const pendingPromise = new Pending('core_reportbuilder/conditions:reorder');\n            const reportElement = event.target.closest(reportSelectors.regions.report);\n            const conditionId = info.element.data('conditionId');\n            const conditionPosition = info.element.data('conditionPosition');\n\n            // Select target position, if moving to the end then count number of element siblings.\n            let targetConditionPosition = info.targetNextElement.data('conditionPosition') || info.element.siblings().length + 2;\n            if (targetConditionPosition > conditionPosition) {\n                targetConditionPosition--;\n            }\n\n            reorderCondition(reportElement.dataset.reportId, conditionId, targetConditionPosition)\n                .then(data => reloadSettingsConditionsRegion(reportElement, data))\n                .then(() => getString('conditionmoved', 'core_reportbuilder', info.element.data('conditionName')))\n                .then(addToast)\n                .then(() => {\n                    dispatchEvent(reportEvents.tableReload, {}, reportElement);\n                    return pendingPromise.resolve();\n                })\n                .catch(Notification.exception);\n        }\n    });\n};\n"],"names":["_getRequireWildcardCache","e","WeakMap","r","t","_interopRequireWildcard","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","_interopRequireDefault","obj","_exports","value","init","_jquery","_custom_interaction_events","_notification","_pending","_sortable_list","_templates","_dynamicform","reportEvents","reportSelectors","reloadSettingsConditionsRegion","reportElement","templateContext","pendingPromise","Pending","settingsConditionsRegion","querySelector","regions","settingsConditions","Templates","renderForPromise","conditions","then","_ref","html","js","conditionsjs","$","parseHTML","javascript","map","node","innerHTML","join","replaceNode","initConditionsForm","reportAddCondition","actions","focus","resolve","CustomEvents","define","events","accessibleChange","document","report","conditionFormContainer","conditionForm","DynamicForm","addEventListener","FORM_SUBMITTED","event","preventDefault","getString","addToast","catch","Notification","exception","dispatchEvent","tableReload","NOSUBMIT_BUTTON_PRESSED","saveCancelPromise","triggerElement","detail","resetConditions","dataset","reportId","data","add","initialized","prefetchStrings","on","target","closest","selectedIndex","addCondition","options","text","reportRemoveCondition","conditionContainer","activeCondition","conditionName","deleteCondition","conditionId","SortableList","activeConditions","isHorizontal","getElementName","element","Promise","EVENTS","DROP","info","positionChanged","conditionPosition","targetConditionPosition","targetNextElement","siblings","length","reorderCondition"],"mappings":"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"}