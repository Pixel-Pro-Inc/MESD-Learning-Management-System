{"version":3,"file":"repository.min.js","sources":["../src/repository.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Module to handle AJAX interactions.\n *\n * @module     core_user/repository\n * @copyright  2020 Andrew Nicols <andrew@nicols.co.uk>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {call as fetchMany} from 'core/ajax';\n\n/**\n * Get single user preference\n *\n * @param {String} name Name of the preference\n * @param {Number} userid User ID (defaults to current user)\n * @return {Promise}\n */\nexport const getUserPreference = (name, userid = 0) => {\n    return getUserPreferences(name, userid)\n        .then(response => response.preferences[0].value);\n};\n\n/**\n * Get multiple user preferences\n *\n * @param {String|null} name Name of the preference (omit if you want to retrieve all)\n * @param {Number} userid User ID (defaults to current user)\n * @return {Promise}\n */\nexport const getUserPreferences = (name = null, userid = 0) => {\n    return fetchMany([{\n        methodname: 'core_user_get_user_preferences',\n        args: {name, userid}\n    }])[0];\n};\n\n/**\n * Set single user preference\n *\n * @param {String} name Name of the preference\n * @param {String|null} value Value of the preference (omit if you want to remove the current value)\n * @param {Number} userid User ID (defaults to current user)\n * @return {Promise}\n */\nexport const setUserPreference = (name, value = null, userid = 0) => {\n    return setUserPreferences([{name, value, userid}]);\n};\n\n/**\n * Set multiple user preferences\n *\n * @param {Object[]} preferences Array of preferences containing name/value/userid attributes\n * @return {Promise}\n */\nexport const setUserPreferences = (preferences) => {\n    return fetchMany([{\n        methodname: 'core_user_set_user_preferences',\n        args: {preferences}\n    }])[0];\n};\n\n/**\n * Unenrol the user with the specified user enrolmentid ID.\n *\n * @param {Number} userEnrolmentId\n * @return {Promise}\n */\nexport const unenrolUser = userEnrolmentId => {\n    return fetchMany([{\n        methodname: 'core_enrol_unenrol_user_enrolment',\n        args: {\n            ueid: userEnrolmentId,\n        },\n    }])[0];\n};\n\n/**\n * Submit the user enrolment form with the specified form data.\n *\n * @param {String} formdata\n * @return {Promise}\n */\nexport const submitUserEnrolmentForm = formdata => {\n    return fetchMany([{\n        methodname: 'core_enrol_submit_user_enrolment_form',\n        args: {\n            formdata,\n        },\n    }])[0];\n};\n\nexport const createNotesForUsers = notes => {\n    return fetchMany([{\n        methodname: 'core_notes_create_notes',\n        args: {\n            notes\n        }\n    }])[0];\n};\n\nexport const sendMessagesToUsers = messages => {\n    return fetchMany([{\n        methodname: 'core_message_send_instant_messages',\n        args: {messages}\n    }])[0];\n};\n"],"names":["_exports","getUserPreference","name","getUserPreferences","arguments","length","undefined","then","response","preferences","value","userid","fetchMany","call","methodname","args","setUserPreference","setUserPreferences","unenrolUser","userEnrolmentId","ueid","submitUserEnrolmentForm","formdata","createNotesForUsers","notes","sendMessagesToUsers","messages"],"mappings":"6WAmCEA,SAAAC,kBAH+B,SAACC,MAC9B,OAAOC,mBAAmBD,KADgBE,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GAExCG,MAAKC,UAAYA,SAASC,YAAY,GAAGC,SAU3C,MAAMP,mBAAqB,WAA6B,IAA5BD,KAAIE,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,KAAMO,OAAMP,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,EACrD,OAAO,EAAAQ,MAASC,MAAC,CAAC,CACdC,WAAY,iCACZC,KAAM,CAACb,UAAMS,kBACb,IACNX,SAAAG,mBAAAA,mBAYAH,SAAAgB,kBAF+B,SAACd,MAC9B,OAAOe,mBAAmB,CAAC,CAACf,UAAMQ,MADON,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,KACHO,OADeP,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,MAUxD,MAAMa,mBAAsBR,cACxB,EAAAG,MAASC,MAAC,CAAC,CACdC,WAAY,iCACZC,KAAM,CAACN,4BACP,GACNT,SAAAiB,mBAAAA,mBAeAjB,SAAAkB,YAPyBC,kBAChB,EAAAP,MAASC,MAAC,CAAC,CACdC,WAAY,oCACZC,KAAM,CACFK,KAAMD,oBAEV,GAgBNnB,SAAAqB,wBAPqCC,WAC5B,EAAAV,MAASC,MAAC,CAAC,CACdC,WAAY,wCACZC,KAAM,CACFO,sBAEJ,GAUNtB,SAAAuB,oBAPiCC,QACxB,EAAAZ,MAASC,MAAC,CAAC,CACdC,WAAY,0BACZC,KAAM,CACFS,gBAEJ,GAQNxB,SAAAyB,oBALiCC,WACxB,EAAAd,MAASC,MAAC,CAAC,CACdC,WAAY,qCACZC,KAAM,CAACW,sBACP,EACN"}