{"version":3,"file":"question_text_format.min.js","sources":["../src/question_text_format.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript for question_text_format question bank control.\n *\n * @module     qbank_viewquestiontext/question_text_format\n * @copyright  2023 Catalyst IT Europe Ltd.\n * @author     Mark Johnson <mark.johnson@catalyst-eu.net>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport * as repository from 'qbank_viewquestiontext/repository';\nimport RefreshUi from 'core_question/refresh_ui';\nimport Notification from 'core/notification';\n\nconst SELECTORS = {\n    formatSelectId: 'question-text-format',\n    returnUrl: '[name=returnurl]',\n};\n\nlet uiRoot;\n\n/**\n * Save the selected format via a web service call, and refresh the UI.\n *\n * @param {Event} e Select field change event.\n * @return {Promise<void>}\n */\nconst handleFormatChange = async(e) => {\n    const value = e.target.value;\n    try {\n        await repository.setQuestionTextFormat(value);\n        const returnUrlInput = e.target.closest('form').querySelector(SELECTORS.returnUrl);\n        const returnUrl = new URL(returnUrlInput.value);\n        await RefreshUi.refresh(uiRoot, returnUrl);\n    } catch (ex) {\n        Notification.exception(ex);\n    }\n};\n\n/**\n * Initialise question text format widget.\n *\n * Find the uiRoot element and attach a change listener to the question text format selector.\n *\n * @param {String} uiRootId\n */\nexport const init = (uiRootId) => {\n    uiRoot = document.getElementById(uiRootId);\n    const select = document.getElementById(SELECTORS.formatSelectId);\n    select.addEventListener('change', handleFormatChange);\n};\n"],"names":["_interopRequireDefault","obj","__esModule","default","_getRequireWildcardCache","e","WeakMap","r","t","repository","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","_interopRequireWildcard","_refresh_ui","_notification","SELECTORS","uiRoot","handleFormatChange","async","value","target","setQuestionTextFormat","returnUrlInput","closest","querySelector","returnUrl","URL","RefreshUi","refresh","ex","Notification","exception","_exports","init","uiRootId","document","getElementById","addEventListener"],"mappings":"6MA0B6C,SAAAA,uBAAAC,KAAAA,OAAAA,KAAAA,IAAAC,WAAAD,IAAAE,CAAAA,QAAAF,IAAA,CAAA,SAAAG,yBAAAC,GAAA,GAAA,mBAAAC,QAAA,OAAA,KAAA,IAAAC,EAAAD,IAAAA,QAAAE,EAAAF,IAAAA,eAAAF,yBAAA,SAAAC,GAAAA,OAAAA,EAAAG,EAAAD,IAAAF,EAAA,8EAF7CI,WAE6C,SAAAJ,EAAAE,GAAAA,IAAAA,GAAAF,GAAAA,EAAAH,kBAAAG,EAAA,GAAA,OAAAA,GAAA,iBAAAA,GAAA,mBAAAA,EAAA,MAAA,CAAAF,QAAAE,GAAA,IAAAG,EAAAJ,yBAAAG,GAAAC,GAAAA,GAAAA,EAAAE,IAAAL,GAAAG,OAAAA,EAAAG,IAAAN,GAAAO,IAAAA,GAAAC,UAAA,MAAAC,EAAAC,OAAAC,gBAAAD,OAAAE,yBAAA,IAAA,IAAAC,KAAAb,EAAA,GAAA,YAAAa,GAAAH,OAAAI,UAAAC,eAAAC,KAAAhB,EAAAa,GAAAI,CAAAA,IAAAA,EAAAR,EAAAC,OAAAE,yBAAAZ,EAAAa,GAAA,KAAAI,IAAAA,EAAAX,KAAAW,EAAAC,KAAAR,OAAAC,eAAAJ,EAAAM,EAAAI,GAAAV,EAAAM,GAAAb,EAAAa,EAAA,CAAA,OAAAN,EAAAT,QAAAE,EAAAG,GAAAA,EAAAe,IAAAlB,EAAAO,GAAAA;;;;;;;;KAAA,CAF7CY,CAAAf,YACAgB,YAAAzB,uBAAAyB,aACAC,cAAA1B,uBAAA0B,eAEA,MAAMC,yBACc,uBADdA,oBAES,mBAGf,IAAIC,OAQJ,MAAMC,mBAAqBC,UACvB,MAAMC,MAAQ1B,EAAE2B,OAAOD,MACvB,UACUtB,WAAWwB,sBAAsBF,OACvC,MAAMG,eAAiB7B,EAAE2B,OAAOG,QAAQ,QAAQC,cAAcT,qBACxDU,UAAY,IAAIC,IAAIJ,eAAeH,aACnCQ,oBAAUC,QAAQZ,OAAQS,UACnC,CAAC,MAAOI,IACLC,cAAAA,QAAaC,UAAUF,GAC3B,GAcFG,SAAAC,KAJmBC,WACjBlB,OAASmB,SAASC,eAAeF,UAClBC,SAASC,eAAerB,0BAChCsB,iBAAiB,SAAUpB,mBAAmB,CACvD"}