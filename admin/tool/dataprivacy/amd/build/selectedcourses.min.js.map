{"version":3,"file":"selectedcourses.min.js","sources":["../src/selectedcourses.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle. If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Selected courses.\n *\n * @module     tool_dataprivacy/selectedcourses\n * @copyright  2021 The Open University\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @since      Moodle 4.3\n */\n\nimport Ajax from 'core/ajax';\nimport Notification from 'core/notification';\nimport ModalSaveCancel from 'core/modal_save_cancel';\nimport ModalEvents from 'core/modal_events';\nimport Fragment from 'core/fragment';\nimport {prefetchStrings} from 'core/prefetch';\nimport {getString} from 'core/str';\n\nprefetchStrings('tool_dataprivacy', [\n    'selectcourses',\n    'approverequest',\n    'errornoselectedcourse',\n]);\n\n/**\n * Selected Courses popup modal.\n *\n */\nexport default class SelectedCourses {\n    /**\n     * @var {String} contextId Context ID to load the fragment.\n     * @private\n     */\n    contextId = 0;\n\n    /**\n     * @var {String} requestId ID of data export request.\n     * @private\n     */\n    requestId = 0;\n\n    /**\n     * Constructor\n     *\n     * @param {String} contextId Context ID to load the fragment.\n     * @param {String} requestId ID of data export request.\n     */\n    constructor(contextId, requestId) {\n        this.contextId = contextId;\n        this.requestId = requestId;\n        // Now create the modal.\n        ModalSaveCancel.create({\n            title: getString('selectcourses', 'tool_dataprivacy'),\n            body: this.getBody({requestid: requestId}),\n            large: true,\n            removeOnClose: true,\n            buttons: {\n                save: getString('approverequest', 'tool_dataprivacy'),\n            },\n        }).then((modal) => {\n            this.modal = modal;\n\n            return modal;\n        }).then((modal) => {\n            // We catch the modal save event, and use it to submit the form inside the modal.\n            // Triggering a form submission will give JS validation scripts a chance to check for errors.\n            modal.getRoot().on(ModalEvents.save, this.submitForm.bind(this));\n\n            // We also catch the form submit event and use it to submit the form with ajax.\n            modal.getRoot().on('submit', 'form', this.submitFormAjax.bind(this));\n            modal.show();\n            return modal;\n        }).catch(Notification.exception);\n    }\n\n    /**\n     * Get body of modal.\n     *\n     * @method getBody\n     * @param {Object} formdata\n     * @private\n     * @return {Promise}\n     */\n    getBody(formdata) {\n        const params = formdata ? {jsonformdata: JSON.stringify(formdata)} : null;\n\n        // Get the content of the modal.\n        return Fragment.loadFragment('tool_dataprivacy', 'selectcourses_form', this.contextId, params);\n    }\n\n    /**\n     * This triggers a form submission, so that any mform elements can do final tricks before the form submission is processed.\n     *\n     * @method submitForm\n     * @param {Event} e Form submission event.\n     * @private\n     */\n    submitForm(e) {\n        e.preventDefault();\n        this.modal.getRoot().find('form').submit();\n    }\n\n    /**\n     * Submit select courses form using ajax.\n     *\n     * @method submitFormAjax\n     * @private\n     * @param {Event} e Form submission event.\n     */\n    submitFormAjax(e) {\n        e.preventDefault();\n\n        // Convert all the form elements values to a serialised string.\n        let formData = this.modal.getRoot().find('form').serialize();\n\n        if (formData.indexOf('coursecontextids') === -1) {\n            const customSelect = this.modal.getRoot().find('.custom-select');\n            const invalidText = this.modal.getRoot().find('.invalid-feedback');\n            customSelect.addClass('is-invalid');\n            invalidText.attr('style', 'display: block');\n            getString('errornoselectedcourse', 'tool_dataprivacy').then(value => {\n                invalidText.empty().append(value);\n                return;\n            }).catch(Notification.exception);\n            return;\n        }\n\n        Ajax.call([{\n            methodname: 'tool_dataprivacy_submit_selected_courses_form',\n            args: {requestid: this.requestId, jsonformdata: JSON.stringify(formData)},\n        }])[0]\n        .then((data) => {\n            if (data.warnings.length > 0) {\n                this.modal.setBody(this.getBody(formData));\n            } else {\n                this.modal.destroy();\n                document.location.reload();\n            }\n            return data;\n        })\n        .catch((error) => Notification.exception(error));\n    }\n}\n"],"names":["_interopRequireDefault","obj","__esModule","default","_ajax","_notification","_modal_save_cancel","_modal_events","_fragment","prefetchStrings","_exports","contextId","requestId","constructor","this","ModalSaveCancel","create","title","getString","body","getBody","requestid","large","removeOnClose","buttons","save","then","modal","getRoot","on","ModalEvents","submitForm","bind","submitFormAjax","show","catch","Notification","exception","formdata","params","jsonformdata","JSON","stringify","Fragment","loadFragment","e","preventDefault","find","submit","formData","serialize","indexOf","customSelect","invalidText","addClass","attr","value","empty","append","Ajax","call","methodname","args","data","warnings","length","setBody","destroy","document","location","reload","error"],"mappings":"gRA4BqC,SAAAA,uBAAAC,KAAAA,OAAAA,KAAAA,IAAAC,WAAAD,IAAAE,CAAAA,QAAAF,IAAA;;;;;;;;qFAJrCG,MAAAJ,uBAAAI,OACAC,cAAAL,uBAAAK,eACAC,mBAAAN,uBAAAM,oBACAC,cAAAP,uBAAAO,eACAC,UAAAR,uBAAAQ,YAIA,EAAAC,UAAAA,iBAAgB,mBAAoB,CAChC,gBACA,iBACA,0BAyHH,OAAAC,SAAAP,QAlHc,MAKXQ,UAAY,EAMZC,UAAY,EAQZC,WAAAA,CAAYF,UAAWC,WACnBE,KAAKH,UAAYA,UACjBG,KAAKF,UAAYA,UAEjBG,mBAAeZ,QAACa,OAAO,CACnBC,OAAO,EAAAC,KAAAA,WAAU,gBAAiB,oBAClCC,KAAML,KAAKM,QAAQ,CAACC,UAAWT,YAC/BU,OAAO,EACPC,eAAe,EACfC,QAAS,CACLC,MAAM,EAAAP,KAAAA,WAAU,iBAAkB,uBAEvCQ,MAAMC,QACLb,KAAKa,MAAQA,MAENA,SACRD,MAAMC,QAGLA,MAAMC,UAAUC,GAAGC,cAAW3B,QAACsB,KAAMX,KAAKiB,WAAWC,KAAKlB,OAG1Da,MAAMC,UAAUC,GAAG,SAAU,OAAQf,KAAKmB,eAAeD,KAAKlB,OAC9Da,MAAMO,OACCP,SACRQ,MAAMC,cAAYjC,QAACkC,UAC1B,CAUAjB,OAAAA,CAAQkB,UACJ,MAAMC,OAASD,SAAW,CAACE,aAAcC,KAAKC,UAAUJ,WAAa,KAGrE,OAAOK,UAAQxC,QAACyC,aAAa,mBAAoB,qBAAsB9B,KAAKH,UAAW4B,OAC3F,CASAR,UAAAA,CAAWc,GACPA,EAAEC,iBACFhC,KAAKa,MAAMC,UAAUmB,KAAK,QAAQC,QACtC,CASAf,cAAAA,CAAeY,GACXA,EAAEC,iBAGF,IAAIG,SAAWnC,KAAKa,MAAMC,UAAUmB,KAAK,QAAQG,YAEjD,IAA8C,IAA1CD,SAASE,QAAQ,oBAA4B,CAC7C,MAAMC,aAAetC,KAAKa,MAAMC,UAAUmB,KAAK,kBACzCM,YAAcvC,KAAKa,MAAMC,UAAUmB,KAAK,qBAO9C,OANAK,aAAaE,SAAS,cACtBD,YAAYE,KAAK,QAAS,uBAC1B,EAAArC,KAAAA,WAAU,wBAAyB,oBAAoBQ,MAAK8B,QACxDH,YAAYI,QAAQC,OAAOF,MAC3B,IACDrB,MAAMC,cAAYjC,QAACkC,UAE1B,CAEAsB,MAAIxD,QAACyD,KAAK,CAAC,CACPC,WAAY,gDACZC,KAAM,CAACzC,UAAWP,KAAKF,UAAW4B,aAAcC,KAAKC,UAAUO,cAC/D,GACHvB,MAAMqC,OACCA,KAAKC,SAASC,OAAS,EACvBnD,KAAKa,MAAMuC,QAAQpD,KAAKM,QAAQ6B,YAEhCnC,KAAKa,MAAMwC,UACXC,SAASC,SAASC,UAEfP,QAEV5B,OAAOoC,OAAUnC,cAAYjC,QAACkC,UAAUkC,QAC7C,GACH7D,SAAAP,OAAA"}