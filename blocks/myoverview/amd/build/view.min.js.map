{"version":3,"file":"view.min.js","sources":["../src/view.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle. If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Manage the courses view for the overview block.\n *\n * @copyright  2018 Bas Brands <bas@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport $ from 'jquery';\nimport * as Repository from 'block_myoverview/repository';\nimport * as PagedContentFactory from 'core/paged_content_factory';\nimport * as PubSub from 'core/pubsub';\nimport * as CustomEvents from 'core/custom_interaction_events';\nimport * as Notification from 'core/notification';\nimport * as Templates from 'core/templates';\nimport * as CourseEvents from 'core_course/events';\nimport SELECTORS from 'block_myoverview/selectors';\nimport * as PagedContentEvents from 'core/paged_content_events';\nimport * as Aria from 'core/aria';\nimport {debounce} from 'core/utils';\nimport {setUserPreference} from 'core_user/repository';\n\nconst TEMPLATES = {\n    COURSES_CARDS: 'block_myoverview/view-cards',\n    COURSES_LIST: 'block_myoverview/view-list',\n    COURSES_SUMMARY: 'block_myoverview/view-summary',\n    NOCOURSES: 'core_course/no-courses'\n};\n\nconst GROUPINGS = {\n    GROUPING_ALLINCLUDINGHIDDEN: 'allincludinghidden',\n    GROUPING_ALL: 'all',\n    GROUPING_INPROGRESS: 'inprogress',\n    GROUPING_FUTURE: 'future',\n    GROUPING_PAST: 'past',\n    GROUPING_FAVOURITES: 'favourites',\n    GROUPING_HIDDEN: 'hidden'\n};\n\nconst NUMCOURSES_PERPAGE = [12, 24, 48, 96, 0];\n\nlet loadedPages = [];\n\nlet courseOffset = 0;\n\nlet lastPage = 0;\n\nlet lastLimit = 0;\n\nlet namespace = null;\n\n/**\n * Get filter values from DOM.\n *\n * @param {object} root The root element for the courses view.\n * @return {filters} Set filters.\n */\nconst getFilterValues = root => {\n    const courseRegion = root.find(SELECTORS.courseView.region);\n    return {\n        display: courseRegion.attr('data-display'),\n        grouping: courseRegion.attr('data-grouping'),\n        sort: courseRegion.attr('data-sort'),\n        displaycategories: courseRegion.attr('data-displaycategories'),\n        customfieldname: courseRegion.attr('data-customfieldname'),\n        customfieldvalue: courseRegion.attr('data-customfieldvalue'),\n    };\n};\n\n// We want the paged content controls below the paged content area.\n// and the controls should be ignored while data is loading.\nconst DEFAULT_PAGED_CONTENT_CONFIG = {\n    ignoreControlWhileLoading: true,\n    controlPlacementBottom: true,\n    persistentLimitKey: 'block_myoverview_user_paging_preference'\n};\n\n/**\n * Get enrolled courses from backend.\n *\n * @param {object} filters The filters for this view.\n * @param {int} limit The number of courses to show.\n * @return {promise} Resolved with an array of courses.\n */\nconst getMyCourses = (filters, limit) => {\n    return Repository.getEnrolledCoursesByTimeline({\n        offset: courseOffset,\n        limit: limit,\n        classification: filters.grouping,\n        sort: filters.sort,\n        customfieldname: filters.customfieldname,\n        customfieldvalue: filters.customfieldvalue\n    });\n};\n\n/**\n * Search for enrolled courses from backend.\n *\n * @param {object} filters The filters for this view.\n * @param {int} limit The number of courses to show.\n * @param {string} searchValue What does the user want to search within their courses.\n * @return {promise} Resolved with an array of courses.\n */\nconst getSearchMyCourses = (filters, limit, searchValue) => {\n    return Repository.getEnrolledCoursesByTimeline({\n        offset: courseOffset,\n        limit: limit,\n        classification: 'search',\n        sort: filters.sort,\n        customfieldname: filters.customfieldname,\n        customfieldvalue: filters.customfieldvalue,\n        searchvalue: searchValue\n    });\n};\n\n/**\n * Get the container element for the favourite icon.\n *\n * @param {Object} root The course overview container\n * @param {Number} courseId Course id number\n * @return {Object} The favourite icon container\n */\nconst getFavouriteIconContainer = (root, courseId) => {\n    return root.find(SELECTORS.FAVOURITE_ICON + '[data-course-id=\"' + courseId + '\"]');\n};\n\n/**\n * Get the paged content container element.\n *\n * @param {Object} root The course overview container\n * @param {Number} index Rendered page index.\n * @return {Object} The rendered paged container.\n */\nconst getPagedContentContainer = (root, index) => {\n    return root.find('[data-region=\"paged-content-page\"][data-page=\"' + index + '\"]');\n};\n\n/**\n * Get the course id from a favourite element.\n *\n * @param {Object} root The favourite icon container element.\n * @return {Number} Course id.\n */\nconst getCourseId = root => {\n    return root.attr('data-course-id');\n};\n\n/**\n * Hide the favourite icon.\n *\n * @param {Object} root The favourite icon container element.\n * @param {Number} courseId Course id number.\n */\nconst hideFavouriteIcon = (root, courseId) => {\n    const iconContainer = getFavouriteIconContainer(root, courseId);\n\n    const isFavouriteIcon = iconContainer.find(SELECTORS.ICON_IS_FAVOURITE);\n    isFavouriteIcon.addClass('hidden');\n    Aria.hide(isFavouriteIcon);\n\n    const notFavourteIcon = iconContainer.find(SELECTORS.ICON_NOT_FAVOURITE);\n    notFavourteIcon.removeClass('hidden');\n    Aria.unhide(notFavourteIcon);\n};\n\n/**\n * Show the favourite icon.\n *\n * @param {Object} root The course overview container.\n * @param {Number} courseId Course id number.\n */\nconst showFavouriteIcon = (root, courseId) => {\n    const iconContainer = getFavouriteIconContainer(root, courseId);\n\n    const isFavouriteIcon = iconContainer.find(SELECTORS.ICON_IS_FAVOURITE);\n    isFavouriteIcon.removeClass('hidden');\n    Aria.unhide(isFavouriteIcon);\n\n    const notFavourteIcon = iconContainer.find(SELECTORS.ICON_NOT_FAVOURITE);\n    notFavourteIcon.addClass('hidden');\n    Aria.hide(notFavourteIcon);\n};\n\n/**\n * Get the action menu item\n *\n * @param {Object} root The course overview container\n * @param {Number} courseId Course id.\n * @return {Object} The add to favourite menu item.\n */\nconst getAddFavouriteMenuItem = (root, courseId) => {\n    return root.find('[data-action=\"add-favourite\"][data-course-id=\"' + courseId + '\"]');\n};\n\n/**\n * Get the action menu item\n *\n * @param {Object} root The course overview container\n * @param {Number} courseId Course id.\n * @return {Object} The remove from favourites menu item.\n */\nconst getRemoveFavouriteMenuItem = (root, courseId) => {\n    return root.find('[data-action=\"remove-favourite\"][data-course-id=\"' + courseId + '\"]');\n};\n\n/**\n * Add course to favourites\n *\n * @param {Object} root The course overview container\n * @param {Number} courseId Course id number\n */\nconst addToFavourites = (root, courseId) => {\n    const removeAction = getRemoveFavouriteMenuItem(root, courseId);\n    const addAction = getAddFavouriteMenuItem(root, courseId);\n\n    setCourseFavouriteState(courseId, true).then(success => {\n        if (success) {\n            PubSub.publish(CourseEvents.favourited, courseId);\n            removeAction.removeClass('hidden');\n            addAction.addClass('hidden');\n            showFavouriteIcon(root, courseId);\n        } else {\n            Notification.alert('Starring course failed', 'Could not change favourite state');\n        }\n        return;\n    }).catch(Notification.exception);\n};\n\n/**\n * Remove course from favourites\n *\n * @param {Object} root The course overview container\n * @param {Number} courseId Course id number\n */\nconst removeFromFavourites = (root, courseId) => {\n    const removeAction = getRemoveFavouriteMenuItem(root, courseId);\n    const addAction = getAddFavouriteMenuItem(root, courseId);\n\n    setCourseFavouriteState(courseId, false).then(success => {\n        if (success) {\n            PubSub.publish(CourseEvents.unfavorited, courseId);\n            removeAction.addClass('hidden');\n            addAction.removeClass('hidden');\n            hideFavouriteIcon(root, courseId);\n        } else {\n            Notification.alert('Starring course failed', 'Could not change favourite state');\n        }\n        return;\n    }).catch(Notification.exception);\n};\n\n/**\n * Get the action menu item\n *\n * @param {Object} root The course overview container\n * @param {Number} courseId Course id.\n * @return {Object} The hide course menu item.\n */\nconst getHideCourseMenuItem = (root, courseId) => {\n    return root.find('[data-action=\"hide-course\"][data-course-id=\"' + courseId + '\"]');\n};\n\n/**\n * Get the action menu item\n *\n * @param {Object} root The course overview container\n * @param {Number} courseId Course id.\n * @return {Object} The show course menu item.\n */\nconst getShowCourseMenuItem = (root, courseId) => {\n    return root.find('[data-action=\"show-course\"][data-course-id=\"' + courseId + '\"]');\n};\n\n/**\n * Hide course\n *\n * @param {Object} root The course overview container\n * @param {Number} courseId Course id number\n */\nconst hideCourse = (root, courseId) => {\n    const hideAction = getHideCourseMenuItem(root, courseId);\n    const showAction = getShowCourseMenuItem(root, courseId);\n    const filters = getFilterValues(root);\n\n    setCourseHiddenState(courseId, true);\n\n    // Remove the course from this view as it is now hidden and thus not covered by this view anymore.\n    // Do only if we are not in \"All (including archived)\" view mode where really all courses are shown.\n    if (filters.grouping !== GROUPINGS.GROUPING_ALLINCLUDINGHIDDEN) {\n        hideElement(root, courseId);\n    }\n\n    hideAction.addClass('hidden');\n    showAction.removeClass('hidden');\n};\n\n/**\n * Show course\n *\n * @param {Object} root The course overview container\n * @param {Number} courseId Course id number\n */\nconst showCourse = (root, courseId) => {\n    const hideAction = getHideCourseMenuItem(root, courseId);\n    const showAction = getShowCourseMenuItem(root, courseId);\n    const filters = getFilterValues(root);\n\n    setCourseHiddenState(courseId, null);\n\n    // Remove the course from this view as it is now shown again and thus not covered by this view anymore.\n    // Do only if we are not in \"All (including archived)\" view mode where really all courses are shown.\n    if (filters.grouping !== GROUPINGS.GROUPING_ALLINCLUDINGHIDDEN) {\n        hideElement(root, courseId);\n    }\n\n    hideAction.removeClass('hidden');\n    showAction.addClass('hidden');\n};\n\n/**\n * Set the courses hidden status and push to repository\n *\n * @param {Number} courseId Course id to favourite.\n * @param {Boolean} status new hidden status.\n * @return {Promise} Repository promise.\n */\nconst setCourseHiddenState = (courseId, status) => {\n\n    // If the given status is not hidden, the preference has to be deleted with a null value.\n    if (status === false) {\n        status = null;\n    }\n\n    return setUserPreference(`block_myoverview_hidden_course_${courseId}`, status)\n        .catch(Notification.exception);\n};\n\n/**\n * Reset the loadedPages dataset to take into account the hidden element\n *\n * @param {Object} root The course overview container\n * @param {Number} id The course id number\n */\nconst hideElement = (root, id) => {\n    const pagingBar = root.find('[data-region=\"paging-bar\"]');\n    const jumpto = parseInt(pagingBar.attr('data-active-page-number'));\n\n    // Get a reduced dataset for the current page.\n    const courseList = loadedPages[jumpto];\n    let reducedCourse = courseList.courses.reduce((accumulator, current) => {\n        if (+id !== +current.id) {\n            accumulator.push(current);\n        }\n        return accumulator;\n    }, []);\n\n    // Get the next page's data if loaded and pop the first element from it.\n    if (typeof (loadedPages[jumpto + 1]) !== 'undefined') {\n        const newElement = loadedPages[jumpto + 1].courses.slice(0, 1);\n\n        // Adjust the dataset for the reset of the pages that are loaded.\n        loadedPages.forEach((courseList, index) => {\n            if (index > jumpto) {\n                let popElement = [];\n                if (typeof (loadedPages[index + 1]) !== 'undefined') {\n                    popElement = loadedPages[index + 1].courses.slice(0, 1);\n                }\n                loadedPages[index].courses = [...loadedPages[index].courses.slice(1), ...popElement];\n            }\n        });\n\n        reducedCourse = [...reducedCourse, ...newElement];\n    }\n\n    // Check if the next page is the last page and if it still has data associated to it.\n    if (lastPage === jumpto + 1 && loadedPages[jumpto + 1].courses.length === 0) {\n        const pagedContentContainer = root.find('[data-region=\"paged-content-container\"]');\n        PagedContentFactory.resetLastPageNumber($(pagedContentContainer).attr('id'), jumpto);\n    }\n\n    loadedPages[jumpto].courses = reducedCourse;\n\n    // Reduce the course offset.\n    courseOffset--;\n\n    // Render the paged content for the current.\n    const pagedContentPage = getPagedContentContainer(root, jumpto);\n    renderCourses(root, loadedPages[jumpto]).then((html, js) => {\n        return Templates.replaceNodeContents(pagedContentPage, html, js);\n    }).catch(Notification.exception);\n\n    // Delete subsequent pages in order to trigger the callback.\n    loadedPages.forEach((courseList, index) => {\n        if (index > jumpto) {\n            const page = getPagedContentContainer(root, index);\n            page.remove();\n        }\n    });\n};\n\n/**\n * Set the courses favourite status and push to repository\n *\n * @param {Number} courseId Course id to favourite.\n * @param {boolean} status new favourite status.\n * @return {Promise} Repository promise.\n */\nconst setCourseFavouriteState = (courseId, status) => {\n\n    return Repository.setFavouriteCourses({\n        courses: [\n            {\n                'id': courseId,\n                'favourite': status\n            }\n        ]\n    }).then(result => {\n        if (result.warnings.length === 0) {\n            loadedPages.forEach(courseList => {\n                courseList.courses.forEach((course, index) => {\n                    if (course.id == courseId) {\n                        courseList.courses[index].isfavourite = status;\n                    }\n                });\n            });\n            return true;\n        } else {\n            return false;\n        }\n    }).catch(Notification.exception);\n};\n\n/**\n * Given there are no courses to render provide the rendered template.\n *\n * @param {object} root The root element for the courses view.\n * @return {promise} jQuery promise resolved after rendering is complete.\n */\nconst noCoursesRender = root => {\n    const nocoursesimg = root.find(SELECTORS.courseView.region).attr('data-nocoursesimg');\n    const newcourseurl = root.find(SELECTORS.courseView.region).attr('data-newcourseurl');\n    return Templates.render(TEMPLATES.NOCOURSES, {\n        nocoursesimg: nocoursesimg,\n        newcourseurl: newcourseurl\n    });\n};\n\n/**\n * Render the dashboard courses.\n *\n * @param {object} root The root element for the courses view.\n * @param {array} coursesData containing array of returned courses.\n * @return {promise} jQuery promise resolved after rendering is complete.\n */\nconst renderCourses = (root, coursesData) => {\n\n    const filters = getFilterValues(root);\n\n    let currentTemplate = '';\n    if (filters.display === 'card') {\n        currentTemplate = TEMPLATES.COURSES_CARDS;\n    } else if (filters.display === 'list') {\n        currentTemplate = TEMPLATES.COURSES_LIST;\n    } else {\n        currentTemplate = TEMPLATES.COURSES_SUMMARY;\n    }\n\n    if (!coursesData) {\n        return noCoursesRender(root);\n    } else {\n        // Sometimes we get weird objects coming after a failed search, cast to ensure typing functions.\n        if (Array.isArray(coursesData.courses) === false) {\n            coursesData.courses = Object.values(coursesData.courses);\n        }\n        // Whether the course category should be displayed in the course item.\n        coursesData.courses = coursesData.courses.map(course => {\n            course.showcoursecategory = filters.displaycategories === 'on';\n            return course;\n        });\n\n        for(let i = 0; i < coursesData.courses.length; i++){\n            coursesData.courses[i].courselevel = \"An Example\";\n        }\n\n        if (coursesData.courses.length) {\n            return Templates.render(currentTemplate, {\n                courses: coursesData.courses,\n            });\n        } else {\n            return noCoursesRender(root);\n        }\n    }\n};\n\n/**\n * Return the callback to be passed to the subscribe event\n *\n * @param {object} root The root element for the courses view\n * @return {function} Partially applied function that'll execute when passed a limit\n */\nconst setLimit = root => {\n    // @param {Number} limit The paged limit that is passed through the event.\n    return limit => root.find(SELECTORS.courseView.region).attr('data-paging', limit);\n};\n\n/**\n * Intialise the paged list and cards views on page load.\n * Returns an array of paged contents that we would like to handle here\n *\n * @param {object} root The root element for the courses view\n * @param {string} namespace The namespace for all the events attached\n */\nconst registerPagedEventHandlers = (root, namespace) => {\n    const event = namespace + PagedContentEvents.SET_ITEMS_PER_PAGE_LIMIT;\n    PubSub.subscribe(event, setLimit(root));\n};\n\n/**\n * Figure out how many items are going to be allowed to be rendered in the block.\n *\n * @param  {Number} pagingLimit How many courses to display\n * @param  {Object} root The course overview container\n * @return {Number[]} How many courses will be rendered\n */\nconst itemsPerPageFunc = (pagingLimit, root) => {\n    let itemsPerPage = NUMCOURSES_PERPAGE.map(value => {\n        let active = false;\n        if (value === pagingLimit) {\n            active = true;\n        }\n\n        return {\n            value: value,\n            active: active\n        };\n    });\n\n    // Filter out all pagination options which are too large for the amount of courses user is enrolled in.\n    const totalCourseCount = parseInt(root.find(SELECTORS.courseView.region).attr('data-totalcoursecount'), 10);\n    return itemsPerPage.filter(pagingOption => {\n        return pagingOption.value < totalCourseCount || pagingOption.value === 0;\n    });\n};\n\n/**\n * Mutates and controls the loadedPages array and handles the bootstrapping.\n *\n * @param {Array|Object} coursesData Array of all of the courses to start building the page from\n * @param {Number} currentPage What page are we currently on?\n * @param {Object} pageData Any current page information\n * @param {Object} actions Paged content helper\n * @param {null|boolean} activeSearch Are we currently actively searching and building up search results?\n */\nconst pageBuilder = (coursesData, currentPage, pageData, actions, activeSearch = null) => {\n    // If the courseData comes in an object then get the value otherwise it is a pure array.\n    let courses = coursesData.courses ? coursesData.courses : coursesData;\n    let nextPageStart = 0;\n    let pageCourses = [];\n\n    // If current page's data is loaded make sure we max it to page limit.\n    if (typeof (loadedPages[currentPage]) !== 'undefined') {\n        pageCourses = loadedPages[currentPage].courses;\n        const currentPageLength = pageCourses.length;\n        if (currentPageLength < pageData.limit) {\n            nextPageStart = pageData.limit - currentPageLength;\n            pageCourses = {...loadedPages[currentPage].courses, ...courses.slice(0, nextPageStart)};\n        }\n    } else {\n        // When the page limit is zero, there is only one page of courses, no start for next page.\n        nextPageStart = pageData.limit || false;\n        pageCourses = (pageData.limit > 0) ? courses.slice(0, pageData.limit) : courses;\n    }\n\n    // Finished setting up the current page.\n    loadedPages[currentPage] = {\n        courses: pageCourses\n    };\n\n    // Set up the next page (if there is more than one page).\n    const remainingCourses = nextPageStart !== false ? courses.slice(nextPageStart, courses.length) : [];\n    if (remainingCourses.length) {\n        loadedPages[currentPage + 1] = {\n            courses: remainingCourses\n        };\n    }\n\n    // Set the last page to either the current or next page.\n    if (loadedPages[currentPage].courses.length < pageData.limit || !remainingCourses.length) {\n        lastPage = currentPage;\n        if (activeSearch === null) {\n            actions.allItemsLoaded(currentPage);\n        }\n    } else if (typeof (loadedPages[currentPage + 1]) !== 'undefined'\n        && loadedPages[currentPage + 1].courses.length < pageData.limit) {\n        lastPage = currentPage + 1;\n    }\n\n    courseOffset = coursesData.nextoffset;\n};\n\n/**\n * In cases when switching between regular rendering and search rendering we need to reset some variables.\n */\nconst resetGlobals = () => {\n    courseOffset = 0;\n    loadedPages = [];\n    lastPage = 0;\n    lastLimit = 0;\n};\n\n/**\n * The default functionality of fetching paginated courses without special handling.\n *\n * @return {function(Object, Object, Object, Object, Object, Promise, Number): void}\n */\nconst standardFunctionalityCurry = () => {\n    resetGlobals();\n    return (filters, currentPage, pageData, actions, root, promises, limit) => {\n        const pagePromise = getMyCourses(\n            filters,\n            limit\n        ).then(coursesData => {\n            pageBuilder(coursesData, currentPage, pageData, actions);\n            return renderCourses(root, loadedPages[currentPage]);\n        }).catch(Notification.exception);\n\n        promises.push(pagePromise);\n    };\n};\n\n/**\n * Initialize the searching functionality so we can call it when required.\n *\n * @return {function(Object, Number, Object, Object, Object, Promise, Number, String): void}\n */\nconst searchFunctionalityCurry = () => {\n    resetGlobals();\n    return (filters, currentPage, pageData, actions, root, promises, limit, inputValue) => {\n        const searchingPromise = getSearchMyCourses(\n            filters,\n            limit,\n            inputValue\n        ).then(coursesData => {\n            pageBuilder(coursesData, currentPage, pageData, actions);\n            return renderCourses(root, loadedPages[currentPage]);\n        }).catch(Notification.exception);\n\n        promises.push(searchingPromise);\n    };\n};\n\n/**\n * Initialise the courses list and cards views on page load.\n *\n * @param {object} root The root element for the courses view.\n * @param {function} promiseFunction How do we fetch the courses and what do we do with them?\n * @param {null | string} inputValue What to search for\n */\nconst initializePagedContent = (root, promiseFunction, inputValue = null) => {\n    const pagingLimit = parseInt(root.find(SELECTORS.courseView.region).attr('data-paging'), 10);\n    let itemsPerPage = itemsPerPageFunc(pagingLimit, root);\n\n    const filters = getFilterValues(root);\n    const config = {...{}, ...DEFAULT_PAGED_CONTENT_CONFIG};\n    config.eventNamespace = namespace;\n\n    const pagedContentPromise = PagedContentFactory.createWithLimit(\n        itemsPerPage,\n        (pagesData, actions) => {\n            let promises = [];\n            pagesData.forEach(pageData => {\n                const currentPage = pageData.pageNumber;\n                let limit = (pageData.limit > 0) ? pageData.limit : 0;\n\n                // Reset local variables if limits have changed.\n                if (+lastLimit !== +limit) {\n                    loadedPages = [];\n                    courseOffset = 0;\n                    lastPage = 0;\n                }\n\n                if (lastPage === currentPage) {\n                    // If we are on the last page and have it's data then load it from cache.\n                    actions.allItemsLoaded(lastPage);\n                    promises.push(renderCourses(root, loadedPages[currentPage]));\n                    return;\n                }\n\n                lastLimit = limit;\n\n                // Get 2 pages worth of data as we will need it for the hidden functionality.\n                if (typeof (loadedPages[currentPage + 1]) === 'undefined') {\n                    if (typeof (loadedPages[currentPage]) === 'undefined') {\n                        limit *= 2;\n                    }\n                }\n\n                // Call the curried function that'll handle the course promise and any manipulation of it.\n                promiseFunction(filters, currentPage, pageData, actions, root, promises, limit, inputValue);\n            });\n            return promises;\n        },\n        config\n    );\n\n    pagedContentPromise.then((html, js) => {\n        registerPagedEventHandlers(root, namespace);\n        return Templates.replaceNodeContents(root.find(SELECTORS.courseView.region), html, js);\n    }).catch(Notification.exception);\n};\n\n/**\n * Listen to, and handle events for the myoverview block.\n *\n * @param {Object} root The myoverview block container element.\n * @param {HTMLElement} page The whole HTMLElement for our block.\n */\nconst registerEventListeners = (root, page) => {\n\n    CustomEvents.define(root, [\n        CustomEvents.events.activate\n    ]);\n\n    root.on(CustomEvents.events.activate, SELECTORS.ACTION_ADD_FAVOURITE, (e, data) => {\n        const favourite = $(e.target).closest(SELECTORS.ACTION_ADD_FAVOURITE);\n        const courseId = getCourseId(favourite);\n        addToFavourites(root, courseId);\n        data.originalEvent.preventDefault();\n    });\n\n    root.on(CustomEvents.events.activate, SELECTORS.ACTION_REMOVE_FAVOURITE, (e, data) => {\n        const favourite = $(e.target).closest(SELECTORS.ACTION_REMOVE_FAVOURITE);\n        const courseId = getCourseId(favourite);\n        removeFromFavourites(root, courseId);\n        data.originalEvent.preventDefault();\n    });\n\n    root.on(CustomEvents.events.activate, SELECTORS.FAVOURITE_ICON, (e, data) => {\n        data.originalEvent.preventDefault();\n    });\n\n    root.on(CustomEvents.events.activate, SELECTORS.ACTION_HIDE_COURSE, (e, data) => {\n        const target = $(e.target).closest(SELECTORS.ACTION_HIDE_COURSE);\n        const courseId = getCourseId(target);\n        hideCourse(root, courseId);\n        data.originalEvent.preventDefault();\n    });\n\n    root.on(CustomEvents.events.activate, SELECTORS.ACTION_SHOW_COURSE, (e, data) => {\n        const target = $(e.target).closest(SELECTORS.ACTION_SHOW_COURSE);\n        const courseId = getCourseId(target);\n        showCourse(root, courseId);\n        data.originalEvent.preventDefault();\n    });\n\n    // Searching functionality event handlers.\n    const input = page.querySelector(SELECTORS.region.searchInput);\n    const clearIcon = page.querySelector(SELECTORS.region.clearIcon);\n\n    clearIcon.addEventListener('click', () => {\n        input.value = '';\n        input.focus();\n        clearSearch(clearIcon, root);\n    });\n\n    input.addEventListener('input', debounce(() => {\n        if (input.value === '') {\n            clearSearch(clearIcon, root);\n        } else {\n            activeSearch(clearIcon);\n            initializePagedContent(root, searchFunctionalityCurry(), input.value.trim());\n        }\n    }, 1000));\n};\n\n/**\n * Reset the search icon and trigger the init for the block.\n *\n * @param {HTMLElement} clearIcon Our closing icon to manipulate.\n * @param {Object} root The myoverview block container element.\n */\nexport const clearSearch = (clearIcon, root) => {\n    clearIcon.classList.add('d-none');\n    init(root);\n};\n\n/**\n * Change the searching icon to its' active state.\n *\n * @param {HTMLElement} clearIcon Our closing icon to manipulate.\n */\nconst activeSearch = (clearIcon) => {\n    clearIcon.classList.remove('d-none');\n};\n\n/**\n * Intialise the courses list and cards views on page load.\n *\n * @param {object} root The root element for the courses view.\n */\nexport const init = root => {\n    root = $(root);\n    loadedPages = [];\n    lastPage = 0;\n    courseOffset = 0;\n\n    if (!root.attr('data-init')) {\n        const page = document.querySelector(SELECTORS.region.selectBlock);\n        registerEventListeners(root, page);\n        namespace = \"block_myoverview_\" + root.attr('id') + \"_\" + Math.random();\n        root.attr('data-init', true);\n    }\n\n    initializePagedContent(root, standardFunctionalityCurry());\n};\n\n/**\n * Reset the courses views to their original\n * state on first page load.courseOffset\n *\n * This is called when configuration has changed for the event lists\n * to cause them to reload their data.\n *\n * @param {Object} root The root element for the timeline view.\n */\nexport const reset = root => {\n    if (loadedPages.length > 0) {\n        loadedPages.forEach((courseList, index) => {\n            let pagedContentPage = getPagedContentContainer(root, index);\n            renderCourses(root, courseList).then((html, js) => {\n                return Templates.replaceNodeContents(pagedContentPage, html, js);\n            }).catch(Notification.exception);\n        });\n    } else {\n        init(root);\n    }\n};\n"],"names":["_getRequireWildcardCache","e","WeakMap","r","t","_interopRequireWildcard","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","_interopRequireDefault","obj","_jquery","Repository","PagedContentFactory","PubSub","CustomEvents","Notification","Templates","CourseEvents","_selectors","PagedContentEvents","Aria","TEMPLATES","GROUPINGS","NUMCOURSES_PERPAGE","loadedPages","courseOffset","lastPage","lastLimit","namespace","getFilterValues","root","courseRegion","find","SELECTORS","courseView","region","display","attr","grouping","sort","displaycategories","customfieldname","customfieldvalue","DEFAULT_PAGED_CONTENT_CONFIG","ignoreControlWhileLoading","controlPlacementBottom","persistentLimitKey","getFavouriteIconContainer","courseId","FAVOURITE_ICON","getPagedContentContainer","index","getCourseId","getAddFavouriteMenuItem","getRemoveFavouriteMenuItem","addToFavourites","removeAction","addAction","setCourseFavouriteState","then","success","publish","favourited","removeClass","addClass","showFavouriteIcon","iconContainer","isFavouriteIcon","ICON_IS_FAVOURITE","unhide","notFavourteIcon","ICON_NOT_FAVOURITE","hide","alert","catch","exception","removeFromFavourites","unfavorited","hideFavouriteIcon","getHideCourseMenuItem","getShowCourseMenuItem","setCourseHiddenState","status","setUserPreference","hideElement","id","pagingBar","jumpto","parseInt","reducedCourse","courses","reduce","accumulator","current","push","newElement","slice","forEach","courseList","popElement","length","pagedContentContainer","resetLastPageNumber","$","pagedContentPage","renderCourses","html","js","replaceNodeContents","remove","setFavouriteCourses","favourite","result","warnings","course","isfavourite","noCoursesRender","nocoursesimg","newcourseurl","render","coursesData","filters","currentTemplate","Array","isArray","values","map","showcoursecategory","courselevel","registerPagedEventHandlers","event","SET_ITEMS_PER_PAGE_LIMIT","subscribe","limit","setLimit","pageBuilder","currentPage","pageData","actions","activeSearch","arguments","undefined","nextPageStart","pageCourses","currentPageLength","remainingCourses","allItemsLoaded","nextoffset","resetGlobals","standardFunctionalityCurry","promises","pagePromise","getMyCourses","getEnrolledCoursesByTimeline","offset","classification","searchFunctionalityCurry","inputValue","searchingPromise","getSearchMyCourses","searchValue","searchvalue","initializePagedContent","promiseFunction","itemsPerPage","itemsPerPageFunc","pagingLimit","value","active","totalCourseCount","filter","pagingOption","config","eventNamespace","createWithLimit","pagesData","pageNumber","registerEventListeners","page","define","events","activate","on","ACTION_ADD_FAVOURITE","data","target","closest","originalEvent","preventDefault","ACTION_REMOVE_FAVOURITE","ACTION_HIDE_COURSE","hideCourse","hideAction","showAction","ACTION_SHOW_COURSE","showCourse","input","querySelector","searchInput","clearIcon","addEventListener","focus","clearSearch","debounce","trim","classList","add","init","_exports","document","selectBlock","Math","random","reset"],"mappings":"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"}