{"version":3,"file":"view.min.js","sources":["../src/view.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle. If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Manage the courses view for the overview block.\n *\n * @copyright  2018 Bas Brands <bas@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport $ from \"jquery\";\nimport * as Repository from \"block_myoverview/repository\";\nimport * as PagedContentFactory from \"core/paged_content_factory\";\nimport * as PubSub from \"core/pubsub\";\nimport * as CustomEvents from \"core/custom_interaction_events\";\nimport * as Notification from \"core/notification\";\nimport * as Templates from \"core/templates\";\nimport * as CourseEvents from \"core_course/events\";\nimport SELECTORS from \"block_myoverview/selectors\";\nimport * as PagedContentEvents from \"core/paged_content_events\";\nimport * as Aria from \"core/aria\";\nimport { debounce } from \"core/utils\";\nimport { setUserPreference } from \"core_user/repository\";\n\nconst TEMPLATES = {\n  COURSES_CARDS: \"block_myoverview/view-cards\",\n  COURSES_LIST: \"block_myoverview/view-list\",\n  COURSES_SUMMARY: \"block_myoverview/view-summary\",\n  NOCOURSES: \"core_course/no-courses\",\n};\n\nconst GROUPINGS = {\n  GROUPING_ALLINCLUDINGHIDDEN: \"allincludinghidden\",\n  GROUPING_ALL: \"all\",\n  GROUPING_INPROGRESS: \"inprogress\",\n  GROUPING_FUTURE: \"future\",\n  GROUPING_PAST: \"past\",\n  GROUPING_FAVOURITES: \"favourites\",\n  GROUPING_HIDDEN: \"hidden\",\n};\n\nconst NUMCOURSES_PERPAGE = [12, 24, 48, 96, 0];\n\nlet loadedPages = [];\n\nlet courseOffset = 0;\n\nlet lastPage = 0;\n\nlet lastLimit = 0;\n\nlet namespace = null;\n\n/**\n * Get filter values from DOM.\n *\n * @param {object} root The root element for the courses view.\n * @return {filters} Set filters.\n */\nconst getFilterValues = (root) => {\n  const courseRegion = root.find(SELECTORS.courseView.region);\n  return {\n    display: courseRegion.attr(\"data-display\"),\n    grouping: courseRegion.attr(\"data-grouping\"),\n    sort: courseRegion.attr(\"data-sort\"),\n    displaycategories: courseRegion.attr(\"data-displaycategories\"),\n    customfieldname: courseRegion.attr(\"data-customfieldname\"),\n    customfieldvalue: courseRegion.attr(\"data-customfieldvalue\"),\n  };\n};\n\n// We want the paged content controls below the paged content area.\n// and the controls should be ignored while data is loading.\nconst DEFAULT_PAGED_CONTENT_CONFIG = {\n  ignoreControlWhileLoading: true,\n  controlPlacementBottom: true,\n  persistentLimitKey: \"block_myoverview_user_paging_preference\",\n};\n\n/**\n * Get enrolled courses from backend.\n *\n * @param {object} filters The filters for this view.\n * @param {int} limit The number of courses to show.\n * @return {promise} Resolved with an array of courses.\n */\nconst getMyCourses = (filters, limit) => {\n  return Repository.getEnrolledCoursesByTimeline({\n    offset: courseOffset,\n    limit: limit,\n    classification: filters.grouping,\n    sort: filters.sort,\n    customfieldname: filters.customfieldname,\n    customfieldvalue: filters.customfieldvalue,\n  });\n};\n\n/**\n * Search for enrolled courses from backend.\n *\n * @param {object} filters The filters for this view.\n * @param {int} limit The number of courses to show.\n * @param {string} searchValue What does the user want to search within their courses.\n * @return {promise} Resolved with an array of courses.\n */\nconst getSearchMyCourses = (filters, limit, searchValue) => {\n  return Repository.getEnrolledCoursesByTimeline({\n    offset: courseOffset,\n    limit: limit,\n    classification: \"search\",\n    sort: filters.sort,\n    customfieldname: filters.customfieldname,\n    customfieldvalue: filters.customfieldvalue,\n    searchvalue: searchValue,\n  });\n};\n\n/**\n * Get the container element for the favourite icon.\n *\n * @param {Object} root The course overview container\n * @param {Number} courseId Course id number\n * @return {Object} The favourite icon container\n */\nconst getFavouriteIconContainer = (root, courseId) => {\n  return root.find(\n    SELECTORS.FAVOURITE_ICON + '[data-course-id=\"' + courseId + '\"]'\n  );\n};\n\n/**\n * Get the paged content container element.\n *\n * @param {Object} root The course overview container\n * @param {Number} index Rendered page index.\n * @return {Object} The rendered paged container.\n */\nconst getPagedContentContainer = (root, index) => {\n  return root.find(\n    '[data-region=\"paged-content-page\"][data-page=\"' + index + '\"]'\n  );\n};\n\n/**\n * Get the course id from a favourite element.\n *\n * @param {Object} root The favourite icon container element.\n * @return {Number} Course id.\n */\nconst getCourseId = (root) => {\n  return root.attr(\"data-course-id\");\n};\n\n/**\n * Hide the favourite icon.\n *\n * @param {Object} root The favourite icon container element.\n * @param {Number} courseId Course id number.\n */\nconst hideFavouriteIcon = (root, courseId) => {\n  const iconContainer = getFavouriteIconContainer(root, courseId);\n\n  const isFavouriteIcon = iconContainer.find(SELECTORS.ICON_IS_FAVOURITE);\n  isFavouriteIcon.addClass(\"hidden\");\n  Aria.hide(isFavouriteIcon);\n\n  const notFavourteIcon = iconContainer.find(SELECTORS.ICON_NOT_FAVOURITE);\n  notFavourteIcon.removeClass(\"hidden\");\n  Aria.unhide(notFavourteIcon);\n};\n\n/**\n * Show the favourite icon.\n *\n * @param {Object} root The course overview container.\n * @param {Number} courseId Course id number.\n */\nconst showFavouriteIcon = (root, courseId) => {\n  const iconContainer = getFavouriteIconContainer(root, courseId);\n\n  const isFavouriteIcon = iconContainer.find(SELECTORS.ICON_IS_FAVOURITE);\n  isFavouriteIcon.removeClass(\"hidden\");\n  Aria.unhide(isFavouriteIcon);\n\n  const notFavourteIcon = iconContainer.find(SELECTORS.ICON_NOT_FAVOURITE);\n  notFavourteIcon.addClass(\"hidden\");\n  Aria.hide(notFavourteIcon);\n};\n\n/**\n * Get the action menu item\n *\n * @param {Object} root The course overview container\n * @param {Number} courseId Course id.\n * @return {Object} The add to favourite menu item.\n */\nconst getAddFavouriteMenuItem = (root, courseId) => {\n  return root.find(\n    '[data-action=\"add-favourite\"][data-course-id=\"' + courseId + '\"]'\n  );\n};\n\n/**\n * Get the action menu item\n *\n * @param {Object} root The course overview container\n * @param {Number} courseId Course id.\n * @return {Object} The remove from favourites menu item.\n */\nconst getRemoveFavouriteMenuItem = (root, courseId) => {\n  return root.find(\n    '[data-action=\"remove-favourite\"][data-course-id=\"' + courseId + '\"]'\n  );\n};\n\n/**\n * Add course to favourites\n *\n * @param {Object} root The course overview container\n * @param {Number} courseId Course id number\n */\nconst addToFavourites = (root, courseId) => {\n  const removeAction = getRemoveFavouriteMenuItem(root, courseId);\n  const addAction = getAddFavouriteMenuItem(root, courseId);\n\n  setCourseFavouriteState(courseId, true)\n    .then((success) => {\n      if (success) {\n        PubSub.publish(CourseEvents.favourited, courseId);\n        removeAction.removeClass(\"hidden\");\n        addAction.addClass(\"hidden\");\n        showFavouriteIcon(root, courseId);\n      } else {\n        Notification.alert(\n          \"Starring course failed\",\n          \"Could not change favourite state\"\n        );\n      }\n      return;\n    })\n    .catch(Notification.exception);\n};\n\n/**\n * Remove course from favourites\n *\n * @param {Object} root The course overview container\n * @param {Number} courseId Course id number\n */\nconst removeFromFavourites = (root, courseId) => {\n  const removeAction = getRemoveFavouriteMenuItem(root, courseId);\n  const addAction = getAddFavouriteMenuItem(root, courseId);\n\n  setCourseFavouriteState(courseId, false)\n    .then((success) => {\n      if (success) {\n        PubSub.publish(CourseEvents.unfavorited, courseId);\n        removeAction.addClass(\"hidden\");\n        addAction.removeClass(\"hidden\");\n        hideFavouriteIcon(root, courseId);\n      } else {\n        Notification.alert(\n          \"Starring course failed\",\n          \"Could not change favourite state\"\n        );\n      }\n      return;\n    })\n    .catch(Notification.exception);\n};\n\n/**\n * Get the action menu item\n *\n * @param {Object} root The course overview container\n * @param {Number} courseId Course id.\n * @return {Object} The hide course menu item.\n */\nconst getHideCourseMenuItem = (root, courseId) => {\n  return root.find(\n    '[data-action=\"hide-course\"][data-course-id=\"' + courseId + '\"]'\n  );\n};\n\n/**\n * Get the action menu item\n *\n * @param {Object} root The course overview container\n * @param {Number} courseId Course id.\n * @return {Object} The show course menu item.\n */\nconst getShowCourseMenuItem = (root, courseId) => {\n  return root.find(\n    '[data-action=\"show-course\"][data-course-id=\"' + courseId + '\"]'\n  );\n};\n\n/**\n * Hide course\n *\n * @param {Object} root The course overview container\n * @param {Number} courseId Course id number\n */\nconst hideCourse = (root, courseId) => {\n  const hideAction = getHideCourseMenuItem(root, courseId);\n  const showAction = getShowCourseMenuItem(root, courseId);\n  const filters = getFilterValues(root);\n\n  setCourseHiddenState(courseId, true);\n\n  // Remove the course from this view as it is now hidden and thus not covered by this view anymore.\n  // Do only if we are not in \"All (including archived)\" view mode where really all courses are shown.\n  if (filters.grouping !== GROUPINGS.GROUPING_ALLINCLUDINGHIDDEN) {\n    hideElement(root, courseId);\n  }\n\n  hideAction.addClass(\"hidden\");\n  showAction.removeClass(\"hidden\");\n};\n\n/**\n * Show course\n *\n * @param {Object} root The course overview container\n * @param {Number} courseId Course id number\n */\nconst showCourse = (root, courseId) => {\n  const hideAction = getHideCourseMenuItem(root, courseId);\n  const showAction = getShowCourseMenuItem(root, courseId);\n  const filters = getFilterValues(root);\n\n  setCourseHiddenState(courseId, null);\n\n  // Remove the course from this view as it is now shown again and thus not covered by this view anymore.\n  // Do only if we are not in \"All (including archived)\" view mode where really all courses are shown.\n  if (filters.grouping !== GROUPINGS.GROUPING_ALLINCLUDINGHIDDEN) {\n    hideElement(root, courseId);\n  }\n\n  hideAction.removeClass(\"hidden\");\n  showAction.addClass(\"hidden\");\n};\n\n/**\n * Set the courses hidden status and push to repository\n *\n * @param {Number} courseId Course id to favourite.\n * @param {Boolean} status new hidden status.\n * @return {Promise} Repository promise.\n */\nconst setCourseHiddenState = (courseId, status) => {\n  // If the given status is not hidden, the preference has to be deleted with a null value.\n  if (status === false) {\n    status = null;\n  }\n\n  return setUserPreference(\n    `block_myoverview_hidden_course_${courseId}`,\n    status\n  ).catch(Notification.exception);\n};\n\n/**\n * Reset the loadedPages dataset to take into account the hidden element\n *\n * @param {Object} root The course overview container\n * @param {Number} id The course id number\n */\nconst hideElement = (root, id) => {\n  const pagingBar = root.find('[data-region=\"paging-bar\"]');\n  const jumpto = parseInt(pagingBar.attr(\"data-active-page-number\"));\n\n  // Get a reduced dataset for the current page.\n  const courseList = loadedPages[jumpto];\n  let reducedCourse = courseList.courses.reduce((accumulator, current) => {\n    if (+id !== +current.id) {\n      accumulator.push(current);\n    }\n    return accumulator;\n  }, []);\n\n  // Get the next page's data if loaded and pop the first element from it.\n  if (typeof loadedPages[jumpto + 1] !== \"undefined\") {\n    const newElement = loadedPages[jumpto + 1].courses.slice(0, 1);\n\n    // Adjust the dataset for the reset of the pages that are loaded.\n    loadedPages.forEach((courseList, index) => {\n      if (index > jumpto) {\n        let popElement = [];\n        if (typeof loadedPages[index + 1] !== \"undefined\") {\n          popElement = loadedPages[index + 1].courses.slice(0, 1);\n        }\n        loadedPages[index].courses = [\n          ...loadedPages[index].courses.slice(1),\n          ...popElement,\n        ];\n      }\n    });\n\n    reducedCourse = [...reducedCourse, ...newElement];\n  }\n\n  // Check if the next page is the last page and if it still has data associated to it.\n  if (lastPage === jumpto + 1 && loadedPages[jumpto + 1].courses.length === 0) {\n    const pagedContentContainer = root.find(\n      '[data-region=\"paged-content-container\"]'\n    );\n    PagedContentFactory.resetLastPageNumber(\n      $(pagedContentContainer).attr(\"id\"),\n      jumpto\n    );\n  }\n\n  loadedPages[jumpto].courses = reducedCourse;\n\n  // Reduce the course offset.\n  courseOffset--;\n\n  // Render the paged content for the current.\n  const pagedContentPage = getPagedContentContainer(root, jumpto);\n  renderCourses(root, loadedPages[jumpto])\n    .then((html, js) => {\n      return Templates.replaceNodeContents(pagedContentPage, html, js);\n    })\n    .catch(Notification.exception);\n\n  // Delete subsequent pages in order to trigger the callback.\n  loadedPages.forEach((courseList, index) => {\n    if (index > jumpto) {\n      const page = getPagedContentContainer(root, index);\n      page.remove();\n    }\n  });\n};\n\n/**\n * Set the courses favourite status and push to repository\n *\n * @param {Number} courseId Course id to favourite.\n * @param {boolean} status new favourite status.\n * @return {Promise} Repository promise.\n */\nconst setCourseFavouriteState = (courseId, status) => {\n  return Repository.setFavouriteCourses({\n    courses: [\n      {\n        id: courseId,\n        favourite: status,\n      },\n    ],\n  })\n    .then((result) => {\n      if (result.warnings.length === 0) {\n        loadedPages.forEach((courseList) => {\n          courseList.courses.forEach((course, index) => {\n            if (course.id == courseId) {\n              courseList.courses[index].isfavourite = status;\n            }\n          });\n        });\n        return true;\n      } else {\n        return false;\n      }\n    })\n    .catch(Notification.exception);\n};\n\n/**\n * Given there are no courses to render provide the rendered template.\n *\n * @param {object} root The root element for the courses view.\n * @return {promise} jQuery promise resolved after rendering is complete.\n */\nconst noCoursesRender = (root) => {\n  const nocoursesimg = root\n    .find(SELECTORS.courseView.region)\n    .attr(\"data-nocoursesimg\");\n  const newcourseurl = root\n    .find(SELECTORS.courseView.region)\n    .attr(\"data-newcourseurl\");\n  return Templates.render(TEMPLATES.NOCOURSES, {\n    nocoursesimg: nocoursesimg,\n    newcourseurl: newcourseurl,\n  });\n};\n\n/**\n * Fetches the custom field value for a given course ID.\n * @param {number} courseId - The ID of the course.\n * @param {function} callback - The callback function to handle the custom field value.\n */\nfunction fetchCustomFieldValue(courseId, callback) {\n  const xhr = new XMLHttpRequest();\n  xhr.open(\"GET\", `../../../../getcourselevel.php?courseid=${courseId}`, true);\n  xhr.onreadystatechange = function () {\n    if (xhr.readyState === 4 && xhr.status === 200) {\n      const response = JSON.parse(xhr.responseText);\n      callback(response.value);\n    }\n  };\n  xhr.send();\n}\n\n/**\n * Render the dashboard courses.\n *\n * @param {object} root The root element for the courses view.\n * @param {array} coursesData containing array of returned courses.\n * @return {promise} jQuery promise resolved after rendering is complete.\n */\nconst renderCourses = (root, coursesData) => {\n  const filters = getFilterValues(root);\n\n  let currentTemplate = \"\";\n  if (filters.display === \"card\") {\n    currentTemplate = TEMPLATES.COURSES_CARDS;\n  } else if (filters.display === \"list\") {\n    currentTemplate = TEMPLATES.COURSES_LIST;\n  } else {\n    currentTemplate = TEMPLATES.COURSES_SUMMARY;\n  }\n\n  if (!coursesData) {\n    return noCoursesRender(root);\n  } else {\n    // Sometimes we get weird objects coming after a failed search, cast to ensure typing functions.\n    if (Array.isArray(coursesData.courses) === false) {\n      coursesData.courses = Object.values(coursesData.courses);\n    }\n    // Whether the course category should be displayed in the course item.\n    coursesData.courses = coursesData.courses.map((course) => {\n      course.showcoursecategory = filters.displaycategories === \"on\";\n      return course;\n    });\n\n    for (let i = 0; i < coursesData.courses.length; i++) {\n      fetchCustomFieldValue(coursesData.courses[i].id, (customFieldValue) => {\n        let courselevel = customFieldValue || \"COURSE LEVEL\";\n        coursesData.courses[i].courselevel = courselevel;\n      });\n    }\n\n    if (coursesData.courses.length) {\n      return Templates.render(currentTemplate, {\n        courses: coursesData.courses,\n      });\n    } else {\n      return noCoursesRender(root);\n    }\n  }\n};\n\n/**\n * Return the callback to be passed to the subscribe event\n *\n * @param {object} root The root element for the courses view\n * @return {function} Partially applied function that'll execute when passed a limit\n */\nconst setLimit = (root) => {\n  // @param {Number} limit The paged limit that is passed through the event.\n  return (limit) =>\n    root.find(SELECTORS.courseView.region).attr(\"data-paging\", limit);\n};\n\n/**\n * Intialise the paged list and cards views on page load.\n * Returns an array of paged contents that we would like to handle here\n *\n * @param {object} root The root element for the courses view\n * @param {string} namespace The namespace for all the events attached\n */\nconst registerPagedEventHandlers = (root, namespace) => {\n  const event = namespace + PagedContentEvents.SET_ITEMS_PER_PAGE_LIMIT;\n  PubSub.subscribe(event, setLimit(root));\n};\n\n/**\n * Figure out how many items are going to be allowed to be rendered in the block.\n *\n * @param  {Number} pagingLimit How many courses to display\n * @param  {Object} root The course overview container\n * @return {Number[]} How many courses will be rendered\n */\nconst itemsPerPageFunc = (pagingLimit, root) => {\n  let itemsPerPage = NUMCOURSES_PERPAGE.map((value) => {\n    let active = false;\n    if (value === pagingLimit) {\n      active = true;\n    }\n\n    return {\n      value: value,\n      active: active,\n    };\n  });\n\n  // Filter out all pagination options which are too large for the amount of courses user is enrolled in.\n  const totalCourseCount = parseInt(\n    root.find(SELECTORS.courseView.region).attr(\"data-totalcoursecount\"),\n    10\n  );\n  return itemsPerPage.filter((pagingOption) => {\n    return pagingOption.value < totalCourseCount || pagingOption.value === 0;\n  });\n};\n\n/**\n * Mutates and controls the loadedPages array and handles the bootstrapping.\n *\n * @param {Array|Object} coursesData Array of all of the courses to start building the page from\n * @param {Number} currentPage What page are we currently on?\n * @param {Object} pageData Any current page information\n * @param {Object} actions Paged content helper\n * @param {null|boolean} activeSearch Are we currently actively searching and building up search results?\n */\nconst pageBuilder = (\n  coursesData,\n  currentPage,\n  pageData,\n  actions,\n  activeSearch = null\n) => {\n  // If the courseData comes in an object then get the value otherwise it is a pure array.\n  let courses = coursesData.courses ? coursesData.courses : coursesData;\n  let nextPageStart = 0;\n  let pageCourses = [];\n\n  // If current page's data is loaded make sure we max it to page limit.\n  if (typeof loadedPages[currentPage] !== \"undefined\") {\n    pageCourses = loadedPages[currentPage].courses;\n    const currentPageLength = pageCourses.length;\n    if (currentPageLength < pageData.limit) {\n      nextPageStart = pageData.limit - currentPageLength;\n      pageCourses = {\n        ...loadedPages[currentPage].courses,\n        ...courses.slice(0, nextPageStart),\n      };\n    }\n  } else {\n    // When the page limit is zero, there is only one page of courses, no start for next page.\n    nextPageStart = pageData.limit || false;\n    pageCourses =\n      pageData.limit > 0 ? courses.slice(0, pageData.limit) : courses;\n  }\n\n  // Finished setting up the current page.\n  loadedPages[currentPage] = {\n    courses: pageCourses,\n  };\n\n  // Set up the next page (if there is more than one page).\n  const remainingCourses =\n    nextPageStart !== false ? courses.slice(nextPageStart, courses.length) : [];\n  if (remainingCourses.length) {\n    loadedPages[currentPage + 1] = {\n      courses: remainingCourses,\n    };\n  }\n\n  // Set the last page to either the current or next page.\n  if (\n    loadedPages[currentPage].courses.length < pageData.limit ||\n    !remainingCourses.length\n  ) {\n    lastPage = currentPage;\n    if (activeSearch === null) {\n      actions.allItemsLoaded(currentPage);\n    }\n  } else if (\n    typeof loadedPages[currentPage + 1] !== \"undefined\" &&\n    loadedPages[currentPage + 1].courses.length < pageData.limit\n  ) {\n    lastPage = currentPage + 1;\n  }\n\n  courseOffset = coursesData.nextoffset;\n};\n\n/**\n * In cases when switching between regular rendering and search rendering we need to reset some variables.\n */\nconst resetGlobals = () => {\n  courseOffset = 0;\n  loadedPages = [];\n  lastPage = 0;\n  lastLimit = 0;\n};\n\n/**\n * The default functionality of fetching paginated courses without special handling.\n *\n * @return {function(Object, Object, Object, Object, Object, Promise, Number): void}\n */\nconst standardFunctionalityCurry = () => {\n  resetGlobals();\n  return (filters, currentPage, pageData, actions, root, promises, limit) => {\n    const pagePromise = getMyCourses(filters, limit)\n      .then((coursesData) => {\n        pageBuilder(coursesData, currentPage, pageData, actions);\n        return renderCourses(root, loadedPages[currentPage]);\n      })\n      .catch(Notification.exception);\n\n    promises.push(pagePromise);\n  };\n};\n\n/**\n * Initialize the searching functionality so we can call it when required.\n *\n * @return {function(Object, Number, Object, Object, Object, Promise, Number, String): void}\n */\nconst searchFunctionalityCurry = () => {\n  resetGlobals();\n  return (\n    filters,\n    currentPage,\n    pageData,\n    actions,\n    root,\n    promises,\n    limit,\n    inputValue\n  ) => {\n    const searchingPromise = getSearchMyCourses(filters, limit, inputValue)\n      .then((coursesData) => {\n        pageBuilder(coursesData, currentPage, pageData, actions);\n        return renderCourses(root, loadedPages[currentPage]);\n      })\n      .catch(Notification.exception);\n\n    promises.push(searchingPromise);\n  };\n};\n\n/**\n * Initialise the courses list and cards views on page load.\n *\n * @param {object} root The root element for the courses view.\n * @param {function} promiseFunction How do we fetch the courses and what do we do with them?\n * @param {null | string} inputValue What to search for\n */\nconst initializePagedContent = (root, promiseFunction, inputValue = null) => {\n  const pagingLimit = parseInt(\n    root.find(SELECTORS.courseView.region).attr(\"data-paging\"),\n    10\n  );\n  let itemsPerPage = itemsPerPageFunc(pagingLimit, root);\n\n  const filters = getFilterValues(root);\n  const config = { ...{}, ...DEFAULT_PAGED_CONTENT_CONFIG };\n  config.eventNamespace = namespace;\n\n  const pagedContentPromise = PagedContentFactory.createWithLimit(\n    itemsPerPage,\n    (pagesData, actions) => {\n      let promises = [];\n      pagesData.forEach((pageData) => {\n        const currentPage = pageData.pageNumber;\n        let limit = pageData.limit > 0 ? pageData.limit : 0;\n\n        // Reset local variables if limits have changed.\n        if (+lastLimit !== +limit) {\n          loadedPages = [];\n          courseOffset = 0;\n          lastPage = 0;\n        }\n\n        if (lastPage === currentPage) {\n          // If we are on the last page and have it's data then load it from cache.\n          actions.allItemsLoaded(lastPage);\n          promises.push(renderCourses(root, loadedPages[currentPage]));\n          return;\n        }\n\n        lastLimit = limit;\n\n        // Get 2 pages worth of data as we will need it for the hidden functionality.\n        if (typeof loadedPages[currentPage + 1] === \"undefined\") {\n          if (typeof loadedPages[currentPage] === \"undefined\") {\n            limit *= 2;\n          }\n        }\n\n        // Call the curried function that'll handle the course promise and any manipulation of it.\n        promiseFunction(\n          filters,\n          currentPage,\n          pageData,\n          actions,\n          root,\n          promises,\n          limit,\n          inputValue\n        );\n      });\n      return promises;\n    },\n    config\n  );\n\n  pagedContentPromise\n    .then((html, js) => {\n      registerPagedEventHandlers(root, namespace);\n      return Templates.replaceNodeContents(\n        root.find(SELECTORS.courseView.region),\n        html,\n        js\n      );\n    })\n    .catch(Notification.exception);\n};\n\n/**\n * Listen to, and handle events for the myoverview block.\n *\n * @param {Object} root The myoverview block container element.\n * @param {HTMLElement} page The whole HTMLElement for our block.\n */\nconst registerEventListeners = (root, page) => {\n  CustomEvents.define(root, [CustomEvents.events.activate]);\n\n  root.on(\n    CustomEvents.events.activate,\n    SELECTORS.ACTION_ADD_FAVOURITE,\n    (e, data) => {\n      const favourite = $(e.target).closest(SELECTORS.ACTION_ADD_FAVOURITE);\n      const courseId = getCourseId(favourite);\n      addToFavourites(root, courseId);\n      data.originalEvent.preventDefault();\n    }\n  );\n\n  root.on(\n    CustomEvents.events.activate,\n    SELECTORS.ACTION_REMOVE_FAVOURITE,\n    (e, data) => {\n      const favourite = $(e.target).closest(SELECTORS.ACTION_REMOVE_FAVOURITE);\n      const courseId = getCourseId(favourite);\n      removeFromFavourites(root, courseId);\n      data.originalEvent.preventDefault();\n    }\n  );\n\n  root.on(CustomEvents.events.activate, SELECTORS.FAVOURITE_ICON, (e, data) => {\n    data.originalEvent.preventDefault();\n  });\n\n  root.on(\n    CustomEvents.events.activate,\n    SELECTORS.ACTION_HIDE_COURSE,\n    (e, data) => {\n      const target = $(e.target).closest(SELECTORS.ACTION_HIDE_COURSE);\n      const courseId = getCourseId(target);\n      hideCourse(root, courseId);\n      data.originalEvent.preventDefault();\n    }\n  );\n\n  root.on(\n    CustomEvents.events.activate,\n    SELECTORS.ACTION_SHOW_COURSE,\n    (e, data) => {\n      const target = $(e.target).closest(SELECTORS.ACTION_SHOW_COURSE);\n      const courseId = getCourseId(target);\n      showCourse(root, courseId);\n      data.originalEvent.preventDefault();\n    }\n  );\n\n  // Searching functionality event handlers.\n  const input = page.querySelector(SELECTORS.region.searchInput);\n  const clearIcon = page.querySelector(SELECTORS.region.clearIcon);\n\n  clearIcon.addEventListener(\"click\", () => {\n    input.value = \"\";\n    input.focus();\n    clearSearch(clearIcon, root);\n  });\n\n  input.addEventListener(\n    \"input\",\n    debounce(() => {\n      if (input.value === \"\") {\n        clearSearch(clearIcon, root);\n      } else {\n        activeSearch(clearIcon);\n        initializePagedContent(\n          root,\n          searchFunctionalityCurry(),\n          input.value.trim()\n        );\n      }\n    }, 1000)\n  );\n};\n\n/**\n * Reset the search icon and trigger the init for the block.\n *\n * @param {HTMLElement} clearIcon Our closing icon to manipulate.\n * @param {Object} root The myoverview block container element.\n */\nexport const clearSearch = (clearIcon, root) => {\n  clearIcon.classList.add(\"d-none\");\n  init(root);\n};\n\n/**\n * Change the searching icon to its' active state.\n *\n * @param {HTMLElement} clearIcon Our closing icon to manipulate.\n */\nconst activeSearch = (clearIcon) => {\n  clearIcon.classList.remove(\"d-none\");\n};\n\n/**\n * Intialise the courses list and cards views on page load.\n *\n * @param {object} root The root element for the courses view.\n */\nexport const init = (root) => {\n  root = $(root);\n  loadedPages = [];\n  lastPage = 0;\n  courseOffset = 0;\n\n  if (!root.attr(\"data-init\")) {\n    const page = document.querySelector(SELECTORS.region.selectBlock);\n    registerEventListeners(root, page);\n    namespace = \"block_myoverview_\" + root.attr(\"id\") + \"_\" + Math.random();\n    root.attr(\"data-init\", true);\n  }\n\n  initializePagedContent(root, standardFunctionalityCurry());\n};\n\n/**\n * Reset the courses views to their original\n * state on first page load.courseOffset\n *\n * This is called when configuration has changed for the event lists\n * to cause them to reload their data.\n *\n * @param {Object} root The root element for the timeline view.\n */\nexport const reset = (root) => {\n  if (loadedPages.length > 0) {\n    loadedPages.forEach((courseList, index) => {\n      let pagedContentPage = getPagedContentContainer(root, index);\n      renderCourses(root, courseList)\n        .then((html, js) => {\n          return Templates.replaceNodeContents(pagedContentPage, html, js);\n        })\n        .catch(Notification.exception);\n    });\n  } else {\n    init(root);\n  }\n};\n"],"names":["_getRequireWildcardCache","e","WeakMap","r","t","_interopRequireWildcard","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","_interopRequireDefault","obj","_jquery","Repository","PagedContentFactory","PubSub","CustomEvents","Notification","Templates","CourseEvents","_selectors","PagedContentEvents","Aria","TEMPLATES","GROUPINGS","NUMCOURSES_PERPAGE","loadedPages","courseOffset","lastPage","lastLimit","namespace","getFilterValues","root","courseRegion","find","SELECTORS","courseView","region","display","attr","grouping","sort","displaycategories","customfieldname","customfieldvalue","DEFAULT_PAGED_CONTENT_CONFIG","ignoreControlWhileLoading","controlPlacementBottom","persistentLimitKey","getFavouriteIconContainer","courseId","FAVOURITE_ICON","getPagedContentContainer","index","getCourseId","getAddFavouriteMenuItem","getRemoveFavouriteMenuItem","addToFavourites","removeAction","addAction","setCourseFavouriteState","then","success","publish","favourited","removeClass","addClass","showFavouriteIcon","iconContainer","isFavouriteIcon","ICON_IS_FAVOURITE","unhide","notFavourteIcon","ICON_NOT_FAVOURITE","hide","alert","catch","exception","removeFromFavourites","unfavorited","hideFavouriteIcon","getHideCourseMenuItem","getShowCourseMenuItem","setCourseHiddenState","status","setUserPreference","hideElement","id","pagingBar","jumpto","parseInt","reducedCourse","courses","reduce","accumulator","current","push","newElement","slice","forEach","courseList","popElement","length","pagedContentContainer","resetLastPageNumber","$","pagedContentPage","renderCourses","html","js","replaceNodeContents","remove","setFavouriteCourses","favourite","result","warnings","course","isfavourite","noCoursesRender","nocoursesimg","newcourseurl","render","fetchCustomFieldValue","callback","xhr","XMLHttpRequest","open","onreadystatechange","readyState","response","JSON","parse","responseText","value","send","coursesData","filters","currentTemplate","Array","isArray","values","map","showcoursecategory","customFieldValue","courselevel","registerPagedEventHandlers","event","SET_ITEMS_PER_PAGE_LIMIT","subscribe","limit","setLimit","pageBuilder","currentPage","pageData","actions","activeSearch","arguments","undefined","nextPageStart","pageCourses","currentPageLength","remainingCourses","allItemsLoaded","nextoffset","resetGlobals","standardFunctionalityCurry","promises","pagePromise","getMyCourses","getEnrolledCoursesByTimeline","offset","classification","searchFunctionalityCurry","inputValue","searchingPromise","getSearchMyCourses","searchValue","searchvalue","initializePagedContent","promiseFunction","itemsPerPage","itemsPerPageFunc","pagingLimit","active","totalCourseCount","filter","pagingOption","config","eventNamespace","createWithLimit","pagesData","pageNumber","registerEventListeners","page","define","events","activate","on","ACTION_ADD_FAVOURITE","data","target","closest","originalEvent","preventDefault","ACTION_REMOVE_FAVOURITE","ACTION_HIDE_COURSE","hideCourse","hideAction","showAction","ACTION_SHOW_COURSE","showCourse","input","querySelector","searchInput","clearIcon","addEventListener","focus","clearSearch","debounce","trim","classList","add","init","_exports","document","selectBlock","Math","random","reset"],"mappings":"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"}