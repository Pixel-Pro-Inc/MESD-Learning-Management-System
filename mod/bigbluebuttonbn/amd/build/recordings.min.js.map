{"version":3,"file":"recordings.min.js","sources":["../src/recordings.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * JS for the recordings page on mod_bigbluebuttonbn plugin.\n *\n * @module      mod_bigbluebuttonbn/recordings\n * @copyright   2021 Blindside Networks Inc\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport * as repository from './repository';\nimport {exception as displayException, saveCancelPromise} from 'core/notification';\nimport {prefetchStrings} from 'core/prefetch';\nimport {getString, getStrings} from 'core/str';\nimport {addIconToContainerWithPromise} from 'core/loadingicon';\nimport Pending from 'core/pending';\n\nconst stringsWithKeys = {\n    first: 'view_recording_yui_first',\n    prev: 'view_recording_yui_prev',\n    next: 'view_recording_yui_next',\n    last: 'view_recording_yui_last',\n    goToLabel: 'view_recording_yui_page',\n    goToAction: 'view_recording_yui_go',\n    perPage: 'view_recording_yui_rows',\n    showAll: 'view_recording_yui_show_all',\n};\n// Load global strings.\nprefetchStrings('bigbluebuttonbn', Object.entries(stringsWithKeys).map((entry) => entry[1]));\n\nconst getStringsForYui = () => {\n    const stringMap = Object.keys(stringsWithKeys).map(key => {\n        return {\n            key: stringsWithKeys[key],\n            component: 'mod_bigbluebuttonbn',\n        };\n    });\n\n    // Return an object with the matching string keys (we want an object with {<stringkey>: <stringvalue>...}).\n    return getStrings(stringMap)\n        .then((stringArray) => Object.assign(\n            {},\n            ...Object.keys(stringsWithKeys).map(\n                (key, index) => ({[key]: stringArray[index]})\n            )\n        ));\n};\n\nconst getYuiInstance = lang => new Promise(resolve => {\n    // eslint-disable-next-line\n    YUI({\n        lang,\n    }).use('intl', 'datatable', 'datatable-sort', 'datatable-paginator', 'datatype-number', Y => {\n        resolve(Y);\n    });\n});\n\n/**\n * Format the supplied date per the specified locale.\n *\n * @param   {string} locale\n * @param   {number} date\n * @returns {array}\n */\nconst formatDate = (locale, date) => {\n    const realDate = new Date(date);\n    return realDate.toLocaleDateString(locale, {\n        weekday: 'long',\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric',\n    });\n};\n\n/**\n * Format response data for the table.\n *\n * @param   {string} response JSON-encoded table data\n * @returns {array}\n */\nconst getFormattedData = response => {\n    const recordingData = response.tabledata;\n    return JSON.parse(recordingData.data);\n};\n\nconst getTableNode = tableSelector => document.querySelector(tableSelector);\n\nconst fetchRecordingData = tableSelector => {\n    const tableNode = getTableNode(tableSelector);\n    if (tableNode === null) {\n        return Promise.resolve(false);\n    }\n\n    if (tableNode.dataset.importMode) {\n        return repository.fetchRecordingsToImport(\n            tableNode.dataset.bbbid,\n            tableNode.dataset.bbbSourceInstanceId,\n            tableNode.dataset.bbbSourceCourseId,\n            tableNode.dataset.tools,\n            tableNode.dataset.groupId\n        );\n    } else {\n        return repository.fetchRecordings(\n            tableNode.dataset.bbbid,\n            tableNode.dataset.tools,\n            tableNode.dataset.groupId\n        );\n    }\n};\n\n/**\n * Fetch the data table functinos for the specified table.\n *\n * @param {String} tableId in which we will display the table\n * @param {String} searchFormId The Id of the relate.\n * @param {Object} dataTable\n * @returns {Object}\n * @private\n */\nconst getDataTableFunctions = (tableId, searchFormId, dataTable) => {\n    const tableNode = getTableNode(tableId);\n    const bbbid = tableNode.dataset.bbbid;\n\n    const updateTableFromResponse = response => {\n        if (!response || !response.status) {\n            // There was no output at all.\n            return;\n        }\n\n        dataTable.get('data').reset(getFormattedData(response));\n        dataTable.set(\n            'currentData',\n            dataTable.get('data')\n        );\n\n        const currentFilter = dataTable.get('currentFilter');\n        if (currentFilter) {\n            filterByText(currentFilter);\n        }\n    };\n\n    const refreshTableData = () => fetchRecordingData(tableId).then(updateTableFromResponse);\n\n    const filterByText = value => {\n        const dataModel = dataTable.get('currentData');\n        dataTable.set('currentFilter', value);\n\n        const escapedRegex = value.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\");\n        const rsearch = new RegExp(`<span>.*?${escapedRegex}.*?</span>`, 'i');\n\n        dataTable.set('data', dataModel.filter({asList: true}, item => {\n            const name = item.get('recording');\n            if (name && rsearch.test(name)) {\n                return true;\n            }\n\n            const description = item.get('description');\n            return description && rsearch.test(description);\n        }));\n    };\n\n    const requestAction = async(element) => {\n        const getDataFromAction = (element, dataType) => {\n            const dataElement = element.closest(`[data-${dataType}]`);\n            if (dataElement) {\n                return dataElement.dataset[dataType];\n            }\n\n            return null;\n        };\n\n        const elementData = element.dataset;\n        const payload = {\n            bigbluebuttonbnid: bbbid,\n            recordingid: getDataFromAction(element, 'recordingid'),\n            additionaloptions: getDataFromAction(element, 'additionaloptions'),\n            action: elementData.action,\n        };\n        // Slight change for import, for additional options.\n        if (!payload.additionaloptions) {\n            payload.additionaloptions = {};\n        }\n        if (elementData.action === 'import') {\n            const bbbsourceid = getDataFromAction(element, 'source-instance-id');\n            const bbbcourseid = getDataFromAction(element, 'source-course-id');\n            if (!payload.additionaloptions) {\n                payload.additionaloptions = {};\n            }\n            payload.additionaloptions.sourceid = bbbsourceid ? bbbsourceid : 0;\n            payload.additionaloptions.bbbcourseid = bbbcourseid ? bbbcourseid : 0;\n        }\n        // Now additional options should be a json string.\n        payload.additionaloptions = JSON.stringify(payload.additionaloptions);\n        if (element.dataset.requireConfirmation === \"1\") {\n            // Create the confirmation dialogue.\n            try {\n                await saveCancelPromise(\n                    getString('confirm'),\n                    recordingConfirmationMessage(payload),\n                    getString('ok', 'moodle'),\n                );\n            } catch {\n                // User cancelled the dialogue.\n                return;\n            }\n        }\n\n        return repository.updateRecording(payload);\n    };\n\n    const recordingConfirmationMessage = async(data) => {\n\n        const playbackElement = document.querySelector(`#playbacks-${data.recordingid}`);\n        const recordingType = await getString(\n            playbackElement.dataset.imported === 'true' ? 'view_recording_link' : 'view_recording',\n            'bigbluebuttonbn'\n        );\n\n        const confirmation = await getString(`view_recording_${data.action}_confirmation`, 'bigbluebuttonbn', recordingType);\n\n        if (data.action === 'import') {\n            return confirmation;\n        }\n\n        // If it has associated links imported in a different course/activity, show that in confirmation dialog.\n        const associatedLinkCount = document.querySelector(`a#recording-${data.action}-${data.recordingid}`)?.dataset?.links;\n        if (!associatedLinkCount || associatedLinkCount === 0) {\n            return confirmation;\n        }\n\n        const confirmationWarning = await getString(\n            associatedLinkCount === 1\n                ? `view_recording_${data.action}_confirmation_warning_p`\n                : `view_recording_${data.action}_confirmation_warning_s`,\n            'bigbluebuttonbn',\n            associatedLinkCount\n        );\n\n        return confirmationWarning + '\\n\\n' + confirmation;\n    };\n\n    /**\n     * Process an action event.\n     *\n     * @param   {Event} e\n     */\n    const processAction = e => {\n        const popoutLink = e.target.closest('[data-action=\"play\"]');\n        if (popoutLink) {\n            e.preventDefault();\n\n            const videoPlayer = window.open('', '_blank');\n            videoPlayer.opener = null;\n            videoPlayer.location.href = popoutLink.href;\n            // TODO send a recording viewed event when this event will be implemented.\n            return;\n        }\n\n        // Fetch any clicked anchor.\n        const clickedLink = e.target.closest('a[data-action]');\n        if (clickedLink && !clickedLink.classList.contains('disabled')) {\n            e.preventDefault();\n\n            // Create a spinning icon on the table.\n            const iconPromise = addIconToContainerWithPromise(dataTable.get('boundingBox').getDOMNode());\n\n            requestAction(clickedLink)\n                .then(refreshTableData)\n                .then(iconPromise.resolve)\n                .catch(displayException);\n        }\n    };\n\n    const processSearchSubmission = e => {\n        // Prevent the default action.\n        e.preventDefault();\n        const parentNode = e.target.closest('div[role=search]');\n        const searchInput = parentNode.querySelector('input[name=search]');\n        filterByText(searchInput.value);\n    };\n\n    const registerEventListeners = () => {\n        // Add event listeners to the table boundingBox.\n        const boundingBox = dataTable.get('boundingBox').getDOMNode();\n        boundingBox.addEventListener('click', processAction);\n\n        // Setup the search from handlers.\n        const searchForm = document.querySelector(searchFormId);\n        if (searchForm) {\n            const searchButton = document.querySelector(searchFormId + ' button');\n            searchButton.addEventListener('click', processSearchSubmission);\n        }\n    };\n\n    return {\n        filterByText,\n        refreshTableData,\n        registerEventListeners,\n    };\n};\n\n/**\n * Setup the data table for the specified BBB instance.\n *\n * @param {String} tableId in which we will display the table\n * @param {String} searchFormId The Id of the relate.\n * @param   {object} response The response from the data request\n * @returns {Promise}\n */\nconst setupDatatable = (tableId, searchFormId, response) => {\n    if (!response) {\n        return Promise.resolve();\n    }\n\n    if (!response.status) {\n        // Something failed. Continue to show the plain output.\n        return Promise.resolve();\n    }\n\n    const recordingData = response.tabledata;\n\n    const pendingPromise = new Pending('mod_bigbluebuttonbn/recordings/setupDatatable');\n    return Promise.all([getYuiInstance(recordingData.locale), getStringsForYui()])\n        .then(([yuiInstance, strings]) => {\n            // Here we use a custom formatter for date.\n            // See https://clarle.github.io/yui3/yui/docs/api/classes/DataTable.BodyView.Formatters.html\n            // Inspired from examples here: https://clarle.github.io/yui3/yui/docs/datatable/\n            // Normally formatter have the prototype: (col) => (cell) => <computed value>, see:\n            // https://clarle.github.io/yui3/yui/docs/api/files/datatable_js_formatters.js.html#l100 .\n            const dateCustomFormatter = () => (cell) => formatDate(recordingData.locale, cell.value);\n            // Add the fetched strings to the YUI Instance.\n            yuiInstance.Intl.add('datatable-paginator', yuiInstance.config.lang, {...strings});\n            yuiInstance.DataTable.BodyView.Formatters.customDate = dateCustomFormatter;\n            return yuiInstance;\n        })\n        .then(yuiInstance => {\n\n            const tableData = getFormattedData(response);\n            yuiInstance.RecordsPaginatorView = Y.Base.create('my-paginator-view', yuiInstance.DataTable.Paginator.View, [], {\n                _modelChange: function(e) {\n                    var changed = e.changed,\n                        totalItems = (changed && changed.totalItems);\n                    if (totalItems) {\n                        this._updateControlsUI(e.target.get('page'));\n                    }\n                }\n            });\n            return new yuiInstance.DataTable({\n                paginatorView: \"RecordsPaginatorView\",\n                width: \"1195px\",\n                columns: recordingData.columns,\n                data: tableData,\n                rowsPerPage: 10,\n                paginatorLocation: ['header', 'footer'],\n                autoSync: true\n            });\n        })\n        .then(dataTable => {\n            dataTable.render(tableId);\n            const {registerEventListeners} = getDataTableFunctions(\n                tableId,\n                searchFormId,\n                dataTable);\n            registerEventListeners();\n            return dataTable;\n        })\n        .then(dataTable => {\n            pendingPromise.resolve();\n            return dataTable;\n        });\n};\n\n/**\n * Initialise recordings code.\n *\n * @method init\n * @param {String} tableId in which we will display the table\n * @param {String} searchFormId The Id of the relate.\n */\nexport const init = (tableId, searchFormId) => {\n    const pendingPromise = new Pending('mod_bigbluebuttonbn/recordings:init');\n\n    fetchRecordingData(tableId)\n        .then(response => setupDatatable(tableId, searchFormId, response))\n        .then(() => pendingPromise.resolve())\n        .catch(displayException);\n};\n"],"names":["obj","_getRequireWildcardCache","e","WeakMap","r","t","repository","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","_interopRequireWildcard","_pending","stringsWithKeys","first","prev","next","last","goToLabel","goToAction","perPage","showAll","prefetchStrings","entries","map","entry","getStringsForYui","stringMap","keys","key","component","getStrings","then","stringArray","assign","index","getFormattedData","response","recordingData","tabledata","JSON","parse","data","getTableNode","tableSelector","document","querySelector","fetchRecordingData","tableNode","Promise","resolve","dataset","importMode","fetchRecordingsToImport","bbbid","bbbSourceInstanceId","bbbSourceCourseId","tools","groupId","fetchRecordings","getDataTableFunctions","tableId","searchFormId","dataTable","updateTableFromResponse","status","reset","currentFilter","filterByText","refreshTableData","value","dataModel","escapedRegex","replace","rsearch","RegExp","filter","asList","item","name","test","description","recordingConfirmationMessage","async","_document$querySelect","_document$querySelect2","playbackElement","recordingid","recordingType","getString","imported","confirmation","action","associatedLinkCount","links","processAction","popoutLink","target","closest","preventDefault","videoPlayer","window","open","opener","location","href","clickedLink","classList","contains","iconPromise","addIconToContainerWithPromise","getDOMNode","getDataFromAction","element","dataType","dataElement","elementData","payload","bigbluebuttonbnid","additionaloptions","bbbsourceid","bbbcourseid","sourceid","stringify","requireConfirmation","saveCancelPromise","updateRecording","requestAction","catch","displayException","processSearchSubmission","searchInput","registerEventListeners","addEventListener","setupDatatable","pendingPromise","Pending","all","lang","locale","YUI","use","Y","_ref","yuiInstance","strings","Intl","add","config","DataTable","BodyView","Formatters","customDate","dateCustomFormatter","cell","formatDate","date","Date","toLocaleDateString","weekday","year","month","day","tableData","RecordsPaginatorView","Base","create","Paginator","View","_modelChange","changed","totalItems","this","_updateControlsUI","paginatorView","width","columns","rowsPerPage","paginatorLocation","autoSync","render","_exports","init"],"mappings":"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"}