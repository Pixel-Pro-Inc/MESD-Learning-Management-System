{"version":3,"file":"grader.min.js","sources":["../../src/grades/grader.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * This module will tie together all of the different calls the gradable module will make.\n *\n * @module     mod_forum/grades/grader\n * @copyright  2019 Andrew Nicols <andrew@nicols.co.uk>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport * as Selectors from './grader/selectors';\nimport Repository from 'mod_forum/repository';\nimport Templates from 'core/templates';\nimport * as Grader from '../local/grades/grader';\nimport Notification from 'core/notification';\nimport CourseRepository from 'core_course/repository';\nimport {relativeUrl} from 'core/url';\n\nconst templateNames = {\n    contentRegion: 'mod_forum/grades/grader/discussion/posts',\n};\n\n/**\n * Curried function with CMID set, this is then used in unified grader as a fetch a users content.\n *\n * @param {Number} cmid\n * @param {Bool} experimentalDisplayMode\n * @return {Function}\n */\nconst getContentForUserIdFunction = (cmid, experimentalDisplayMode) => (userid) => {\n    /**\n     * Given the parent function is called with the second param set execute the partially executed function.\n     *\n     * @param {Number} userid\n     */\n    return Repository.getDiscussionByUserID(userid, cmid)\n        .then(context => {\n            // Rebuild the returned data for the template.\n            context.discussions = context.discussions.map(discussionPostMapper);\n            context.experimentaldisplaymode = experimentalDisplayMode ? true : false;\n\n            return Templates.render(templateNames.contentRegion, context);\n        })\n        .catch(Notification.exception);\n};\n\n/**\n * Curried function with CMID set, this is then used in unified grader as a fetch users call.\n * The function curried fetches all users in a course for a given CMID.\n *\n * @param {Number} courseID\n * @param {Number} groupID\n * @param {Boolean} onlyActive Whether to fetch only the active enrolled users or all enrolled users in the course.\n * @return {Array} Array of users for a given context.\n */\nconst getGradableUsersForCourseidFunction = (courseID, groupID, onlyActive) => async() => {\n    const context = await CourseRepository.getGradableUsersFromCourseID(courseID, groupID, onlyActive);\n\n    return context.users;\n};\n\n\nconst findGradableNode = node => node.closest(Selectors.gradableItem);\n\n/**\n * For a discussion we need to manipulate it's posts to hide certain UI elements.\n *\n * @param {Object} discussion\n * @return {Array} name, id, posts\n */\nconst discussionPostMapper = (discussion) => {\n    // Map postid => post.\n    const parentMap = new Map();\n    discussion.posts.parentposts.forEach(post => parentMap.set(post.id, post));\n    const userPosts = discussion.posts.userposts.map(post => {\n        post.readonly = true;\n        post.hasreplies = false;\n        post.replies = [];\n\n        const parent = post.parentid ? parentMap.get(post.parentid) : null;\n        if (parent) {\n            parent.hasreplies = false;\n            parent.replies = [];\n            parent.readonly = true;\n            post.parentauthorname = parent.author.fullname;\n        }\n\n        return {\n            parent,\n            post\n        };\n    });\n\n    return {\n        ...discussion,\n        posts: userPosts,\n    };\n};\n\n/**\n * Launch the Grader.\n *\n * @param {HTMLElement} rootNode the root HTML element describing what is to be graded\n * @param {object} param\n * @param {bool} [param.focusOnClose=null]\n */\nconst launchWholeForumGrading = async(rootNode, {\n    focusOnClose = null,\n} = {}) => {\n    const data = rootNode.dataset;\n    const gradingPanelFunctions = await Grader.getGradingPanelFunctions(\n        'mod_forum',\n        data.contextid,\n        data.gradingComponent,\n        data.gradingComponentSubtype,\n        data.gradableItemtype\n    );\n\n    const groupID = data.group ? data.group : 0;\n    const onlyActive = data.gradeOnlyActiveUsers;\n\n    await Grader.launch(\n        getGradableUsersForCourseidFunction(data.courseId, groupID, onlyActive),\n        getContentForUserIdFunction(data.cmid, data.experimentalDisplayMode == \"1\"),\n        gradingPanelFunctions.getter,\n        gradingPanelFunctions.setter,\n        {\n            groupid: data.groupid,\n            initialUserId: data.initialuserid,\n            moduleName: data.name,\n            courseName: data.courseName,\n            courseUrl: relativeUrl('/course/view.php', {id: data.courseId}),\n            sendStudentNotifications: data.sendStudentNotifications,\n            focusOnClose,\n        }\n    );\n};\n\n/**\n * Launch the Grader.\n *\n * @param {HTMLElement} rootNode the root HTML element describing what is to be graded\n * @param {object} param\n * @param {bool} [param.focusOnClose=null]\n */\nconst launchViewGrading = async(rootNode, {\n    focusOnClose = null,\n} = {}) => {\n    const data = rootNode.dataset;\n    const gradingPanelFunctions = await Grader.getGradingPanelFunctions(\n        'mod_forum',\n        data.contextid,\n        data.gradingComponent,\n        data.gradingComponentSubtype,\n        data.gradableItemtype\n    );\n\n    await Grader.view(\n        gradingPanelFunctions.getter,\n        data.userid,\n        data.name,\n        {\n            focusOnClose,\n        }\n    );\n};\n\n/**\n * Register listeners to launch the grading panel.\n */\nexport const registerLaunchListeners = () => {\n    document.addEventListener('click', async(e) => {\n        if (e.target.matches(Selectors.launch)) {\n            const rootNode = findGradableNode(e.target);\n\n            if (!rootNode) {\n                throw Error('Unable to find a gradable item');\n            }\n\n            if (rootNode.matches(Selectors.gradableItems.wholeForum)) {\n                // Note: The preventDefault must be before any async function calls because the function becomes async\n                // at that point and the default action is implemented.\n                e.preventDefault();\n                try {\n                    await launchWholeForumGrading(rootNode, {\n                        focusOnClose: e.target,\n                    });\n                } catch (error) {\n                    Notification.exception(error);\n                }\n            } else {\n                throw Error('Unable to find a valid gradable item');\n            }\n        }\n        if (e.target.matches(Selectors.viewGrade)) {\n            e.preventDefault();\n            const rootNode = findGradableNode(e.target);\n\n            if (!rootNode) {\n                throw Error('Unable to find a gradable item');\n            }\n\n            if (rootNode.matches(Selectors.gradableItems.wholeForum)) {\n                // Note: The preventDefault must be before any async function calls because the function becomes async\n                // at that point and the default action is implemented.\n                e.preventDefault();\n                try {\n                    await launchViewGrading(rootNode, {\n                        focusOnClose: e.target,\n                    });\n                } catch (error) {\n                    Notification.exception(error);\n                }\n            } else {\n                throw Error('Unable to find a valid gradable item');\n            }\n        }\n    });\n};\n"],"names":["_interopRequireDefault","obj","__esModule","default","_getRequireWildcardCache","e","WeakMap","r","t","_interopRequireWildcard","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","Selectors","_repository","_templates","Grader","_notification","_repository2","templateNames","findGradableNode","node","closest","gradableItem","discussionPostMapper","discussion","parentMap","Map","posts","parentposts","forEach","post","id","userPosts","userposts","map","readonly","hasreplies","replies","parent","parentid","parentauthorname","author","fullname","launchWholeForumGrading","async","rootNode","focusOnClose","arguments","length","undefined","data","dataset","gradingPanelFunctions","getGradingPanelFunctions","contextid","gradingComponent","gradingComponentSubtype","gradableItemtype","groupID","group","onlyActive","gradeOnlyActiveUsers","getContentForUserIdFunction","cmid","experimentalDisplayMode","launch","getGradableUsersForCourseidFunction","courseID","CourseRepository","getGradableUsersFromCourseID","users","courseId","userid","Repository","getDiscussionByUserID","then","context","discussions","experimentaldisplaymode","Templates","render","catch","Notification","exception","getter","setter","groupid","initialUserId","initialuserid","moduleName","name","courseName","courseUrl","relativeUrl","sendStudentNotifications","_exports","registerLaunchListeners","document","addEventListener","target","matches","Error","gradableItems","wholeForum","preventDefault","error","viewGrade","view","launchViewGrading"],"mappings":"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"}