{"version":3,"file":"grade.min.js","sources":["../../src/comboboxsearch/grade.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Allow the user to search for grades within the grade area.\n *\n * @module    core_grades/comboboxsearch/grade\n * @copyright 2023 Mathew May <mathew.solutions>\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport search_combobox from 'core/comboboxsearch/search_combobox';\nimport * as Repository from 'core_grades/searchwidget/repository';\nimport {renderForPromise, replaceNodeContents} from 'core/templates';\nimport {debounce} from 'core/utils';\n\nexport default class GradeItemSearch extends search_combobox {\n\n    courseID;\n\n    constructor() {\n        super();\n\n        // Define our standard lookups.\n        this.selectors = {\n            ...this.selectors,\n            courseid: '[data-region=\"courseid\"]',\n            placeholder: '.gradesearchdropdown [data-region=\"searchplaceholder\"]',\n        };\n        const component = document.querySelector(this.componentSelector());\n        this.courseID = component.querySelector(this.selectors.courseid).dataset.courseid;\n\n        this.renderDefault();\n    }\n\n    static init() {\n        return new GradeItemSearch();\n    }\n\n    /**\n     * The overall div that contains the searching widget.\n     *\n     * @returns {string}\n     */\n    componentSelector() {\n        return '.grade-search';\n    }\n\n    /**\n     * The dropdown div that contains the searching widget result space.\n     *\n     * @returns {string}\n     */\n    dropdownSelector() {\n        return '.gradesearchdropdown';\n    }\n\n    /**\n     * The triggering div that contains the searching widget.\n     *\n     * @returns {string}\n     */\n    triggerSelector() {\n        return '.gradesearchwidget';\n    }\n\n    /**\n     * Build the content then replace the node.\n     */\n    async renderDropdown() {\n        const {html, js} = await renderForPromise('core/local/comboboxsearch/resultset', {\n            results: this.getMatchedResults(),\n            hasresults: this.getMatchedResults().length > 0,\n            searchterm: this.getSearchTerm(),\n        });\n        replaceNodeContents(this.selectors.placeholder, html, js);\n    }\n\n    /**\n     * Build the content then replace the node by default we want our form to exist.\n     */\n    async renderDefault() {\n        this.setMatchedResults(await this.filterDataset(await this.getDataset()));\n        this.filterMatchDataset();\n\n        await this.renderDropdown();\n\n        this.updateNodes();\n        this.registerInputEvents();\n\n        // Add a small BS listener so that we can set the focus correctly on open.\n        this.$component.on('shown.bs.dropdown', () => {\n            this.searchInput.focus({preventScroll: true});\n        });\n    }\n\n    /**\n     * Get the data we will be searching against in this component.\n     *\n     * @returns {Promise<*>}\n     */\n    async fetchDataset() {\n        return await Repository.gradeitemFetch(this.courseID).then((r) => r.gradeitems);\n    }\n\n    /**\n     * Dictate to the search component how and what we want to match upon.\n     *\n     * @param {Array} filterableData\n     * @returns {Array} The users that match the given criteria.\n     */\n    async filterDataset(filterableData) {\n        // Sometimes we just want to show everything.\n        if (this.getPreppedSearchTerm() === '') {\n            return filterableData;\n        }\n        return filterableData.filter((grade) => Object.keys(grade).some((key) => {\n            if (grade[key] === \"\") {\n                return false;\n            }\n            return grade[key].toString().toLowerCase().includes(this.getPreppedSearchTerm());\n        }));\n    }\n\n    /**\n     * Given we have a subset of the dataset, set the field that we matched upon to inform the end user.\n     */\n    filterMatchDataset() {\n        this.setMatchedResults(\n            this.getMatchedResults().map((grade) => {\n                return {\n                    id: grade.id,\n                    name: grade.name,\n                    link: this.selectOneLink(grade.id),\n                };\n            })\n        );\n    }\n\n    /**\n     * Handle any keyboard inputs.\n     */\n    registerInputEvents() {\n        // Register & handle the text input.\n        this.searchInput.addEventListener('input', debounce(async() => {\n            this.setSearchTerms(this.searchInput.value);\n            // We can also require a set amount of input before search.\n            if (this.searchInput.value === '') {\n                // Hide the \"clear\" search button in the search bar.\n                this.clearSearchButton.classList.add('d-none');\n            } else {\n                // Display the \"clear\" search button in the search bar.\n                this.clearSearchButton.classList.remove('d-none');\n            }\n            // User has given something for us to filter against.\n            await this.filterrenderpipe();\n        }, 300));\n    }\n\n    /**\n     * The handler for when a user interacts with the component.\n     *\n     * @param {MouseEvent} e The triggering event that we are working with.\n     */\n    async clickHandler(e) {\n        if (e.target.closest(this.selectors.dropdown)) {\n            // Forcibly prevent BS events so that we can control the open and close.\n            // Really needed because by default input elements cant trigger a dropdown.\n            e.stopImmediatePropagation();\n        }\n        this.clearSearchButton.addEventListener('click', async() => {\n            this.searchInput.value = '';\n            this.setSearchTerms(this.searchInput.value);\n            await this.filterrenderpipe();\n        });\n        // Prevent normal key presses activating this.\n        if (e.target.closest('.dropdown-item') && e.button === 0) {\n            window.location = e.target.closest('.dropdown-item').href;\n        }\n    }\n\n    /**\n     * The handler for when a user presses a key within the component.\n     *\n     * @param {KeyboardEvent} e The triggering event that we are working with.\n     */\n    keyHandler(e) {\n        super.keyHandler(e);\n        // Switch the key presses to handle keyboard nav.\n        switch (e.key) {\n            case 'Tab':\n                if (e.target.closest(this.selectors.input)) {\n                    e.preventDefault();\n                    this.clearSearchButton.focus({preventScroll: true});\n                }\n                break;\n            case 'Escape':\n                if (document.activeElement.getAttribute('role') === 'option') {\n                    e.stopPropagation();\n                    this.searchInput.focus({preventScroll: true});\n                } else if (e.target.closest(this.selectors.input)) {\n                    const trigger = this.component.querySelector(this.selectors.trigger);\n                    trigger.focus({preventScroll: true});\n                }\n        }\n    }\n\n    /**\n     * Override the input event listener for the text input area.\n     */\n    registerInputHandlers() {\n        // Register & handle the text input.\n        this.searchInput.addEventListener('input', debounce(() => {\n            this.setSearchTerms(this.searchInput.value);\n            // We can also require a set amount of input before search.\n            if (this.getSearchTerm() === '') {\n                // Hide the \"clear\" search button in the search bar.\n                this.clearSearchButton.classList.add('d-none');\n            } else {\n                // Display the \"clear\" search button in the search bar.\n                this.clearSearchButton.classList.remove('d-none');\n            }\n        }, 300));\n    }\n\n    /**\n     * Build up the view all link that is dedicated to a particular result.\n     *\n     * @param {Number} gradeID The ID of the grade item selected.\n     */\n    selectOneLink(gradeID) {\n        throw new Error(`selectOneLink(${gradeID}) must be implemented in ${this.constructor.name}`);\n    }\n}\n"],"names":["obj","_getRequireWildcardCache","e","WeakMap","r","t","_search_combobox","__esModule","default","Repository","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","_interopRequireWildcard","GradeItemSearch","search_combobox","courseID","constructor","super","this","selectors","courseid","placeholder","component","document","querySelector","componentSelector","dataset","renderDefault","init","dropdownSelector","triggerSelector","renderDropdown","html","js","renderForPromise","results","getMatchedResults","hasresults","length","searchterm","getSearchTerm","replaceNodeContents","setMatchedResults","filterDataset","getDataset","filterMatchDataset","updateNodes","registerInputEvents","$component","on","searchInput","focus","preventScroll","fetchDataset","gradeitemFetch","then","gradeitems","filterableData","getPreppedSearchTerm","filter","grade","keys","some","key","toString","toLowerCase","includes","map","id","name","link","selectOneLink","addEventListener","debounce","async","setSearchTerms","value","clearSearchButton","classList","add","remove","filterrenderpipe","clickHandler","target","closest","dropdown","stopImmediatePropagation","button","window","location","href","keyHandler","input","preventDefault","activeElement","getAttribute","stopPropagation","trigger","registerInputHandlers","gradeID","Error","_exports"],"mappings":"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"}