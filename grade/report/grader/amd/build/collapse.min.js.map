{"version":3,"file":"collapse.min.js","sources":["../src/collapse.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Allow the user to show and hide columns of the report at will.\n *\n * @module    gradereport_grader/collapse\n * @copyright 2023 Mathew May <mathew.solutions>\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport * as Repository from 'gradereport_grader/collapse/repository';\nimport search_combobox from 'core/comboboxsearch/search_combobox';\nimport {renderForPromise, replaceNodeContents, replaceNode} from 'core/templates';\nimport {debounce} from 'core/utils';\nimport $ from 'jquery';\nimport {getStrings} from 'core/str';\nimport CustomEvents from \"core/custom_interaction_events\";\nimport storage from 'core/localstorage';\nimport {addIconToContainer} from 'core/loadingicon';\nimport Notification from 'core/notification';\nimport Pending from 'core/pending';\n\n// Contain our selectors within this file until they could be of use elsewhere.\nconst selectors = {\n    component: '.collapse-columns',\n    formDropdown: '.columnsdropdownform',\n    formItems: {\n        cancel: 'cancel',\n        save: 'save',\n        checked: 'input[type=\"checkbox\"]:checked',\n        currentlyUnchecked: 'input[type=\"checkbox\"]:not([data-action=\"selectall\"])',\n    },\n    hider: 'hide',\n    expand: 'expand',\n    colVal: '[data-col]',\n    itemVal: '[data-itemid]',\n    content: '[data-collapse=\"content\"]',\n    sort: '[data-collapse=\"sort\"]',\n    expandbutton: '[data-collapse=\"expandbutton\"]',\n    rangerowcell: '[data-collapse=\"rangerowcell\"]',\n    avgrowcell: '[data-collapse=\"avgrowcell\"]',\n    menu: '[data-collapse=\"menu\"]',\n    icons: '.data-collapse_gradeicons',\n    count: '[data-collapse=\"count\"]',\n    placeholder: '.collapsecolumndropdown [data-region=\"placeholder\"]',\n    fullDropdown: '.collapsecolumndropdown',\n};\n\nconst countIndicator = document.querySelector(selectors.count);\n\nexport default class ColumnSearch extends search_combobox {\n\n    userID = -1;\n    courseID = null;\n    defaultSort = '';\n\n    nodes = [];\n\n    gradeStrings = null;\n    userStrings = null;\n    stringMap = [];\n\n    static init(userID, courseID, defaultSort) {\n        return new ColumnSearch(userID, courseID, defaultSort);\n    }\n\n    constructor(userID, courseID, defaultSort) {\n        super();\n        this.userID = userID;\n        this.courseID = courseID;\n        this.defaultSort = defaultSort;\n        this.component = document.querySelector(selectors.component);\n\n        const pendingPromise = new Pending();\n        // Display a loader whilst collapsing appropriate columns (based on the locally stored state for the current user).\n        addIconToContainer(document.querySelector('.gradeparent')).then((loader) => {\n            setTimeout(() => {\n                // Get the users' checked columns to change.\n                this.getDataset().forEach((item) => {\n                    this.nodesUpdate(item);\n                });\n                this.renderDefault();\n\n                // Once the grade categories have been re-collapsed, remove the loader and display the Gradebook setup content.\n                loader.remove();\n                document.querySelector('.gradereport-grader-table').classList.remove('d-none');\n            }, 10);\n        }).then(() => pendingPromise.resolve()).catch(Notification.exception);\n    }\n\n    /**\n     * The overall div that contains the searching widget.\n     *\n     * @returns {string}\n     */\n    componentSelector() {\n        return '.collapse-columns';\n    }\n\n    /**\n     * The dropdown div that contains the searching widget result space.\n     *\n     * @returns {string}\n     */\n    dropdownSelector() {\n        return '.searchresultitemscontainer';\n    }\n\n    /**\n     * The triggering div that contains the searching widget.\n     *\n     * @returns {string}\n     */\n    triggerSelector() {\n        return '.collapsecolumn';\n    }\n\n    /**\n     * Return the dataset that we will be searching upon.\n     *\n     * @returns {Array}\n     */\n    getDataset() {\n        if (!this.dataset) {\n            const cols = this.fetchDataset();\n            this.dataset = JSON.parse(cols) ? JSON.parse(cols).split(',') : [];\n        }\n        this.datasetSize = this.dataset.length;\n        return this.dataset;\n    }\n\n    /**\n     * Get the data we will be searching against in this component.\n     *\n     * @returns {string}\n     */\n    fetchDataset() {\n        return storage.get(`gradereport_grader_collapseditems_${this.courseID}_${this.userID}`);\n    }\n\n    /**\n     * Given a user performs an action, update the users' preferences.\n     */\n    setPreferences() {\n        storage.set(`gradereport_grader_collapseditems_${this.courseID}_${this.userID}`,\n            JSON.stringify(this.getDataset().join(','))\n        );\n    }\n\n    /**\n     * Register clickable event listeners.\n     */\n    registerClickHandlers() {\n        // Register click events within the component.\n        this.component.addEventListener('click', this.clickHandler.bind(this));\n\n        document.addEventListener('click', this.docClickHandler.bind(this));\n    }\n\n    /**\n     * The handler for when a user interacts with the component.\n     *\n     * @param {MouseEvent} e The triggering event that we are working with.\n     */\n    clickHandler(e) {\n        super.clickHandler(e);\n        // Prevent BS from closing the dropdown if they click elsewhere within the dropdown besides the form.\n        if (e.target.closest(selectors.fullDropdown)) {\n            e.stopPropagation();\n        }\n    }\n\n    /**\n     * Externally defined click function to improve memory handling.\n     *\n     * @param {MouseEvent} e\n     * @returns {Promise<void>}\n     */\n    async docClickHandler(e) {\n        if (e.target.dataset.hider === selectors.hider) {\n            e.preventDefault();\n            const desiredToHide = e.target.closest(selectors.colVal) ?\n                e.target.closest(selectors.colVal)?.dataset.col :\n                e.target.closest(selectors.itemVal)?.dataset.itemid;\n            const idx = this.getDataset().indexOf(desiredToHide);\n            if (idx === -1) {\n                this.getDataset().push(desiredToHide);\n            }\n            await this.prefcountpipe();\n\n            this.nodesUpdate(desiredToHide);\n        }\n\n        if (e.target.closest('button')?.dataset.hider === selectors.expand) {\n            e.preventDefault();\n            const desiredToHide = e.target.closest(selectors.colVal) ?\n                e.target.closest(selectors.colVal)?.dataset.col :\n                e.target.closest(selectors.itemVal)?.dataset.itemid;\n            const idx = this.getDataset().indexOf(desiredToHide);\n            this.getDataset().splice(idx, 1);\n\n            await this.prefcountpipe();\n\n            this.nodesUpdate(e.target.closest(selectors.colVal)?.dataset.col);\n            this.nodesUpdate(e.target.closest(selectors.colVal)?.dataset.itemid);\n        }\n    }\n\n    /**\n     * The handler for when a user presses a key within the component.\n     *\n     * @param {KeyboardEvent} e The triggering event that we are working with.\n     */\n    async keyHandler(e) {\n        super.keyHandler(e);\n\n        // Switch the key presses to handle keyboard nav.\n        switch (e.key) {\n            case 'Tab':\n                if (e.target.closest(this.selectors.input)) {\n                    e.preventDefault();\n                    this.clearSearchButton.focus({preventScroll: true});\n                }\n                break;\n        }\n    }\n\n    /**\n     * Handle any keyboard inputs.\n     */\n    registerInputEvents() {\n        // Register & handle the text input.\n        this.searchInput.addEventListener('input', debounce(async() => {\n            this.setSearchTerms(this.searchInput.value);\n            // We can also require a set amount of input before search.\n            if (this.searchInput.value === '') {\n                // Hide the \"clear\" search button in the search bar.\n                this.clearSearchButton.classList.add('d-none');\n            } else {\n                // Display the \"clear\" search button in the search bar.\n                this.clearSearchButton.classList.remove('d-none');\n            }\n            // User has given something for us to filter against.\n            await this.filterrenderpipe();\n        }, 300));\n    }\n\n    /**\n     * Handle the form submission within the dropdown.\n     */\n    registerFormEvents() {\n        const form = this.component.querySelector(selectors.formDropdown);\n        const events = [\n            'click',\n            CustomEvents.events.activate,\n            CustomEvents.events.keyboardActivate\n        ];\n        CustomEvents.define(document, events);\n\n        const selectall = form.querySelector('[data-action=\"selectall\"]');\n\n        // Register clicks & keyboard form handling.\n        events.forEach((event) => {\n            const submitBtn = form.querySelector(`[data-action=\"${selectors.formItems.save}\"`);\n            form.addEventListener(event, (e) => {\n                // Stop Bootstrap from being clever.\n                e.stopPropagation();\n                const input = e.target.closest('input');\n                if (input) {\n                    // If the user is unchecking an item, we need to uncheck the select all if it's checked.\n                    if (selectall.checked && !input.checked) {\n                        selectall.checked = false;\n                    }\n                    const checkedCount = Array.from(form.querySelectorAll(selectors.formItems.checked)).length;\n                    // Check if any are clicked or not then change disabled.\n                    submitBtn.disabled = checkedCount <= 0;\n                }\n            }, false);\n\n            // Stop Bootstrap from being clever.\n            this.searchInput.addEventListener(event, e => e.stopPropagation());\n            this.clearSearchButton.addEventListener(event, async(e) => {\n                e.stopPropagation();\n                this.searchInput.value = '';\n                this.setSearchTerms(this.searchInput.value);\n                await this.filterrenderpipe();\n            });\n            selectall.addEventListener(event, (e) => {\n                // Stop Bootstrap from being clever.\n                e.stopPropagation();\n                if (!selectall.checked) {\n                    const touncheck = Array.from(form.querySelectorAll(selectors.formItems.checked));\n                    touncheck.forEach(item => {\n                        item.checked = false;\n                    });\n                    submitBtn.disabled = true;\n                } else {\n                    const currentUnchecked = Array.from(form.querySelectorAll(selectors.formItems.currentlyUnchecked));\n                    currentUnchecked.forEach(item => {\n                        item.checked = true;\n                    });\n                    submitBtn.disabled = false;\n                }\n            });\n        });\n\n        form.addEventListener('submit', async(e) => {\n            e.preventDefault();\n            if (e.submitter.dataset.action === selectors.formItems.cancel) {\n                $(this.component).dropdown('toggle');\n                return;\n            }\n            // Get the users' checked columns to change.\n            const checkedItems = [...form.elements].filter(item => item.checked);\n            checkedItems.forEach((item) => {\n                const idx = this.getDataset().indexOf(item.dataset.collapse);\n                this.getDataset().splice(idx, 1);\n                this.nodesUpdate(item.dataset.collapse);\n            });\n            // Reset the check all & submit to false just in case.\n            selectall.checked = false;\n            e.submitter.disabled = true;\n            await this.prefcountpipe();\n        });\n    }\n\n    nodesUpdate(item) {\n        const colNodesToHide = [...document.querySelectorAll(`[data-col=\"${item}\"]`)];\n        const itemIDNodesToHide = [...document.querySelectorAll(`[data-itemid=\"${item}\"]`)];\n        this.nodes = [...colNodesToHide, ...itemIDNodesToHide];\n        this.updateDisplay();\n    }\n\n    /**\n     * Update the user preferences, count display then render the results.\n     *\n     * @returns {Promise<void>}\n     */\n    async prefcountpipe() {\n        this.setPreferences();\n        this.countUpdate();\n        await this.filterrenderpipe();\n    }\n\n    /**\n     * Dictate to the search component how and what we want to match upon.\n     *\n     * @param {Array} filterableData\n     * @returns {Array} An array of objects containing the system reference and the user readable value.\n     */\n    async filterDataset(filterableData) {\n        const stringUserMap = await this.fetchRequiredUserStrings();\n        const stringGradeMap = await this.fetchRequiredGradeStrings();\n        // Custom user profile fields are not in our string map and need a bit of extra love.\n        const customFieldMap = this.fetchCustomFieldValues();\n        this.stringMap = new Map([...stringGradeMap, ...stringUserMap, ...customFieldMap]);\n\n        const searching = filterableData.map(s => {\n            const mapObj = this.stringMap.get(s);\n            if (mapObj === undefined) {\n                return {key: s, string: s};\n            }\n            return {\n                key: s,\n                string: mapObj.itemname ?? this.stringMap.get(s),\n                category: mapObj.category ?? '',\n            };\n        });\n        // Sometimes we just want to show everything.\n        if (this.getPreppedSearchTerm() === '') {\n            return searching;\n        }\n        // Other times we want to actually filter the content.\n        return searching.filter((col) => {\n            return col.string.toString().toLowerCase().includes(this.getPreppedSearchTerm());\n        });\n    }\n\n    /**\n     * Given we have a subset of the dataset, set the field that we matched upon to inform the end user.\n     */\n    filterMatchDataset() {\n        this.setMatchedResults(\n            this.getMatchedResults().map((column) => {\n                return {\n                    name: column.key,\n                    displayName: column.string ?? column.key,\n                    category: column.category ?? '',\n                };\n            })\n        );\n    }\n\n    /**\n     * With an array of nodes, switch their classes and values.\n     */\n    updateDisplay() {\n        this.nodes.forEach((element) => {\n            const content = element.querySelector(selectors.content);\n            const sort = element.querySelector(selectors.sort);\n            const expandButton = element.querySelector(selectors.expandbutton);\n            const rangeRowCell = element.querySelector(selectors.rangerowcell);\n            const avgRowCell = element.querySelector(selectors.avgrowcell);\n            const nodeSet = [\n                element.querySelector(selectors.menu),\n                element.querySelector(selectors.icons),\n                content\n            ];\n\n            // This can be further improved to reduce redundant similar calls.\n            if (element.classList.contains('cell')) {\n                // The column is actively being sorted, lets reset that and reload the page.\n                if (sort !== null) {\n                    window.location = this.defaultSort;\n                }\n                if (content === null) {\n                    // If it's not a content cell, it must be an overall average or a range cell.\n                    const rowCell = avgRowCell ?? rangeRowCell;\n\n                    rowCell?.classList.toggle('d-none');\n                    rowCell?.setAttribute('aria-hidden',\n                        rowCell?.classList.contains('d-none') ? 'true' : 'false');\n                } else if (content.classList.contains('d-none')) {\n                    // We should always have content but some cells do not contain menus or other actions.\n                    element.classList.remove('collapsed');\n                    // If there are many nodes, apply the following.\n                    if (content.childNodes.length > 1) {\n                        content.classList.add('d-flex');\n                    }\n                    nodeSet.forEach(node => {\n                        node?.classList.remove('d-none');\n                        node?.setAttribute('aria-hidden', 'false');\n                    });\n                    expandButton?.classList.add('d-none');\n                    expandButton?.setAttribute('aria-hidden', 'true');\n                } else {\n                    element.classList.add('collapsed');\n                    content.classList.remove('d-flex');\n                    nodeSet.forEach(node => {\n                        node?.classList.add('d-none');\n                        node?.setAttribute('aria-hidden', 'true');\n                    });\n                    expandButton?.classList.remove('d-none');\n                    expandButton?.setAttribute('aria-hidden', 'false');\n                }\n            }\n        });\n    }\n\n    /**\n     * Update the visual count of collapsed columns or hide the count all together.\n     */\n    countUpdate() {\n        countIndicator.textContent = this.getDatasetSize();\n        if (this.getDatasetSize() > 0) {\n            this.component.parentElement.classList.add('d-flex');\n            this.component.parentElement.classList.remove('d-none');\n        } else {\n            this.component.parentElement.classList.remove('d-flex');\n            this.component.parentElement.classList.add('d-none');\n        }\n    }\n\n    /**\n     * Build the content then replace the node by default we want our form to exist.\n     */\n    async renderDefault() {\n        this.setMatchedResults(await this.filterDataset(this.getDataset()));\n        this.filterMatchDataset();\n\n        // Update the collapsed button pill.\n        this.countUpdate();\n        const {html, js} = await renderForPromise('gradereport_grader/collapse/collapsebody', {\n            'results': this.getMatchedResults(),\n            'userid': this.userID,\n        });\n        replaceNode(selectors.placeholder, html, js);\n        this.updateNodes();\n\n        // Given we now have the body, we can set up more triggers.\n        this.registerFormEvents();\n        this.registerInputEvents();\n\n        // Add a small BS listener so that we can set the focus correctly on open.\n        this.$component.on('shown.bs.dropdown', () => {\n            this.searchInput.focus({preventScroll: true});\n        });\n    }\n\n    /**\n     * Build the content then replace the node.\n     */\n    async renderDropdown() {\n        const form = this.component.querySelector(selectors.formDropdown);\n        const selectall = form.querySelector('[data-action=\"selectall\"]');\n        const {html, js} = await renderForPromise('gradereport_grader/collapse/collapseresults', {\n            'results': this.getMatchedResults(),\n            'searchTerm': this.getSearchTerm(),\n        });\n        selectall.disabled = this.getMatchedResults().length === 0;\n        replaceNodeContents(this.getHTMLElements().searchDropdown, html, js);\n    }\n\n    /**\n     * If we have any custom user profile fields, grab their system & readable names to add to our string map.\n     *\n     * @returns {array<string,*>} An array of associated string arrays ready for our map.\n     */\n    fetchCustomFieldValues() {\n        const customFields = document.querySelectorAll('[data-collapse-name]');\n        // Cast from NodeList to array to grab all the values.\n        return [...customFields].map(field => [field.parentElement.dataset.col, field.dataset.collapseName]);\n    }\n\n    /**\n     * Given the set of profile fields we can possibly search, fetch their strings,\n     * so we can report to screen readers the field that matched.\n     *\n     * @returns {Promise<void>}\n     */\n    fetchRequiredUserStrings() {\n        if (!this.userStrings) {\n            const requiredStrings = [\n                'username',\n                'firstname',\n                'lastname',\n                'email',\n                'city',\n                'country',\n                'department',\n                'institution',\n                'idnumber',\n                'phone1',\n                'phone2',\n            ];\n            this.userStrings = getStrings(requiredStrings.map((key) => ({key})))\n                .then((stringArray) => new Map(\n                    requiredStrings.map((key, index) => ([key, stringArray[index]]))\n                ));\n        }\n        return this.userStrings;\n    }\n\n    /**\n     * Given the set of gradable items we can possibly search, fetch their strings,\n     * so we can report to screen readers the field that matched.\n     *\n     * @returns {Promise<void>}\n     */\n    fetchRequiredGradeStrings() {\n        if (!this.gradeStrings) {\n            this.gradeStrings = Repository.gradeItems(this.courseID)\n                .then((result) => new Map(\n                    result.gradeItems.map(key => ([key.id, key]))\n                ));\n        }\n        return this.gradeStrings;\n    }\n}\n"],"names":["_interopRequireDefault","obj","__esModule","default","_getRequireWildcardCache","e","WeakMap","r","t","Repository","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","_interopRequireWildcard","_search_combobox","_jquery","_custom_interaction_events","_localstorage","_notification","_pending","selectors","cancel","save","checked","currentlyUnchecked","countIndicator","document","querySelector","ColumnSearch","search_combobox","userID","courseID","defaultSort","nodes","gradeStrings","userStrings","stringMap","init","constructor","super","this","component","pendingPromise","Pending","addIconToContainer","then","loader","setTimeout","getDataset","forEach","item","nodesUpdate","renderDefault","remove","classList","resolve","catch","Notification","exception","componentSelector","dropdownSelector","triggerSelector","dataset","cols","fetchDataset","JSON","parse","split","datasetSize","length","storage","setPreferences","stringify","join","registerClickHandlers","addEventListener","clickHandler","bind","docClickHandler","target","closest","stopPropagation","_e$target$closest3","hider","_e$target$closest","_e$target$closest2","preventDefault","desiredToHide","col","itemid","indexOf","push","prefcountpipe","_e$target$closest4","_e$target$closest5","_e$target$closest6","_e$target$closest7","idx","splice","keyHandler","key","input","clearSearchButton","focus","preventScroll","registerInputEvents","searchInput","debounce","async","setSearchTerms","value","add","filterrenderpipe","registerFormEvents","form","events","CustomEvents","activate","keyboardActivate","define","selectall","event","submitBtn","checkedCount","Array","from","querySelectorAll","disabled","submitter","action","$","dropdown","elements","filter","collapse","colNodesToHide","itemIDNodesToHide","updateDisplay","countUpdate","filterDataset","filterableData","stringUserMap","fetchRequiredUserStrings","stringGradeMap","fetchRequiredGradeStrings","customFieldMap","fetchCustomFieldValues","Map","searching","map","s","mapObj","undefined","string","itemname","category","getPreppedSearchTerm","toString","toLowerCase","includes","filterMatchDataset","setMatchedResults","getMatchedResults","column","name","displayName","element","content","sort","expandButton","rangeRowCell","avgRowCell","nodeSet","contains","window","location","rowCell","toggle","setAttribute","childNodes","node","textContent","getDatasetSize","parentElement","html","js","renderForPromise","results","userid","replaceNode","updateNodes","$component","on","renderDropdown","searchTerm","getSearchTerm","replaceNodeContents","getHTMLElements","searchDropdown","field","collapseName","requiredStrings","getStrings","stringArray","index","gradeItems","result","id","_exports"],"mappings":"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"}